// Copyright IBM Corp. 2021 All Rights Reserved.
// Licensed under the Mozilla Public License v2.0

package ibm

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.ibm.com/Notification-Hub/event-notifications-go-admin-sdk/eventnotificationsapiv1"
)

func dataSourceIBMEnTopics() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceIBMEnTopicsRead,

		Schema: map[string]*schema.Schema{
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique identifier for IBM Cloud Event Notifications instance.",
			},
			"total_count": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "Number of topics.",
			},
			"offset": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "Current offset.",
			},
			"limit": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: "limit to show subscriptions.",
			},
			"search_key": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Filter the topic by name",
			},
			"topics": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "List of topics.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Autogenerated topic ID.",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Name of the topic.",
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Description of the topic.",
						},
						"source_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Number of sources.",
						},
						"sources": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: "List of source names.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"subscription_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Number of subscriptions.",
						},
					},
				},
			},
		},
	}
}

func dataSourceIBMEnTopicsRead(d *schema.ResourceData, meta interface{}) error {
	enClient, err := meta.(ClientSession).EventNotificationsApiV1()
	if err != nil {
		return err
	}

	options := &eventnotificationsapiv1.ListTopicsOptions{}

	options.SetInstanceID(d.Get("instance_id").(string))

	if _, ok := d.GetOk("limit"); ok {
		options.SetLimit(d.Get("limit").(int64))
	}
	if _, ok := d.GetOk("offset"); ok {
		options.SetOffset(d.Get("offset").(int64))
	}
	if _, ok := d.GetOk("search_key"); ok {
		options.SetSearch(d.Get("search_key").(string))
	}

	result, response, err := enClient.ListTopics(options)
	if err != nil {
		return fmt.Errorf("ListTopics failed %s\n%s", err, response)
	}

	d.SetId(fmt.Sprintf("topics_%s", d.Get("instance_id").(string)))

	if err = d.Set("total_count", intValue(result.TotalCount)); err != nil {
		return fmt.Errorf("error setting total_count: %s", err)
	}

	if err = d.Set("offset", intValue(result.Offset)); err != nil {
		return fmt.Errorf("error setting offset: %s", err)
	}

	if err = d.Set("limit", intValue(result.Limit)); err != nil {
		return fmt.Errorf("error setting limit: %s", err)
	}

	if result.Topics != nil {
		err = d.Set("topics", enTopicListFlatten(result.Topics))
		if err != nil {
			return fmt.Errorf("error setting topics %s", err)
		}
	}

	return nil
}

func enTopicListFlatten(result []eventnotificationsapiv1.TopicsListItem) (topics []map[string]interface{}) {
	for _, topicsItem := range result {
		topics = append(topics, enTopicsToMap(topicsItem))
	}

	return topics
}

func enTopicsToMap(topicsItem eventnotificationsapiv1.TopicsListItem) (topicsMap map[string]interface{}) {
	topicsMap = map[string]interface{}{}

	if topicsItem.ID != nil {
		topicsMap["id"] = topicsItem.ID
	}

	if topicsItem.Name != nil {
		topicsMap["name"] = topicsItem.Name
	}

	if topicsItem.Description != nil {
		topicsMap["description"] = topicsItem.Description
	}

	if topicsItem.SourceCount != nil {
		topicsMap["source_count"] = topicsItem.SourceCount
	}

	if topicsItem.Sources != nil {
		topicsMap["sources"] = topicsItem.Sources
	}

	if topicsItem.SubscriptionCount != nil {
		topicsMap["subscription_count"] = topicsItem.SubscriptionCount
	}

	return topicsMap
}

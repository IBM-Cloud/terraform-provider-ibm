// Copyright IBM Corp. 2025 All Rights Reserved.
// Licensed under the Mozilla Public License v2.0

/*
 * IBM OpenAPI Terraform Generator Version: 3.97.2-fc613b62-20241203-155509
 */

package vmware

import (
	"context"
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/IBM-Cloud/terraform-provider-ibm/ibm/conns"
	"github.com/IBM-Cloud/terraform-provider-ibm/ibm/flex"
	"github.com/IBM/vmware-go-sdk/vmwarev1"
)

func DataSourceIbmVmaasTransitGatewayConnection() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceIbmVmaasTransitGatewayConnectionRead,

		Schema: map[string]*schema.Schema{
			"vmaas_transit_gateway_connection_id": &schema.Schema{
				Type:        schema.TypeString,
				Required:    true,
				Description: "A unique ID for a specified virtual data center.",
			},
			"connections": &schema.Schema{
				Type:        schema.TypeList,
				Computed:    true,
				Description: "IBM Transit Gateway connections.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The autogenerated name for this connection.",
						},
						"transit_gateway_connection_name": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The user-defined name of the connection created on the IBM Transit Gateway.",
						},
						"status": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Determines the state of the connection.",
						},
						"local_gateway_ip": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Local gateway IP address for the connection.",
						},
						"remote_gateway_ip": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Remote gateway IP address for the connection.",
						},
						"local_tunnel_ip": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Local tunnel IP address for the connection.",
						},
						"remote_tunnel_ip": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Remote tunnel IP address for the connection.",
						},
						"local_bgp_asn": &schema.Schema{
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Local network BGP ASN for the connection.",
						},
						"remote_bgp_asn": &schema.Schema{
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Remote network BGP ASN for the connection.",
						},
						"network_account_id": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The ID of the account that owns the connected network.",
						},
						"network_type": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The type of the network that is connected through this connection. Only \"unbound_gre_tunnel\" is supported.",
						},
						"base_network_type": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The type of the network that the unbound GRE tunnel is targeting. Only \"classic\" is supported.",
						},
						"zone": &schema.Schema{
							Type:        schema.TypeString,
							Computed:    true,
							Description: "The location of the connection.",
						},
					},
				},
			},
			"status": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Determines the state of the IBM Transit Gateway based on its connections.",
			},
			"region": &schema.Schema{
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The region where the IBM Transit Gateway is deployed.",
			},
		},
	}
}

func dataSourceIbmVmaasTransitGatewayConnectionRead(context context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	vmwareClient, err := meta.(conns.ClientSession).VmwareV1()
	if err != nil {
		tfErr := flex.DiscriminatedTerraformErrorf(err, err.Error(), "(Data) ibm_vmaas_transit_gateway_connection", "read", "initialize-client")
		log.Printf("[DEBUG]\n%s", tfErr.GetDebugMessage())
		return tfErr.GetDiag()
	}

	getVdcOptions := &vmwarev1.GetVdcOptions{}

	getVdcOptions.SetID(d.Get("vmaas_transit_gateway_connection_id").(string))

	transitGateway, _, err := vmwareClient.GetVdcWithContext(context, getVdcOptions)
	if err != nil {
		tfErr := flex.TerraformErrorf(err, fmt.Sprintf("GetVdcWithContext failed: %s", err.Error()), "(Data) ibm_vmaas_transit_gateway_connection", "read")
		log.Printf("[DEBUG]\n%s", tfErr.GetDebugMessage())
		return tfErr.GetDiag()
	}

	d.SetId(*getVdcOptions.ID)

	connections := []map[string]interface{}{}
	// for _, connectionsItem := range transitGateway.Connections {
	// 	connectionsItemMap, err := DataSourceIbmVmaasTransitGatewayConnectionTransitGatewayConnectionToMap(&connectionsItem) // #nosec G601
	// 	if err != nil {
	// 		return flex.DiscriminatedTerraformErrorf(err, err.Error(), "(Data) ibm_vmaas_transit_gateway_connection", "read", "connections-to-map").GetDiag()
	// 	}
	// 	connections = append(connections, connectionsItemMap)
	// }
	if err = d.Set("connections", connections); err != nil {
		return flex.DiscriminatedTerraformErrorf(err, fmt.Sprintf("Error setting connections: %s", err), "(Data) ibm_vmaas_transit_gateway_connection", "read", "set-connections").GetDiag()
	}

	if err = d.Set("status", transitGateway.Status); err != nil {
		return flex.DiscriminatedTerraformErrorf(err, fmt.Sprintf("Error setting status: %s", err), "(Data) ibm_vmaas_transit_gateway_connection", "read", "set-status").GetDiag()
	}

	// if err = d.Set("region", transitGateway.Region); err != nil {
	// 	return flex.DiscriminatedTerraformErrorf(err, fmt.Sprintf("Error setting region: %s", err), "(Data) ibm_vmaas_transit_gateway_connection", "read", "set-region").GetDiag()
	// }

	return nil
}

func DataSourceIbmVmaasTransitGatewayConnectionTransitGatewayConnectionToMap(model *vmwarev1.TransitGatewayConnection) (map[string]interface{}, error) {
	modelMap := make(map[string]interface{})
	modelMap["name"] = *model.Name
	if model.TransitGatewayConnectionName != nil {
		modelMap["transit_gateway_connection_name"] = *model.TransitGatewayConnectionName
	}
	modelMap["status"] = *model.Status
	if model.LocalGatewayIp != nil {
		modelMap["local_gateway_ip"] = *model.LocalGatewayIp
	}
	if model.RemoteGatewayIp != nil {
		modelMap["remote_gateway_ip"] = *model.RemoteGatewayIp
	}
	if model.LocalTunnelIp != nil {
		modelMap["local_tunnel_ip"] = *model.LocalTunnelIp
	}
	if model.RemoteTunnelIp != nil {
		modelMap["remote_tunnel_ip"] = *model.RemoteTunnelIp
	}
	if model.LocalBgpAsn != nil {
		modelMap["local_bgp_asn"] = flex.IntValue(model.LocalBgpAsn)
	}
	if model.RemoteBgpAsn != nil {
		modelMap["remote_bgp_asn"] = flex.IntValue(model.RemoteBgpAsn)
	}
	modelMap["network_account_id"] = *model.NetworkAccountID
	modelMap["network_type"] = *model.NetworkType
	modelMap["base_network_type"] = *model.BaseNetworkType
	modelMap["zone"] = *model.Zone
	return modelMap, nil
}

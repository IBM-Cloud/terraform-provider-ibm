// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v3.21.5
// source: transfer.proto

package transfersdk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TransferType describes the possible transfer types.
// When a user requests a new transfer, she can specify the type of transfer in the transferSpec.
type TransferType int32

const (
	// Unknown transfer type
	TransferType_UNKNOWN_TRANSFER_TYPE TransferType = 0
	// File transfer using the paths you provide in the transferSpec
	TransferType_FILE_REGULAR TransferType = 1
	// File transfer where you provide the source and destination paths while the transfer is in progress
	TransferType_FILE_PERSISTENT TransferType = 2
	// Stream to stream session using the URI that you specify in the transferSpec
	TransferType_URL_STREAM_TO_STREAM TransferType = 3
	// *
	// Download a file as a stream at the destination. You must specify the size of the source file when starting the streaming of every file.
	// Note: For this type of transfer, the supported values for the overwrite option are "always" or "never" in the transferSpec: any value other than "always" and "never" is defaulted to "never".
	// Resume option is not supported: any value for this option is defaulted to "none".
	TransferType_FILE_TO_STREAM_DOWNLOAD TransferType = 4
	// *
	// Upload a stream as a file at the destination. You must specify the total number of bytes to upload when starting the streaming of every file.
	// Note: For this type of transfer, the supported values for the overwrite option are "always" or "never" in the transferSpec: any value other than "always" and "never" is defaulted to "never".
	// Resume option is not supported: any value for this option is defaulted to "none".
	TransferType_STREAM_TO_FILE_UPLOAD TransferType = 5
	// Stream to file upload in a persistent session--meaning that you don't specify the stream size at the beginning of the transfer--using the URI specified in the transferSpec.
	TransferType_PERSISTENT_STREAM_UPLOAD TransferType = 6
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "UNKNOWN_TRANSFER_TYPE",
		1: "FILE_REGULAR",
		2: "FILE_PERSISTENT",
		3: "URL_STREAM_TO_STREAM",
		4: "FILE_TO_STREAM_DOWNLOAD",
		5: "STREAM_TO_FILE_UPLOAD",
		6: "PERSISTENT_STREAM_UPLOAD",
	}
	TransferType_value = map[string]int32{
		"UNKNOWN_TRANSFER_TYPE":    0,
		"FILE_REGULAR":             1,
		"FILE_PERSISTENT":          2,
		"URL_STREAM_TO_STREAM":     3,
		"FILE_TO_STREAM_DOWNLOAD":  4,
		"STREAM_TO_FILE_UPLOAD":    5,
		"PERSISTENT_STREAM_UPLOAD": 6,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_proto_enumTypes[0].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_transfer_proto_enumTypes[0]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{0}
}

// TransferStatus statuses a transfer can hold.
type TransferStatus int32

const (
	// Transfer status is unknown
	TransferStatus_UNKNOWN_STATUS TransferStatus = 0
	// File or folder is queued for transfer
	TransferStatus_QUEUED TransferStatus = 1
	// Transfer is running at the time of the query
	TransferStatus_RUNNING TransferStatus = 2
	// Transfer successfully completed
	TransferStatus_COMPLETED TransferStatus = 3
	// Transfer failed
	TransferStatus_FAILED TransferStatus = 4
	// Transfer was canceled by the user
	TransferStatus_CANCELED TransferStatus = 5
	// Transfer was paused by the user
	TransferStatus_PAUSED TransferStatus = 6
	// A file transferred without its parent folder
	TransferStatus_ORPHANED TransferStatus = 7
)

// Enum value maps for TransferStatus.
var (
	TransferStatus_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "QUEUED",
		2: "RUNNING",
		3: "COMPLETED",
		4: "FAILED",
		5: "CANCELED",
		6: "PAUSED",
		7: "ORPHANED",
	}
	TransferStatus_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"QUEUED":         1,
		"RUNNING":        2,
		"COMPLETED":      3,
		"FAILED":         4,
		"CANCELED":       5,
		"PAUSED":         6,
		"ORPHANED":       7,
	}
)

func (x TransferStatus) Enum() *TransferStatus {
	p := new(TransferStatus)
	*p = x
	return p
}

func (x TransferStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_proto_enumTypes[1].Descriptor()
}

func (TransferStatus) Type() protoreflect.EnumType {
	return &file_transfer_proto_enumTypes[1]
}

func (x TransferStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferStatus.Descriptor instead.
func (TransferStatus) EnumDescriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{1}
}

// Transfer events
type TransferEvent int32

const (
	// Transfer event can't be identified
	TransferEvent_UNKNOWN_EVENT TransferEvent = 0
	// Transfer session started
	TransferEvent_SESSION_START TransferEvent = 1
	// Transfer session stopped
	TransferEvent_SESSION_STOP TransferEvent = 2
	// Transfer session failed with an error
	TransferEvent_SESSION_ERROR TransferEvent = 3
	// File transfer started
	TransferEvent_FILE_START TransferEvent = 4
	// File transfer stopped
	TransferEvent_FILE_STOP TransferEvent = 5
	// File transfer failed with an error
	TransferEvent_FILE_ERROR TransferEvent = 6
	// ARG_STOP is a management message returned by FASP to indicate the completion
	// of a transfer path provided as an argument to the transfer binary.
	TransferEvent_ARG_STOP TransferEvent = 7
	// Transfer in progress
	TransferEvent_PROGRESS TransferEvent = 8
	// Transfer is connecting
	TransferEvent_CONNECTING TransferEvent = 9
	// Transfer rate modified during the transfer
	TransferEvent_RATE_MODIFICATION TransferEvent = 10
	// One or more files skipped during the transfer session
	TransferEvent_FILE_SKIP TransferEvent = 11
	// Bandwidth measurement assessed during the transfer
	TransferEvent_BANDWIDTH_MEASUREMENT TransferEvent = 12
)

// Enum value maps for TransferEvent.
var (
	TransferEvent_name = map[int32]string{
		0:  "UNKNOWN_EVENT",
		1:  "SESSION_START",
		2:  "SESSION_STOP",
		3:  "SESSION_ERROR",
		4:  "FILE_START",
		5:  "FILE_STOP",
		6:  "FILE_ERROR",
		7:  "ARG_STOP",
		8:  "PROGRESS",
		9:  "CONNECTING",
		10: "RATE_MODIFICATION",
		11: "FILE_SKIP",
		12: "BANDWIDTH_MEASUREMENT",
	}
	TransferEvent_value = map[string]int32{
		"UNKNOWN_EVENT":         0,
		"SESSION_START":         1,
		"SESSION_STOP":          2,
		"SESSION_ERROR":         3,
		"FILE_START":            4,
		"FILE_STOP":             5,
		"FILE_ERROR":            6,
		"ARG_STOP":              7,
		"PROGRESS":              8,
		"CONNECTING":            9,
		"RATE_MODIFICATION":     10,
		"FILE_SKIP":             11,
		"BANDWIDTH_MEASUREMENT": 12,
	}
)

func (x TransferEvent) Enum() *TransferEvent {
	p := new(TransferEvent)
	*p = x
	return p
}

func (x TransferEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_proto_enumTypes[2].Descriptor()
}

func (TransferEvent) Type() protoreflect.EnumType {
	return &file_transfer_proto_enumTypes[2]
}

func (x TransferEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferEvent.Descriptor instead.
func (TransferEvent) EnumDescriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{2}
}

// Used to compose registration filter items.
type RegistrationFilterOperator int32

const (
	// Logical OR operator that returns the boolean value TRUE if either or both operands is TRUE and returns FALSE otherwise
	RegistrationFilterOperator_OR RegistrationFilterOperator = 0
	// Logical AND operator that returns a value of TRUE if both its operands are TRUE, and FALSE otherwise
	RegistrationFilterOperator_AND RegistrationFilterOperator = 1
)

// Enum value maps for RegistrationFilterOperator.
var (
	RegistrationFilterOperator_name = map[int32]string{
		0: "OR",
		1: "AND",
	}
	RegistrationFilterOperator_value = map[string]int32{
		"OR":  0,
		"AND": 1,
	}
)

func (x RegistrationFilterOperator) Enum() *RegistrationFilterOperator {
	p := new(RegistrationFilterOperator)
	*p = x
	return p
}

func (x RegistrationFilterOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistrationFilterOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_transfer_proto_enumTypes[3].Descriptor()
}

func (RegistrationFilterOperator) Type() protoreflect.EnumType {
	return &file_transfer_proto_enumTypes[3]
}

func (x RegistrationFilterOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistrationFilterOperator.Descriptor instead.
func (RegistrationFilterOperator) EnumDescriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{3}
}

// Error message in response
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Description of error
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// An empty request that gets the API version
type APIVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *APIVersionRequest) Reset() {
	*x = APIVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIVersionRequest) ProtoMessage() {}

func (x *APIVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIVersionRequest.ProtoReflect.Descriptor instead.
func (*APIVersionRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{1}
}

// Returns a list of all versions of the API that the transfer binary supports.
type APIVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Supported versions of the API
	SupportedVersions []string `protobuf:"bytes,1,rep,name=supportedVersions,proto3" json:"supportedVersions,omitempty"`
}

func (x *APIVersionResponse) Reset() {
	*x = APIVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIVersionResponse) ProtoMessage() {}

func (x *APIVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIVersionResponse.ProtoReflect.Descriptor instead.
func (*APIVersionResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *APIVersionResponse) GetSupportedVersions() []string {
	if x != nil {
		return x.SupportedVersions
	}
	return nil
}

// RetryStrategy configures the components of the retry strategy.
type RetryStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RetryType:
	//
	//	*RetryStrategy_Basic
	//	*RetryStrategy_Backoff
	RetryType isRetryStrategy_RetryType `protobuf_oneof:"retryType"`
}

func (x *RetryStrategy) Reset() {
	*x = RetryStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryStrategy) ProtoMessage() {}

func (x *RetryStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryStrategy.ProtoReflect.Descriptor instead.
func (*RetryStrategy) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{3}
}

func (m *RetryStrategy) GetRetryType() isRetryStrategy_RetryType {
	if m != nil {
		return m.RetryType
	}
	return nil
}

func (x *RetryStrategy) GetBasic() *BasicRetryStrategy {
	if x, ok := x.GetRetryType().(*RetryStrategy_Basic); ok {
		return x.Basic
	}
	return nil
}

func (x *RetryStrategy) GetBackoff() *ExponentialBackoffRetryStrategy {
	if x, ok := x.GetRetryType().(*RetryStrategy_Backoff); ok {
		return x.Backoff
	}
	return nil
}

type isRetryStrategy_RetryType interface {
	isRetryStrategy_RetryType()
}

type RetryStrategy_Basic struct {
	// Basic retry strategy
	Basic *BasicRetryStrategy `protobuf:"bytes,1,opt,name=basic,proto3,oneof"`
}

type RetryStrategy_Backoff struct {
	// Exponential retry strategy
	Backoff *ExponentialBackoffRetryStrategy `protobuf:"bytes,2,opt,name=backoff,proto3,oneof"`
}

func (*RetryStrategy_Basic) isRetryStrategy_RetryType() {}

func (*RetryStrategy_Backoff) isRetryStrategy_RetryType() {}

// When a transfer fails, a simple strategy to retry the transfer until it completes
type BasicRetryStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of times to retry the transfer
	MaxCount int64 `protobuf:"varint,1,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	// Interval to wait before retrying the transfer
	RetryInterval int64 `protobuf:"varint,2,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`
}

func (x *BasicRetryStrategy) Reset() {
	*x = BasicRetryStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicRetryStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicRetryStrategy) ProtoMessage() {}

func (x *BasicRetryStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicRetryStrategy.ProtoReflect.Descriptor instead.
func (*BasicRetryStrategy) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *BasicRetryStrategy) GetMaxCount() int64 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *BasicRetryStrategy) GetRetryInterval() int64 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

// When a transfer fails, the exponential strategy for waiting and retrying. The wait time grows exponentially with each retry attempt.
type ExponentialBackoffRetryStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of times to wait and retry before failing the transfer
	MaxAttempts int64 `protobuf:"varint,1,opt,name=maxAttempts,proto3" json:"maxAttempts,omitempty"`
	// The exponential multiplier for the wait time. If < 1, default is 2.
	Multiplier int64 `protobuf:"varint,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// Length of the initial wait time before retrying the transfer.
	InitialDelay int64 `protobuf:"varint,3,opt,name=initialDelay,proto3" json:"initialDelay,omitempty"`
	// Maximum duration of wait time before retrying the transfer. If <= zero, no maximum is enforced.
	MaxDelay int64 `protobuf:"varint,4,opt,name=maxDelay,proto3" json:"maxDelay,omitempty"`
}

func (x *ExponentialBackoffRetryStrategy) Reset() {
	*x = ExponentialBackoffRetryStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExponentialBackoffRetryStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExponentialBackoffRetryStrategy) ProtoMessage() {}

func (x *ExponentialBackoffRetryStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExponentialBackoffRetryStrategy.ProtoReflect.Descriptor instead.
func (*ExponentialBackoffRetryStrategy) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *ExponentialBackoffRetryStrategy) GetMaxAttempts() int64 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *ExponentialBackoffRetryStrategy) GetMultiplier() int64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *ExponentialBackoffRetryStrategy) GetInitialDelay() int64 {
	if x != nil {
		return x.InitialDelay
	}
	return 0
}

func (x *ExponentialBackoffRetryStrategy) GetMaxDelay() int64 {
	if x != nil {
		return x.MaxDelay
	}
	return 0
}

// Configuration elements for the transfer
type TransferConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Strategy that is defined for retrying the transfer. Optional. No retry if not set.
	Retry *RetryStrategy `protobuf:"bytes,1,opt,name=retry,proto3" json:"retry,omitempty"`
	// Contents of a custom license file. Optional. License in the binary path is used if not set.
	License string `protobuf:"bytes,2,opt,name=license,proto3" json:"license,omitempty"`
	// Local log directory path. Optional.
	LocalLog string `protobuf:"bytes,3,opt,name=localLog,proto3" json:"localLog,omitempty"`
	// Remote log directory path. Optional.
	RemoteLog string `protobuf:"bytes,4,opt,name=remoteLog,proto3" json:"remoteLog,omitempty"`
	// Level of detail to return in the log. Allowable values: 0 (minimal log data),
	// 1, 2 (most detailed log data).
	LogLevel int32 `protobuf:"fixed32,5,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
}

func (x *TransferConfig) Reset() {
	*x = TransferConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferConfig) ProtoMessage() {}

func (x *TransferConfig) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferConfig.ProtoReflect.Descriptor instead.
func (*TransferConfig) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{6}
}

func (x *TransferConfig) GetRetry() *RetryStrategy {
	if x != nil {
		return x.Retry
	}
	return nil
}

func (x *TransferConfig) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *TransferConfig) GetLocalLog() string {
	if x != nil {
		return x.LocalLog
	}
	return ""
}

func (x *TransferConfig) GetRemoteLog() string {
	if x != nil {
		return x.RemoteLog
	}
	return ""
}

func (x *TransferConfig) GetLogLevel() int32 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

// Transfer range in a file or stream request
type TransferRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// offset for the stream
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// length of the stream
	Length int64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *TransferRange) Reset() {
	*x = TransferRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRange) ProtoMessage() {}

func (x *TransferRange) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRange.ProtoReflect.Descriptor instead.
func (*TransferRange) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{7}
}

func (x *TransferRange) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TransferRange) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

// Parameters to submit to the transfer server
type TransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the type of transfer. Allowable values: UNKNOWN_TRANSFER_TYPE, FILE_REGULAR,
	// FILE_PERSISTENT, URL_STREAM_TO_STREAM, FILE_TO_STREAM_DOWNLOAD, STREAM_TO_FILE_UPLOAD
	// PERSISTENT_STREAM_UPLOAD
	TransferType TransferType `protobuf:"varint,1,opt,name=transferType,proto3,enum=transfersdk.TransferType" json:"transferType,omitempty"`
	// Policies and permissions for the transfer
	Config *TransferConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// Full configuration details for the transfer
	TransferSpec string `protobuf:"bytes,3,opt,name=transferSpec,proto3" json:"transferSpec,omitempty"`
}

func (x *TransferRequest) Reset() {
	*x = TransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferRequest) ProtoMessage() {}

func (x *TransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferRequest.ProtoReflect.Descriptor instead.
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{8}
}

func (x *TransferRequest) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_UNKNOWN_TRANSFER_TYPE
}

func (x *TransferRequest) GetConfig() *TransferConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TransferRequest) GetTransferSpec() string {
	if x != nil {
		return x.TransferSpec
	}
	return ""
}

// Data returned from the transfer request
type StartTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// UUID for the transfer returned from the initial transfer request, used for subsequent requests
	TransferId string `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// User-assigned title for the transfer
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Type of transfer
	TransferType TransferType `protobuf:"varint,4,opt,name=transferType,proto3,enum=transfersdk.TransferType" json:"transferType,omitempty"`
	// Transfer status
	Status TransferStatus `protobuf:"varint,5,opt,name=status,proto3,enum=transfersdk.TransferStatus" json:"status,omitempty"`
	// Error message for the transfer, if any
	Error *Error `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StartTransferResponse) Reset() {
	*x = StartTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransferResponse) ProtoMessage() {}

func (x *StartTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransferResponse.ProtoReflect.Descriptor instead.
func (*StartTransferResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{9}
}

func (x *StartTransferResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *StartTransferResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *StartTransferResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StartTransferResponse) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_UNKNOWN_TRANSFER_TYPE
}

func (x *StartTransferResponse) GetStatus() TransferStatus {
	if x != nil {
		return x.Status
	}
	return TransferStatus_UNKNOWN_STATUS
}

func (x *StartTransferResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Request for information about the transfer
type TransferInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer returned from the initial transfer request. Used for subsequent requests.
	TransferId string `protobuf:"bytes,1,opt,name=transferId,proto3" json:"transferId,omitempty"`
}

func (x *TransferInfoRequest) Reset() {
	*x = TransferInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInfoRequest) ProtoMessage() {}

func (x *TransferInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInfoRequest.ProtoReflect.Descriptor instead.
func (*TransferInfoRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{10}
}

func (x *TransferInfoRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

// Data returned from the transfer request
type TransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// UID for the transfer returned from the initial transfer request. Used for subsequent requests
	TransferId string `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// User-assigned title of the transfer
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Transfer type
	TransferType TransferType `protobuf:"varint,4,opt,name=transferType,proto3,enum=transfersdk.TransferType" json:"transferType,omitempty"`
	// Status of the transfer
	Status TransferStatus `protobuf:"varint,5,opt,name=status,proto3,enum=transfersdk.TransferStatus" json:"status,omitempty"`
	// Error message for the transer
	Error *Error `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	// Transfer event type
	TransferEvent TransferEvent `protobuf:"varint,7,opt,name=transferEvent,proto3,enum=transfersdk.TransferEvent" json:"transferEvent,omitempty"`
	// Returned information about the transfer
	TransferInfo *TransferInfo `protobuf:"bytes,8,opt,name=transferInfo,proto3" json:"transferInfo,omitempty"`
	// Message string
	Message string `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	// Information about a transfer session. There can be more than one transfer sessions
	// for a given transfer.
	SessionInfo *SessionTransferInformation `protobuf:"bytes,10,opt,name=sessionInfo,proto3" json:"sessionInfo,omitempty"`
	// Information about the file transfer
	FileInfo *FileTransferInformation `protobuf:"bytes,11,opt,name=fileInfo,proto3" json:"fileInfo,omitempty"`
}

func (x *TransferResponse) Reset() {
	*x = TransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferResponse) ProtoMessage() {}

func (x *TransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferResponse.ProtoReflect.Descriptor instead.
func (*TransferResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{11}
}

func (x *TransferResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *TransferResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TransferResponse) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_UNKNOWN_TRANSFER_TYPE
}

func (x *TransferResponse) GetStatus() TransferStatus {
	if x != nil {
		return x.Status
	}
	return TransferStatus_UNKNOWN_STATUS
}

func (x *TransferResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TransferResponse) GetTransferEvent() TransferEvent {
	if x != nil {
		return x.TransferEvent
	}
	return TransferEvent_UNKNOWN_EVENT
}

func (x *TransferResponse) GetTransferInfo() *TransferInfo {
	if x != nil {
		return x.TransferInfo
	}
	return nil
}

func (x *TransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransferResponse) GetSessionInfo() *SessionTransferInformation {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *TransferResponse) GetFileInfo() *FileTransferInformation {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

// Data returned a transfer query
type QueryTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// UUID for the transfer returned from the initial transfer request, used for subsequent requests
	TransferId string `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// User-assigned title for the transfer
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Transfer type
	TransferType TransferType `protobuf:"varint,4,opt,name=transferType,proto3,enum=transfersdk.TransferType" json:"transferType,omitempty"`
	// Transfer status
	Status TransferStatus `protobuf:"varint,5,opt,name=status,proto3,enum=transfersdk.TransferStatus" json:"status,omitempty"`
	// Error message
	Error *Error `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	// Returned information about the transfer
	TransferInfo *TransferInfo `protobuf:"bytes,7,opt,name=transferInfo,proto3" json:"transferInfo,omitempty"`
	// Message string
	Message string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueryTransferResponse) Reset() {
	*x = QueryTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTransferResponse) ProtoMessage() {}

func (x *QueryTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTransferResponse.ProtoReflect.Descriptor instead.
func (*QueryTransferResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{12}
}

func (x *QueryTransferResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *QueryTransferResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *QueryTransferResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *QueryTransferResponse) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_UNKNOWN_TRANSFER_TYPE
}

func (x *QueryTransferResponse) GetStatus() TransferStatus {
	if x != nil {
		return x.Status
	}
	return TransferStatus_UNKNOWN_STATUS
}

func (x *QueryTransferResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *QueryTransferResponse) GetTransferInfo() *TransferInfo {
	if x != nil {
		return x.TransferInfo
	}
	return nil
}

func (x *QueryTransferResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Returned information about the transfer
type TransferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Average rate for the transfer, in kilobits per second
	AverageRateKbps int64 `protobuf:"varint,1,opt,name=averageRateKbps,proto3" json:"averageRateKbps,omitempty"`
	// Total bytes lost during the transfer
	BytesLost int64 `protobuf:"varint,2,opt,name=bytesLost,proto3" json:"bytesLost,omitempty"`
	// Total bytes transferred
	BytesTransferred int64 `protobuf:"varint,3,opt,name=bytesTransferred,proto3" json:"bytesTransferred,omitempty"`
	// Total bytes written at the destination
	BytesWritten int64 `protobuf:"varint,4,opt,name=bytesWritten,proto3" json:"bytesWritten,omitempty"`
	// Total directories that transferred completely
	DirectoriesCompleted int64 `protobuf:"varint,5,opt,name=directoriesCompleted,proto3" json:"directoriesCompleted,omitempty"`
	// Transfer start time, in microseconds
	StartTimeUsec int64 `protobuf:"varint,6,opt,name=startTimeUsec,proto3" json:"startTimeUsec,omitempty"`
	// Total time elapsed during the transfer, in microseconds
	ElapsedUsec int64 `protobuf:"varint,7,opt,name=elapsedUsec,proto3" json:"elapsedUsec,omitempty"`
	// Transfer end time, in microseconds
	EndTimeUsec int64 `protobuf:"varint,8,opt,name=endTimeUsec,proto3" json:"endTimeUsec,omitempty"`
	// Error code for the transfer
	ErrorCode string `protobuf:"bytes,9,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// Description of error
	ErrorDescription string `protobuf:"bytes,10,opt,name=errorDescription,proto3" json:"errorDescription,omitempty"`
	// Number of files that arrived successfully at the destination.
	FilesCompleted int64 `protobuf:"varint,11,opt,name=filesCompleted,proto3" json:"filesCompleted,omitempty"`
	// Target transfer rate (in Kbps)
	TargetRateKbps int64 `protobuf:"varint,12,opt,name=targetRateKbps,proto3" json:"targetRateKbps,omitempty"`
	// Minimum transfer rate (in Kbps)
	MinRateKbps int64 `protobuf:"varint,13,opt,name=minRateKbps,proto3" json:"minRateKbps,omitempty"`
	// Total number of transfers initiated, where the data is provided as an argument.
	// For example, for an attempted transfer of a folder that contains multiple files, the
	// value is 1.
	ArgTransfersAttempted int64 `protobuf:"varint,14,opt,name=argTransfersAttempted,proto3" json:"argTransfersAttempted,omitempty"`
	// Total number of successful transfers, where the data is provided as an argument.
	// For example, for a given transferred folder that contains multiple files, the
	// value is 1.
	ArgTransfersPassed int64 `protobuf:"varint,15,opt,name=argTransfersPassed,proto3" json:"argTransfersPassed,omitempty"`
	// Total number of skipped transfers, where the data is provided as an argument.
	// For example, for a skipped transfer of a folder that contains multiple files, the
	// value is 1.
	ArgTransfersSkipped int64 `protobuf:"varint,16,opt,name=argTransfersSkipped,proto3" json:"argTransfersSkipped,omitempty"`
	// Number of failed transfers
	ArgTransfersFailed int64 `protobuf:"varint,17,opt,name=argTransfersFailed,proto3" json:"argTransfersFailed,omitempty"`
	// Hash of the file checksum.
	// Allowable values: HASH: sha-512,sha-384,sha-256,sha1,md5.
	// (Default: none)
	FileChecksumType string `protobuf:"bytes,18,opt,name=fileChecksumType,proto3" json:"fileChecksumType,omitempty"`
	// Application-specified string
	Cookie string `protobuf:"bytes,19,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// Direction of transfer, either send (upload) or receive (download)
	Direction string `protobuf:"bytes,20,opt,name=direction,proto3" json:"direction,omitempty"`
	// Indicates a transfer or a bandwidth measurement. Allowable values: Transfer, BWMeasurement
	Operation string `protobuf:"bytes,21,opt,name=operation,proto3" json:"operation,omitempty"`
	// All tags to include in the transfer (base64 encoded)
	Tags64 string `protobuf:"bytes,22,opt,name=tags64,proto3" json:"tags64,omitempty"`
}

func (x *TransferInfo) Reset() {
	*x = TransferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInfo) ProtoMessage() {}

func (x *TransferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInfo.ProtoReflect.Descriptor instead.
func (*TransferInfo) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{13}
}

func (x *TransferInfo) GetAverageRateKbps() int64 {
	if x != nil {
		return x.AverageRateKbps
	}
	return 0
}

func (x *TransferInfo) GetBytesLost() int64 {
	if x != nil {
		return x.BytesLost
	}
	return 0
}

func (x *TransferInfo) GetBytesTransferred() int64 {
	if x != nil {
		return x.BytesTransferred
	}
	return 0
}

func (x *TransferInfo) GetBytesWritten() int64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *TransferInfo) GetDirectoriesCompleted() int64 {
	if x != nil {
		return x.DirectoriesCompleted
	}
	return 0
}

func (x *TransferInfo) GetStartTimeUsec() int64 {
	if x != nil {
		return x.StartTimeUsec
	}
	return 0
}

func (x *TransferInfo) GetElapsedUsec() int64 {
	if x != nil {
		return x.ElapsedUsec
	}
	return 0
}

func (x *TransferInfo) GetEndTimeUsec() int64 {
	if x != nil {
		return x.EndTimeUsec
	}
	return 0
}

func (x *TransferInfo) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *TransferInfo) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *TransferInfo) GetFilesCompleted() int64 {
	if x != nil {
		return x.FilesCompleted
	}
	return 0
}

func (x *TransferInfo) GetTargetRateKbps() int64 {
	if x != nil {
		return x.TargetRateKbps
	}
	return 0
}

func (x *TransferInfo) GetMinRateKbps() int64 {
	if x != nil {
		return x.MinRateKbps
	}
	return 0
}

func (x *TransferInfo) GetArgTransfersAttempted() int64 {
	if x != nil {
		return x.ArgTransfersAttempted
	}
	return 0
}

func (x *TransferInfo) GetArgTransfersPassed() int64 {
	if x != nil {
		return x.ArgTransfersPassed
	}
	return 0
}

func (x *TransferInfo) GetArgTransfersSkipped() int64 {
	if x != nil {
		return x.ArgTransfersSkipped
	}
	return 0
}

func (x *TransferInfo) GetArgTransfersFailed() int64 {
	if x != nil {
		return x.ArgTransfersFailed
	}
	return 0
}

func (x *TransferInfo) GetFileChecksumType() string {
	if x != nil {
		return x.FileChecksumType
	}
	return ""
}

func (x *TransferInfo) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *TransferInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *TransferInfo) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *TransferInfo) GetTags64() string {
	if x != nil {
		return x.Tags64
	}
	return ""
}

// Returned information about a transfer session. There can be multiple transfer sessions for each transfer.
type SessionTransferInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID that the SDK assigns to a transfer session
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique ID that FASP assigns to a transfer session
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// Remote transfer user
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Username of the user running the transfer client on the local machine
	ClientUser string `protobuf:"bytes,4,opt,name=clientUser,proto3" json:"clientUser,omitempty"`
	// ID of the node for the transfer client on the local machine
	ClientNodeId string `protobuf:"bytes,5,opt,name=clientNodeId,proto3" json:"clientNodeId,omitempty"`
	// If applicable, the ID of the cluster for high availability on the local machine
	ClientClusterId string `protobuf:"bytes,6,opt,name=clientClusterId,proto3" json:"clientClusterId,omitempty"`
	// Node ID of the remote transfer server
	ServerNodeId string `protobuf:"bytes,7,opt,name=serverNodeId,proto3" json:"serverNodeId,omitempty"`
	// If applicable, the ID of the cluster for high availability on the remote transfer server
	ServerClusterId string `protobuf:"bytes,8,opt,name=serverClusterId,proto3" json:"serverClusterId,omitempty"`
	// IP address for the client on the local machine
	ClientIPAddress string `protobuf:"bytes,9,opt,name=clientIPAddress,proto3" json:"clientIPAddress,omitempty"`
	// IP address for the remote transfer server
	ServerIPAddress string `protobuf:"bytes,10,opt,name=serverIPAddress,proto3" json:"serverIPAddress,omitempty"`
	// UDP port used by FASP
	Port int64 `protobuf:"varint,11,opt,name=port,proto3" json:"port,omitempty"`
	// TCP port used to initiate a connection with the Transfer SDK
	TcpPort int64 `protobuf:"varint,12,opt,name=tcpPort,proto3" json:"tcpPort,omitempty"`
	// Status of the transfer session. Allowable values: initiated, passed, skipped, failed.
	Status string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Transfer start time, in microseconds
	StartTimeUsec int64 `protobuf:"varint,14,opt,name=startTimeUsec,proto3" json:"startTimeUsec,omitempty"`
	// Transfer end time, in microseconds
	EndTimeUsec int64 `protobuf:"varint,15,opt,name=endTimeUsec,proto3" json:"endTimeUsec,omitempty"`
	// Total time elapsed during the transfer, in microseconds
	ElapsedUsec int64 `protobuf:"varint,16,opt,name=elapsedUsec,proto3" json:"elapsedUsec,omitempty"`
	// Total bytes transferred
	BytesTransferred int64 `protobuf:"varint,17,opt,name=bytesTransferred,proto3" json:"bytesTransferred,omitempty"`
	// Total bytes written at the destination
	BytesWritten int64 `protobuf:"varint,18,opt,name=bytesWritten,proto3" json:"bytesWritten,omitempty"`
	// Total bytes lost during the transfer
	BytesLost int64 `protobuf:"varint,19,opt,name=bytesLost,proto3" json:"bytesLost,omitempty"`
	// Total number of files that transferred successfully to the destination
	FilesCompleted int64 `protobuf:"varint,20,opt,name=filesCompleted,proto3" json:"filesCompleted,omitempty"`
	// Total number of files that failed to transfer successfully
	FilesFailed int64 `protobuf:"varint,21,opt,name=filesFailed,proto3" json:"filesFailed,omitempty"`
	// Total number of files skipped during the transfer session
	FilesSkipped int64 `protobuf:"varint,22,opt,name=filesSkipped,proto3" json:"filesSkipped,omitempty"`
	// Total number of directories that transferred completely
	DirectoriesCompleted int64 `protobuf:"varint,23,opt,name=directoriesCompleted,proto3" json:"directoriesCompleted,omitempty"`
	// Target transfer rate (Kbps)
	TargetRateKbps int64 `protobuf:"varint,24,opt,name=targetRateKbps,proto3" json:"targetRateKbps,omitempty"`
	// Minimum transfer rate (Kbps)
	MinRateKbps int64 `protobuf:"varint,25,opt,name=minRateKbps,proto3" json:"minRateKbps,omitempty"`
	// Calculated transfer rate (Kbps)
	CalcRateKbps int64 `protobuf:"varint,26,opt,name=calcRateKbps,proto3" json:"calcRateKbps,omitempty"`
	// Network delay (microseconds)
	NetworkDelayUsec int64 `protobuf:"varint,27,opt,name=networkDelayUsec,proto3" json:"networkDelayUsec,omitempty"`
	// Error code returned for a failed transfer of files or folders
	ErrorCode int64 `protobuf:"varint,28,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// Description of the error for a failed transfer of files or folders
	ErrorDesc string `protobuf:"bytes,29,opt,name=errorDesc,proto3" json:"errorDesc,omitempty"`
	// Path to the manifest file
	ManifestFilePath string `protobuf:"bytes,30,opt,name=manifestFilePath,proto3" json:"manifestFilePath,omitempty"`
	// Number of source paths excluded from the filesystem scan
	SourcePathsScanExcluded int64 `protobuf:"varint,31,opt,name=sourcePathsScanExcluded,proto3" json:"sourcePathsScanExcluded,omitempty"`
	// Number of irregular source paths found in the filesystem scan
	SourcePathsScanIrregular int64 `protobuf:"varint,32,opt,name=sourcePathsScanIrregular,proto3" json:"sourcePathsScanIrregular,omitempty"`
	// Number of source paths in a failed filesystem scan
	SourcePathsScanFailed int64 `protobuf:"varint,33,opt,name=sourcePathsScanFailed,proto3" json:"sourcePathsScanFailed,omitempty"`
	// Number of source paths in a filesystem scan that was initiated
	SourcePathsScanAttempted int64 `protobuf:"varint,34,opt,name=sourcePathsScanAttempted,proto3" json:"sourcePathsScanAttempted,omitempty"`
	// Total number of transfers skipped, because, for example, the file already exists
	// at the destination.
	TransfersSkipped int64 `protobuf:"varint,35,opt,name=transfersSkipped,proto3" json:"transfersSkipped,omitempty"`
	// Total number of successful transfers
	TransfersPassed int64 `protobuf:"varint,36,opt,name=transfersPassed,proto3" json:"transfersPassed,omitempty"`
	// Total number of transfers with errors
	TransfersFailed int64 `protobuf:"varint,37,opt,name=transfersFailed,proto3" json:"transfersFailed,omitempty"`
	// Total number of transfers initiated
	TransfersAttempted int64 `protobuf:"varint,38,opt,name=transfersAttempted,proto3" json:"transfersAttempted,omitempty"`
	// All cookies included in the transfer
	Cookie string `protobuf:"bytes,39,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// Direction of transfer, either send (upload) or receive (download)
	Direction string `protobuf:"bytes,40,opt,name=direction,proto3" json:"direction,omitempty"`
	// Hash of the file checksum.
	// Allowable values: HASH: sha-512,sha-384,sha-256,sha1,md5.
	// (Default: none)
	FileChecksumType string `protobuf:"bytes,41,opt,name=fileChecksumType,proto3" json:"fileChecksumType,omitempty"`
	// Indicates a transfer or just a bandwidth measurement. Allowable values: Transfer, BWMeasurement
	Operation string `protobuf:"bytes,42,opt,name=operation,proto3" json:"operation,omitempty"`
	// Metatags in JSON format specified by --tags
	Tags string `protobuf:"bytes,43,opt,name=tags,proto3" json:"tags,omitempty"`
	// Total number of transfers initiated, where the data is provided as an argument
	ArgTransfersAttempted int64 `protobuf:"varint,44,opt,name=argTransfersAttempted,proto3" json:"argTransfersAttempted,omitempty"`
	// Number of successful transfers, where the data is provided as an argument
	ArgTransfersPassed int64 `protobuf:"varint,45,opt,name=argTransfersPassed,proto3" json:"argTransfersPassed,omitempty"`
	// Number of skipped transfers, where the data is provided as an argument
	ArgTransfersSkipped int64 `protobuf:"varint,46,opt,name=argTransfersSkipped,proto3" json:"argTransfersSkipped,omitempty"`
	// Number of failed transfers, where the data is provided as an argument
	ArgTransfersFailed int64 `protobuf:"varint,47,opt,name=argTransfersFailed,proto3" json:"argTransfersFailed,omitempty"`
	// If yes, use encryption.
	Encryption string `protobuf:"bytes,48,opt,name=encryption,proto3" json:"encryption,omitempty"`
	// Transfer policy. Allowable values: Adaptive, Fixed, High
	Adaptive string `protobuf:"bytes,49,opt,name=adaptive,proto3" json:"adaptive,omitempty"`
	// If Yes, this process is acting as the server. If No, this process is acting as the client.
	Remote string `protobuf:"bytes,50,opt,name=remote,proto3" json:"remote,omitempty"`
	// Destination path for files being transferred
	Destination string `protobuf:"bytes,51,opt,name=destination,proto3" json:"destination,omitempty"`
	// Transfer priority (1: high | 2: regular)
	Priority int64 `protobuf:"varint,52,opt,name=priority,proto3" json:"priority,omitempty"`
	// UUID for the transfer, returned from the initial transfer request. Used for subsequent requests.
	TransferId string `protobuf:"bytes,53,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Maximum rate for transfers, in kilobits per second
	RateCap int64 `protobuf:"varint,54,opt,name=rateCap,proto3" json:"rateCap,omitempty"`
	// Minimum target rate for transfers, in kilobits per second
	MinRateCap int64 `protobuf:"varint,55,opt,name=minRateCap,proto3" json:"minRateCap,omitempty"`
	// Transfer policy that is allowed
	PolicyCap string `protobuf:"bytes,56,opt,name=policyCap,proto3" json:"policyCap,omitempty"`
	// If yes, lock the target transfer rate to the default value set on the server. If no,
	// changing the target rate is allowed.
	RateLock string `protobuf:"bytes,57,opt,name=rateLock,proto3" json:"rateLock,omitempty"`
	// If no, changing the minimum transfer rate--set on the server--is allowed.
	MinRateLock string `protobuf:"bytes,58,opt,name=minRateLock,proto3" json:"minRateLock,omitempty"`
	// If no, changing the transfer policy (priority)--set on the server--is allowed.
	PolicyLock string `protobuf:"bytes,59,opt,name=policyLock,proto3" json:"policyLock,omitempty"`
	// Hostname for the transfer server
	ServerHostname string `protobuf:"bytes,60,opt,name=serverHostname,proto3" json:"serverHostname,omitempty"`
	// IP address for the remote transfer server
	RemoteAddress string `protobuf:"bytes,61,opt,name=remoteAddress,proto3" json:"remoteAddress,omitempty"`
	// Cipher for content protection
	Cipher string `protobuf:"bytes,62,opt,name=cipher,proto3" json:"cipher,omitempty"`
	// Policy for resuming a transfer after the transfer is paused
	ResumePolicy string `protobuf:"bytes,63,opt,name=resumePolicy,proto3" json:"resumePolicy,omitempty"`
	// Policy for creating the transfer
	CreatePolicy int64 `protobuf:"varint,64,opt,name=createPolicy,proto3" json:"createPolicy,omitempty"`
	// Policy for application settings in the SDK
	ManifestPolicy string `protobuf:"bytes,65,opt,name=manifestPolicy,proto3" json:"manifestPolicy,omitempty"`
	// Policy for precalculating job size
	Precalc string `protobuf:"bytes,66,opt,name=precalc,proto3" json:"precalc,omitempty"`
	// Overwrite files at the destination with source files of the same name based on the policy:
	//   - always – Always overwrite the file.
	//   - never – Never overwrite the file. If the destination contains partial files that are older
	//     or the same as the source files and resume is enabled, the partial files resume transfer.
	//     Partial files with checksums or sizes that differ from the source files are not overwritten.
	//   - diff – Overwrite the file if it is different from the source, depending on the compare method
	//     (default is size). If the destination is object storage, diff has the same effect as always.
	//     If resume is not enabled, partial files are overwritten if they are different from the source,
	//     otherwise they are skipped. If resume is enabled, only partial files with different sizes or
	//     checksums from the source are overwritten; otherwise, files resume.
	//   - diff+older – Overwrite the file if it is older and different from the source, depending on
	//     the compare method (default is size). If resume is not enabled, partial files are overwritten
	//     if they are older and different from the source, otherwise they are skipped. If resume is enabled,
	//     only partial files that are different and older than the source are overwritten, otherwise they
	//     are resumed.
	//   - older – Overwrite the file if its timestamp is older than the source timestamp.
	//
	// If you set an overwrite policy of diff or diff+older, difference is determined by the value set
	// for resume_policy:
	// "none" - the source and destination files are always considered different and the destination
	//
	//	file is always overwritten
	//
	// "attributes" - the source and destination files are compared based on file attributes
	// "sparse_checksum" - the source and destination files are compared based on sparse checksums,
	//
	//	(currently file size)
	//
	// "full_checksum" - the source and destination files are compared based on full checksums
	OverwritePolicy string `protobuf:"bytes,67,opt,name=overwritePolicy,proto3" json:"overwritePolicy,omitempty"`
	// Round trip time autocorrection
	RttAutocorrect string `protobuf:"bytes,68,opt,name=rttAutocorrect,proto3" json:"rttAutocorrect,omitempty"`
	// Total time allowed for the transfer
	TimePolicy int64 `protobuf:"varint,69,opt,name=timePolicy,proto3" json:"timePolicy,omitempty"`
	// Suffix of the manifest file while the transfer is running
	ManifestInprogress string `protobuf:"bytes,70,opt,name=manifestInprogress,proto3" json:"manifestInprogress,omitempty"`
	// Specifies that the files are encrypted with user supplied password. Allowable values: yes, no.
	FilesEncrypt string `protobuf:"bytes,71,opt,name=filesEncrypt,proto3" json:"filesEncrypt,omitempty"`
	// Specifies that the files are decrypted with user supplied password. Allowable values: yes, no.
	FilesDecrypt string `protobuf:"bytes,72,opt,name=filesDecrypt,proto3" json:"filesDecrypt,omitempty"`
	// Sets the datagram size to be used by the sender
	DatagramSize int64 `protobuf:"varint,73,opt,name=datagramSize,proto3" json:"datagramSize,omitempty"`
	// Version of the aggregate bandwidth caps applied to transfer sessions
	VLinkVersion int64 `protobuf:"varint,74,opt,name=vLinkVersion,proto3" json:"vLinkVersion,omitempty"`
	// At the peer IP address, version of the aggregate bandwidth caps applied to transfer sessions
	PeerVLinkVersion int64 `protobuf:"varint,75,opt,name=peerVLinkVersion,proto3" json:"peerVLinkVersion,omitempty"`
	// Vlkink is enabled on the local machine
	VLinkLocalEnabled string `protobuf:"bytes,76,opt,name=vLinkLocalEnabled,proto3" json:"vLinkLocalEnabled,omitempty"`
	// Vlkink is enabled on the remote transfer server
	VLinkRemoteEnabled string `protobuf:"bytes,77,opt,name=vLinkRemoteEnabled,proto3" json:"vLinkRemoteEnabled,omitempty"`
	// The size of data to be read from the disk on the sender
	ReadBlockSize int64 `protobuf:"varint,78,opt,name=readBlockSize,proto3" json:"readBlockSize,omitempty"`
	// The size of data to be written to the disk on the receiver
	WriteBlockSize int64 `protobuf:"varint,79,opt,name=writeBlockSize,proto3" json:"writeBlockSize,omitempty"`
	// Number of sessions used in a multi-session transfer
	ClusterNumNodes int64 `protobuf:"varint,80,opt,name=clusterNumNodes,proto3" json:"clusterNumNodes,omitempty"`
	// The session index number in a multi-session transfer
	ClusterNodeId int64 `protobuf:"varint,81,opt,name=clusterNodeId,proto3" json:"clusterNodeId,omitempty"`
	// Size of data to be transferred when a range transfer is specified
	MoveRange string `protobuf:"bytes,82,opt,name=moveRange,proto3" json:"moveRange,omitempty"`
	// The session is running in persistent session mode
	Keepalive string `protobuf:"bytes,83,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	// The session is attempting a login, only, without data transfer
	TestLogin string `protobuf:"bytes,84,opt,name=testLogin,proto3" json:"testLogin,omitempty"`
	// Use the forward proxy for Aspera file transfers
	UseProxy string `protobuf:"bytes,85,opt,name=useProxy,proto3" json:"useProxy,omitempty"`
	// Algorithm to adapt the transmission rate in response to varying conditions
	RateControlAlgorithm string `protobuf:"bytes,86,opt,name=rateControlAlgorithm,proto3" json:"rateControlAlgorithm,omitempty"`
	// Path maximum transmission unit (MTU) value
	Pmtu int64 `protobuf:"varint,87,opt,name=pmtu,proto3" json:"pmtu,omitempty"`
	// Total number of files discovered at the source that can potentially be transferred
	PreTransferFiles int64 `protobuf:"varint,88,opt,name=preTransferFiles,proto3" json:"preTransferFiles,omitempty"`
	// Total number of bytes  discovered at the source that can potentially be transferred
	PreTransferBytes int64 `protobuf:"varint,89,opt,name=preTransferBytes,proto3" json:"preTransferBytes,omitempty"`
	// Total number of directories discovered at the source that can potentially be transferred
	PreTransferDirs int64 `protobuf:"varint,90,opt,name=preTransferDirs,proto3" json:"preTransferDirs,omitempty"`
	// Total number of special files discovered at the source that can potentially be transferred
	PreTransferSpecial int64 `protobuf:"varint,91,opt,name=preTransferSpecial,proto3" json:"preTransferSpecial,omitempty"`
	// Total number of source paths that are scanned
	SourcePathsScanCompleted int64 `protobuf:"varint,92,opt,name=sourcePathsScanCompleted,proto3" json:"sourcePathsScanCompleted,omitempty"`
	// Source arguments handled
	ArgScansAttempted int64 `protobuf:"varint,93,opt,name=argScansAttempted,proto3" json:"argScansAttempted,omitempty"`
	// Source arguments completed
	ArgScansCompleted int64 `protobuf:"varint,94,opt,name=argScansCompleted,proto3" json:"argScansCompleted,omitempty"`
	// Command line argument index that specified this file (if argument was a directory,
	// many files can have the same FaspFileArgIndex). In persistent mode, the argument
	// is constantly increasing.
	ArgFaspFileArgIndex int64 `protobuf:"varint,95,opt,name=argFaspFileArgIndex,proto3" json:"argFaspFileArgIndex,omitempty"`
	// Total number of attempts to create a destination directory.
	DirCreatesAttempted int64 `protobuf:"varint,96,opt,name=dirCreatesAttempted,proto3" json:"dirCreatesAttempted,omitempty"`
	// Total number of attempts to create a destination directory that failed.
	DirCreatesFailed int64 `protobuf:"varint,97,opt,name=dirCreatesFailed,proto3" json:"dirCreatesFailed,omitempty"`
	// Total number of attempts to create a directory where the destination directory already
	// existed or was successfully created
	DirCreatesPassed int64 `protobuf:"varint,98,opt,name=dirCreatesPassed,proto3" json:"dirCreatesPassed,omitempty"`
	// Total source directory scans completed
	DirScansCompleted int64 `protobuf:"varint,99,opt,name=dirScansCompleted,proto3" json:"dirScansCompleted,omitempty"`
}

func (x *SessionTransferInformation) Reset() {
	*x = SessionTransferInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionTransferInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionTransferInformation) ProtoMessage() {}

func (x *SessionTransferInformation) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionTransferInformation.ProtoReflect.Descriptor instead.
func (*SessionTransferInformation) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{14}
}

func (x *SessionTransferInformation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SessionTransferInformation) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionTransferInformation) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SessionTransferInformation) GetClientUser() string {
	if x != nil {
		return x.ClientUser
	}
	return ""
}

func (x *SessionTransferInformation) GetClientNodeId() string {
	if x != nil {
		return x.ClientNodeId
	}
	return ""
}

func (x *SessionTransferInformation) GetClientClusterId() string {
	if x != nil {
		return x.ClientClusterId
	}
	return ""
}

func (x *SessionTransferInformation) GetServerNodeId() string {
	if x != nil {
		return x.ServerNodeId
	}
	return ""
}

func (x *SessionTransferInformation) GetServerClusterId() string {
	if x != nil {
		return x.ServerClusterId
	}
	return ""
}

func (x *SessionTransferInformation) GetClientIPAddress() string {
	if x != nil {
		return x.ClientIPAddress
	}
	return ""
}

func (x *SessionTransferInformation) GetServerIPAddress() string {
	if x != nil {
		return x.ServerIPAddress
	}
	return ""
}

func (x *SessionTransferInformation) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SessionTransferInformation) GetTcpPort() int64 {
	if x != nil {
		return x.TcpPort
	}
	return 0
}

func (x *SessionTransferInformation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SessionTransferInformation) GetStartTimeUsec() int64 {
	if x != nil {
		return x.StartTimeUsec
	}
	return 0
}

func (x *SessionTransferInformation) GetEndTimeUsec() int64 {
	if x != nil {
		return x.EndTimeUsec
	}
	return 0
}

func (x *SessionTransferInformation) GetElapsedUsec() int64 {
	if x != nil {
		return x.ElapsedUsec
	}
	return 0
}

func (x *SessionTransferInformation) GetBytesTransferred() int64 {
	if x != nil {
		return x.BytesTransferred
	}
	return 0
}

func (x *SessionTransferInformation) GetBytesWritten() int64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *SessionTransferInformation) GetBytesLost() int64 {
	if x != nil {
		return x.BytesLost
	}
	return 0
}

func (x *SessionTransferInformation) GetFilesCompleted() int64 {
	if x != nil {
		return x.FilesCompleted
	}
	return 0
}

func (x *SessionTransferInformation) GetFilesFailed() int64 {
	if x != nil {
		return x.FilesFailed
	}
	return 0
}

func (x *SessionTransferInformation) GetFilesSkipped() int64 {
	if x != nil {
		return x.FilesSkipped
	}
	return 0
}

func (x *SessionTransferInformation) GetDirectoriesCompleted() int64 {
	if x != nil {
		return x.DirectoriesCompleted
	}
	return 0
}

func (x *SessionTransferInformation) GetTargetRateKbps() int64 {
	if x != nil {
		return x.TargetRateKbps
	}
	return 0
}

func (x *SessionTransferInformation) GetMinRateKbps() int64 {
	if x != nil {
		return x.MinRateKbps
	}
	return 0
}

func (x *SessionTransferInformation) GetCalcRateKbps() int64 {
	if x != nil {
		return x.CalcRateKbps
	}
	return 0
}

func (x *SessionTransferInformation) GetNetworkDelayUsec() int64 {
	if x != nil {
		return x.NetworkDelayUsec
	}
	return 0
}

func (x *SessionTransferInformation) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *SessionTransferInformation) GetErrorDesc() string {
	if x != nil {
		return x.ErrorDesc
	}
	return ""
}

func (x *SessionTransferInformation) GetManifestFilePath() string {
	if x != nil {
		return x.ManifestFilePath
	}
	return ""
}

func (x *SessionTransferInformation) GetSourcePathsScanExcluded() int64 {
	if x != nil {
		return x.SourcePathsScanExcluded
	}
	return 0
}

func (x *SessionTransferInformation) GetSourcePathsScanIrregular() int64 {
	if x != nil {
		return x.SourcePathsScanIrregular
	}
	return 0
}

func (x *SessionTransferInformation) GetSourcePathsScanFailed() int64 {
	if x != nil {
		return x.SourcePathsScanFailed
	}
	return 0
}

func (x *SessionTransferInformation) GetSourcePathsScanAttempted() int64 {
	if x != nil {
		return x.SourcePathsScanAttempted
	}
	return 0
}

func (x *SessionTransferInformation) GetTransfersSkipped() int64 {
	if x != nil {
		return x.TransfersSkipped
	}
	return 0
}

func (x *SessionTransferInformation) GetTransfersPassed() int64 {
	if x != nil {
		return x.TransfersPassed
	}
	return 0
}

func (x *SessionTransferInformation) GetTransfersFailed() int64 {
	if x != nil {
		return x.TransfersFailed
	}
	return 0
}

func (x *SessionTransferInformation) GetTransfersAttempted() int64 {
	if x != nil {
		return x.TransfersAttempted
	}
	return 0
}

func (x *SessionTransferInformation) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *SessionTransferInformation) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *SessionTransferInformation) GetFileChecksumType() string {
	if x != nil {
		return x.FileChecksumType
	}
	return ""
}

func (x *SessionTransferInformation) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *SessionTransferInformation) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SessionTransferInformation) GetArgTransfersAttempted() int64 {
	if x != nil {
		return x.ArgTransfersAttempted
	}
	return 0
}

func (x *SessionTransferInformation) GetArgTransfersPassed() int64 {
	if x != nil {
		return x.ArgTransfersPassed
	}
	return 0
}

func (x *SessionTransferInformation) GetArgTransfersSkipped() int64 {
	if x != nil {
		return x.ArgTransfersSkipped
	}
	return 0
}

func (x *SessionTransferInformation) GetArgTransfersFailed() int64 {
	if x != nil {
		return x.ArgTransfersFailed
	}
	return 0
}

func (x *SessionTransferInformation) GetEncryption() string {
	if x != nil {
		return x.Encryption
	}
	return ""
}

func (x *SessionTransferInformation) GetAdaptive() string {
	if x != nil {
		return x.Adaptive
	}
	return ""
}

func (x *SessionTransferInformation) GetRemote() string {
	if x != nil {
		return x.Remote
	}
	return ""
}

func (x *SessionTransferInformation) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *SessionTransferInformation) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SessionTransferInformation) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *SessionTransferInformation) GetRateCap() int64 {
	if x != nil {
		return x.RateCap
	}
	return 0
}

func (x *SessionTransferInformation) GetMinRateCap() int64 {
	if x != nil {
		return x.MinRateCap
	}
	return 0
}

func (x *SessionTransferInformation) GetPolicyCap() string {
	if x != nil {
		return x.PolicyCap
	}
	return ""
}

func (x *SessionTransferInformation) GetRateLock() string {
	if x != nil {
		return x.RateLock
	}
	return ""
}

func (x *SessionTransferInformation) GetMinRateLock() string {
	if x != nil {
		return x.MinRateLock
	}
	return ""
}

func (x *SessionTransferInformation) GetPolicyLock() string {
	if x != nil {
		return x.PolicyLock
	}
	return ""
}

func (x *SessionTransferInformation) GetServerHostname() string {
	if x != nil {
		return x.ServerHostname
	}
	return ""
}

func (x *SessionTransferInformation) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *SessionTransferInformation) GetCipher() string {
	if x != nil {
		return x.Cipher
	}
	return ""
}

func (x *SessionTransferInformation) GetResumePolicy() string {
	if x != nil {
		return x.ResumePolicy
	}
	return ""
}

func (x *SessionTransferInformation) GetCreatePolicy() int64 {
	if x != nil {
		return x.CreatePolicy
	}
	return 0
}

func (x *SessionTransferInformation) GetManifestPolicy() string {
	if x != nil {
		return x.ManifestPolicy
	}
	return ""
}

func (x *SessionTransferInformation) GetPrecalc() string {
	if x != nil {
		return x.Precalc
	}
	return ""
}

func (x *SessionTransferInformation) GetOverwritePolicy() string {
	if x != nil {
		return x.OverwritePolicy
	}
	return ""
}

func (x *SessionTransferInformation) GetRttAutocorrect() string {
	if x != nil {
		return x.RttAutocorrect
	}
	return ""
}

func (x *SessionTransferInformation) GetTimePolicy() int64 {
	if x != nil {
		return x.TimePolicy
	}
	return 0
}

func (x *SessionTransferInformation) GetManifestInprogress() string {
	if x != nil {
		return x.ManifestInprogress
	}
	return ""
}

func (x *SessionTransferInformation) GetFilesEncrypt() string {
	if x != nil {
		return x.FilesEncrypt
	}
	return ""
}

func (x *SessionTransferInformation) GetFilesDecrypt() string {
	if x != nil {
		return x.FilesDecrypt
	}
	return ""
}

func (x *SessionTransferInformation) GetDatagramSize() int64 {
	if x != nil {
		return x.DatagramSize
	}
	return 0
}

func (x *SessionTransferInformation) GetVLinkVersion() int64 {
	if x != nil {
		return x.VLinkVersion
	}
	return 0
}

func (x *SessionTransferInformation) GetPeerVLinkVersion() int64 {
	if x != nil {
		return x.PeerVLinkVersion
	}
	return 0
}

func (x *SessionTransferInformation) GetVLinkLocalEnabled() string {
	if x != nil {
		return x.VLinkLocalEnabled
	}
	return ""
}

func (x *SessionTransferInformation) GetVLinkRemoteEnabled() string {
	if x != nil {
		return x.VLinkRemoteEnabled
	}
	return ""
}

func (x *SessionTransferInformation) GetReadBlockSize() int64 {
	if x != nil {
		return x.ReadBlockSize
	}
	return 0
}

func (x *SessionTransferInformation) GetWriteBlockSize() int64 {
	if x != nil {
		return x.WriteBlockSize
	}
	return 0
}

func (x *SessionTransferInformation) GetClusterNumNodes() int64 {
	if x != nil {
		return x.ClusterNumNodes
	}
	return 0
}

func (x *SessionTransferInformation) GetClusterNodeId() int64 {
	if x != nil {
		return x.ClusterNodeId
	}
	return 0
}

func (x *SessionTransferInformation) GetMoveRange() string {
	if x != nil {
		return x.MoveRange
	}
	return ""
}

func (x *SessionTransferInformation) GetKeepalive() string {
	if x != nil {
		return x.Keepalive
	}
	return ""
}

func (x *SessionTransferInformation) GetTestLogin() string {
	if x != nil {
		return x.TestLogin
	}
	return ""
}

func (x *SessionTransferInformation) GetUseProxy() string {
	if x != nil {
		return x.UseProxy
	}
	return ""
}

func (x *SessionTransferInformation) GetRateControlAlgorithm() string {
	if x != nil {
		return x.RateControlAlgorithm
	}
	return ""
}

func (x *SessionTransferInformation) GetPmtu() int64 {
	if x != nil {
		return x.Pmtu
	}
	return 0
}

func (x *SessionTransferInformation) GetPreTransferFiles() int64 {
	if x != nil {
		return x.PreTransferFiles
	}
	return 0
}

func (x *SessionTransferInformation) GetPreTransferBytes() int64 {
	if x != nil {
		return x.PreTransferBytes
	}
	return 0
}

func (x *SessionTransferInformation) GetPreTransferDirs() int64 {
	if x != nil {
		return x.PreTransferDirs
	}
	return 0
}

func (x *SessionTransferInformation) GetPreTransferSpecial() int64 {
	if x != nil {
		return x.PreTransferSpecial
	}
	return 0
}

func (x *SessionTransferInformation) GetSourcePathsScanCompleted() int64 {
	if x != nil {
		return x.SourcePathsScanCompleted
	}
	return 0
}

func (x *SessionTransferInformation) GetArgScansAttempted() int64 {
	if x != nil {
		return x.ArgScansAttempted
	}
	return 0
}

func (x *SessionTransferInformation) GetArgScansCompleted() int64 {
	if x != nil {
		return x.ArgScansCompleted
	}
	return 0
}

func (x *SessionTransferInformation) GetArgFaspFileArgIndex() int64 {
	if x != nil {
		return x.ArgFaspFileArgIndex
	}
	return 0
}

func (x *SessionTransferInformation) GetDirCreatesAttempted() int64 {
	if x != nil {
		return x.DirCreatesAttempted
	}
	return 0
}

func (x *SessionTransferInformation) GetDirCreatesFailed() int64 {
	if x != nil {
		return x.DirCreatesFailed
	}
	return 0
}

func (x *SessionTransferInformation) GetDirCreatesPassed() int64 {
	if x != nil {
		return x.DirCreatesPassed
	}
	return 0
}

func (x *SessionTransferInformation) GetDirScansCompleted() int64 {
	if x != nil {
		return x.DirScansCompleted
	}
	return 0
}

// Returned information about the transfer
type FileTransferInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File ID
	FileId string `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	// Path for the file transfer
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Transfer start time, in microseconds
	StartTimeUsec int64 `protobuf:"varint,3,opt,name=startTimeUsec,proto3" json:"startTimeUsec,omitempty"`
	// Total time elapsed during the transfer, in microseconds
	ElapsedUsec int64 `protobuf:"varint,4,opt,name=elapsedUsec,proto3" json:"elapsedUsec,omitempty"`
	// Status of the transfer
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Error code
	ErrorCode int64 `protobuf:"varint,6,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// Description of the error
	ErrorDescription string `protobuf:"bytes,7,opt,name=errorDescription,proto3" json:"errorDescription,omitempty"`
	// Transfer size (MB)
	Size int64 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	// Type of file that was transferred
	FileType string `protobuf:"bytes,10,opt,name=fileType,proto3" json:"fileType,omitempty"`
	// Hash of the file checksum.
	// Allowable values: sha-512,sha-384,sha-256,sha1,md5.
	// (Default: none)
	FileChecksumType string `protobuf:"bytes,11,opt,name=fileChecksumType,proto3" json:"fileChecksumType,omitempty"`
	// Hash from fileChecksumType
	Checksum string `protobuf:"bytes,12,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// Offset where file is written
	StartByte int64 `protobuf:"varint,13,opt,name=startByte,proto3" json:"startByte,omitempty"`
	// Total bytes written at the destination
	BytesWritten int64 `protobuf:"varint,14,opt,name=bytesWritten,proto3" json:"bytesWritten,omitempty"`
	// From startByte, how many contiguous bytes have been written
	BytesContiguous int64 `protobuf:"varint,15,opt,name=bytesContiguous,proto3" json:"bytesContiguous,omitempty"`
	// Unique ID that FASP assigns to a transfer session
	SessionId string `protobuf:"bytes,16,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// Command line argument index that specified this file (if argument was a directory,
	// many files can have the same FaspFileArgIndex). In persistent mode, the argument is
	// constantly increasing.
	FaspFileArgIndex int64 `protobuf:"varint,17,opt,name=faspFileArgIndex,proto3" json:"faspFileArgIndex,omitempty"`
}

func (x *FileTransferInformation) Reset() {
	*x = FileTransferInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTransferInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferInformation) ProtoMessage() {}

func (x *FileTransferInformation) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferInformation.ProtoReflect.Descriptor instead.
func (*FileTransferInformation) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{15}
}

func (x *FileTransferInformation) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileTransferInformation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileTransferInformation) GetStartTimeUsec() int64 {
	if x != nil {
		return x.StartTimeUsec
	}
	return 0
}

func (x *FileTransferInformation) GetElapsedUsec() int64 {
	if x != nil {
		return x.ElapsedUsec
	}
	return 0
}

func (x *FileTransferInformation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FileTransferInformation) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *FileTransferInformation) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *FileTransferInformation) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileTransferInformation) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *FileTransferInformation) GetFileChecksumType() string {
	if x != nil {
		return x.FileChecksumType
	}
	return ""
}

func (x *FileTransferInformation) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *FileTransferInformation) GetStartByte() int64 {
	if x != nil {
		return x.StartByte
	}
	return 0
}

func (x *FileTransferInformation) GetBytesWritten() int64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

func (x *FileTransferInformation) GetBytesContiguous() int64 {
	if x != nil {
		return x.BytesContiguous
	}
	return 0
}

func (x *FileTransferInformation) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *FileTransferInformation) GetFaspFileArgIndex() int64 {
	if x != nil {
		return x.FaspFileArgIndex
	}
	return 0
}

// Request to modify the transfer
type TransferModificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer, returned from the initial transfer request.
	// Used for subsequent requests
	TransferId string `protobuf:"bytes,1,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Defines the configuration parameters for the transfer
	TransferSpec string `protobuf:"bytes,2,opt,name=transferSpec,proto3" json:"transferSpec,omitempty"`
}

func (x *TransferModificationRequest) Reset() {
	*x = TransferModificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferModificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferModificationRequest) ProtoMessage() {}

func (x *TransferModificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferModificationRequest.ProtoReflect.Descriptor instead.
func (*TransferModificationRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{16}
}

func (x *TransferModificationRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferModificationRequest) GetTransferSpec() string {
	if x != nil {
		return x.TransferSpec
	}
	return ""
}

// Data returned from the request to modify the transfer
type TransferModificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API version
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// UUID for the transfer returned from the initial transfer request.
	// Used for subsequent requests.
	TransferId string `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Status of the transfer
	Status TransferStatus `protobuf:"varint,3,opt,name=status,proto3,enum=transfersdk.TransferStatus" json:"status,omitempty"`
	// Error message, if any
	Error *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TransferModificationResponse) Reset() {
	*x = TransferModificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferModificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferModificationResponse) ProtoMessage() {}

func (x *TransferModificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferModificationResponse.ProtoReflect.Descriptor instead.
func (*TransferModificationResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{17}
}

func (x *TransferModificationResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *TransferModificationResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferModificationResponse) GetStatus() TransferStatus {
	if x != nil {
		return x.Status
	}
	return TransferStatus_UNKNOWN_STATUS
}

func (x *TransferModificationResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Request for information about the transfer path
type TransferPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer, returned from the initial transfer request.
	// Used for subsequent requests.
	TransferId string `protobuf:"bytes,1,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Information about transfer paths, both source and destination
	TransferPath []*TransferPath `protobuf:"bytes,2,rep,name=transferPath,proto3" json:"transferPath,omitempty"`
}

func (x *TransferPathRequest) Reset() {
	*x = TransferPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPathRequest) ProtoMessage() {}

func (x *TransferPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPathRequest.ProtoReflect.Descriptor instead.
func (*TransferPathRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{18}
}

func (x *TransferPathRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferPathRequest) GetTransferPath() []*TransferPath {
	if x != nil {
		return x.TransferPath
	}
	return nil
}

// Information about transfer paths
type TransferPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source path for files being transferred
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Destination path for files being transferred
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Defines the range for a stream
	Range *TransferRange `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *TransferPath) Reset() {
	*x = TransferPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPath) ProtoMessage() {}

func (x *TransferPath) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPath.ProtoReflect.Descriptor instead.
func (*TransferPath) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{19}
}

func (x *TransferPath) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TransferPath) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *TransferPath) GetRange() *TransferRange {
	if x != nil {
		return x.Range
	}
	return nil
}

// Data returned from the request for information about the transfer path
type TransferPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// UUID for the transfer returned from the initial transfer request, used for subsequent requests
	TransferId string `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Error that is returned
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TransferPathResponse) Reset() {
	*x = TransferPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPathResponse) ProtoMessage() {}

func (x *TransferPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPathResponse.ProtoReflect.Descriptor instead.
func (*TransferPathResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{20}
}

func (x *TransferPathResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *TransferPathResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *TransferPathResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Request to mark an existing persistent transfer as done
type LockPersistentTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer, returned from the initial transfer request.
	// Used for subsequent requests.
	TransferId string `protobuf:"bytes,1,opt,name=transferId,proto3" json:"transferId,omitempty"`
}

func (x *LockPersistentTransferRequest) Reset() {
	*x = LockPersistentTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockPersistentTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockPersistentTransferRequest) ProtoMessage() {}

func (x *LockPersistentTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockPersistentTransferRequest.ProtoReflect.Descriptor instead.
func (*LockPersistentTransferRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{21}
}

func (x *LockPersistentTransferRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

// Response from the request to mark an existing persistent transfer as done
type LockPersistentTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// UUID for the transfer, returned from the initial transfer request.
	// Used for subsequent requests.
	TransferId string `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Error that is returned
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *LockPersistentTransferResponse) Reset() {
	*x = LockPersistentTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockPersistentTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockPersistentTransferResponse) ProtoMessage() {}

func (x *LockPersistentTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockPersistentTransferResponse.ProtoReflect.Descriptor instead.
func (*LockPersistentTransferResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{22}
}

func (x *LockPersistentTransferResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *LockPersistentTransferResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *LockPersistentTransferResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Request to filter specific events
type RegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer, returned from the initial transfer request.
	// Used for subsequent requests.
	TransferId []string `protobuf:"bytes,1,rep,name=transferId,proto3" json:"transferId,omitempty"`
	// The RegistrationFilter objects, specifying which filter to apply on events to monitor.
	// The goal of filter is to narrow down the events monitoring to a subset of events.
	// Filter items can be composed using an operator (AND/OR, default is OR).
	// When multiple filters are registered, they are processed as composed with an OR operator.
	Filters []*RegistrationFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *RegistrationRequest) Reset() {
	*x = RegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationRequest) ProtoMessage() {}

func (x *RegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationRequest.ProtoReflect.Descriptor instead.
func (*RegistrationRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{23}
}

func (x *RegistrationRequest) GetTransferId() []string {
	if x != nil {
		return x.TransferId
	}
	return nil
}

func (x *RegistrationRequest) GetFilters() []*RegistrationFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Components for filtering specific events. A filter without any item is considered as a pass through filter (accepting all the events).
type RegistrationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operator applying to this filter set used to compose registration filter items.
	Operator RegistrationFilterOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=transfersdk.RegistrationFilterOperator" json:"operator,omitempty"`
	// All transfer event types
	EventType []TransferEvent `protobuf:"varint,2,rep,packed,name=eventType,proto3,enum=transfersdk.TransferEvent" json:"eventType,omitempty"`
	// All UUIDs included in the transfer
	TransferId []string `protobuf:"bytes,3,rep,name=transferId,proto3" json:"transferId,omitempty"`
	// All cookies included in the transfer
	Cookie []string `protobuf:"bytes,4,rep,name=cookie,proto3" json:"cookie,omitempty"`
	// All tags included in the transfer (base64 encoded)
	Tags64 []string `protobuf:"bytes,5,rep,name=tags64,proto3" json:"tags64,omitempty"`
	// Direction of transfer, either send (upload) or receive (download)
	Direction string `protobuf:"bytes,6,opt,name=direction,proto3" json:"direction,omitempty"`
	// Regex match for cookie included in the transfer
	CookieRegex string `protobuf:"bytes,7,opt,name=cookieRegex,proto3" json:"cookieRegex,omitempty"`
	// A set of Transfer types
	TransferType []TransferType `protobuf:"varint,8,rep,packed,name=transferType,proto3,enum=transfersdk.TransferType" json:"transferType,omitempty"`
	// A set of Transfer status types
	TransferStatus []TransferStatus `protobuf:"varint,9,rep,packed,name=transferStatus,proto3,enum=transfersdk.TransferStatus" json:"transferStatus,omitempty"`
}

func (x *RegistrationFilter) Reset() {
	*x = RegistrationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationFilter) ProtoMessage() {}

func (x *RegistrationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationFilter.ProtoReflect.Descriptor instead.
func (*RegistrationFilter) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{24}
}

func (x *RegistrationFilter) GetOperator() RegistrationFilterOperator {
	if x != nil {
		return x.Operator
	}
	return RegistrationFilterOperator_OR
}

func (x *RegistrationFilter) GetEventType() []TransferEvent {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *RegistrationFilter) GetTransferId() []string {
	if x != nil {
		return x.TransferId
	}
	return nil
}

func (x *RegistrationFilter) GetCookie() []string {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *RegistrationFilter) GetTags64() []string {
	if x != nil {
		return x.Tags64
	}
	return nil
}

func (x *RegistrationFilter) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *RegistrationFilter) GetCookieRegex() string {
	if x != nil {
		return x.CookieRegex
	}
	return ""
}

func (x *RegistrationFilter) GetTransferType() []TransferType {
	if x != nil {
		return x.TransferType
	}
	return nil
}

func (x *RegistrationFilter) GetTransferStatus() []TransferStatus {
	if x != nil {
		return x.TransferStatus
	}
	return nil
}

// Request to stop the transfer
type StopTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer, returned from the initial transfer request.
	// Used for subsequent requests.
	TransferId []string `protobuf:"bytes,1,rep,name=transferId,proto3" json:"transferId,omitempty"`
	// Length of time to delay before stopping the transfer
	Delay int64 `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *StopTransferRequest) Reset() {
	*x = StopTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTransferRequest) ProtoMessage() {}

func (x *StopTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTransferRequest.ProtoReflect.Descriptor instead.
func (*StopTransferRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{25}
}

func (x *StopTransferRequest) GetTransferId() []string {
	if x != nil {
		return x.TransferId
	}
	return nil
}

func (x *StopTransferRequest) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

// Data returned from the request to stop the transfer
type StopTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API version
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Data about the results of the StopTransferRequest
	StopResult []*StopInfo `protobuf:"bytes,2,rep,name=stopResult,proto3" json:"stopResult,omitempty"`
}

func (x *StopTransferResponse) Reset() {
	*x = StopTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTransferResponse) ProtoMessage() {}

func (x *StopTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTransferResponse.ProtoReflect.Descriptor instead.
func (*StopTransferResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{26}
}

func (x *StopTransferResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *StopTransferResponse) GetStopResult() []*StopInfo {
	if x != nil {
		return x.StopResult
	}
	return nil
}

// Query to find out if the transfer is stopped
type StopInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer returned from the initial transfer request, used for subsequent requests
	TransferId string `protobuf:"bytes,1,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Transfer is stopped.
	Stopped bool `protobuf:"varint,2,opt,name=stopped,proto3" json:"stopped,omitempty"`
	// Error that is returned
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *StopInfo) Reset() {
	*x = StopInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInfo) ProtoMessage() {}

func (x *StopInfo) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInfo.ProtoReflect.Descriptor instead.
func (*StopInfo) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{27}
}

func (x *StopInfo) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *StopInfo) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

func (x *StopInfo) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Requests data about the Transfer SDK service instance.
type InstanceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstanceInfoRequest) Reset() {
	*x = InstanceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfoRequest) ProtoMessage() {}

func (x *InstanceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfoRequest.ProtoReflect.Descriptor instead.
func (*InstanceInfoRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{28}
}

// Returns data about the Transfer SDK service instance.
type InstanceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Data about the Transfer SDK service instance
	Info *InstanceInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// Error that is returned
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InstanceInfoResponse) Reset() {
	*x = InstanceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfoResponse) ProtoMessage() {}

func (x *InstanceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfoResponse.ProtoReflect.Descriptor instead.
func (*InstanceInfoResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{29}
}

func (x *InstanceInfoResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *InstanceInfoResponse) GetInfo() *InstanceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *InstanceInfoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Data about the Transfer SDK service instance
type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port the Transfer SDK uses to run management messages
	ManagementPort int64 `protobuf:"varint,1,opt,name=managementPort,proto3" json:"managementPort,omitempty"`
	// Information about the running IBM Aspera binaries
	AsperaInfo []*AsperaInfo `protobuf:"bytes,2,rep,name=asperaInfo,proto3" json:"asperaInfo,omitempty"`
	// Information about the IBM Aspera license
	LicenseInfo *LicenseInfo `protobuf:"bytes,3,opt,name=licenseInfo,proto3" json:"licenseInfo,omitempty"`
	// Enable promiscuous mode for the transfer. If the transfer is started in promiscuous mode,
	// sessions are discoverable by any user. Allowable values: true, false.
	PromiscuousMode bool `protobuf:"varint,4,opt,name=promiscuousMode,proto3" json:"promiscuousMode,omitempty"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{30}
}

func (x *InstanceInfo) GetManagementPort() int64 {
	if x != nil {
		return x.ManagementPort
	}
	return 0
}

func (x *InstanceInfo) GetAsperaInfo() []*AsperaInfo {
	if x != nil {
		return x.AsperaInfo
	}
	return nil
}

func (x *InstanceInfo) GetLicenseInfo() *LicenseInfo {
	if x != nil {
		return x.LicenseInfo
	}
	return nil
}

func (x *InstanceInfo) GetPromiscuousMode() bool {
	if x != nil {
		return x.PromiscuousMode
	}
	return false
}

// Information about the Aspera license
type LicenseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum transfer rate enabled by the IBM Aspera license
	MaxRate string `protobuf:"bytes,1,opt,name=maxRate,proto3" json:"maxRate,omitempty"`
	// IBM Aspera customer account number
	AccountNumber string `protobuf:"bytes,2,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	// IBM Aspera license number
	LicenseNumber string `protobuf:"bytes,3,opt,name=licenseNumber,proto3" json:"licenseNumber,omitempty"`
	// Contents of the IBM Aspera license
	License string `protobuf:"bytes,4,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *LicenseInfo) Reset() {
	*x = LicenseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseInfo) ProtoMessage() {}

func (x *LicenseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseInfo.ProtoReflect.Descriptor instead.
func (*LicenseInfo) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{31}
}

func (x *LicenseInfo) GetMaxRate() string {
	if x != nil {
		return x.MaxRate
	}
	return ""
}

func (x *LicenseInfo) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *LicenseInfo) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *LicenseInfo) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

// Information about the Aspera transfer binary
type AsperaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of IBM Aspera binary (ascp or ascp4)
	AsperaBinary string `protobuf:"bytes,1,opt,name=asperaBinary,proto3" json:"asperaBinary,omitempty"`
	// Version number of the IBM Aspera binary
	AsperaVersion string `protobuf:"bytes,2,opt,name=asperaVersion,proto3" json:"asperaVersion,omitempty"`
	// User's operating system
	OperatingSystem string `protobuf:"bytes,3,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`
	// Error that is returned
	Error *Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AsperaInfo) Reset() {
	*x = AsperaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsperaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsperaInfo) ProtoMessage() {}

func (x *AsperaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsperaInfo.ProtoReflect.Descriptor instead.
func (*AsperaInfo) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{32}
}

func (x *AsperaInfo) GetAsperaBinary() string {
	if x != nil {
		return x.AsperaBinary
	}
	return ""
}

func (x *AsperaInfo) GetAsperaVersion() string {
	if x != nil {
		return x.AsperaVersion
	}
	return ""
}

func (x *AsperaInfo) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *AsperaInfo) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Request for a peer check
type PeerCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration parameters for the request
	TransferSpec string `protobuf:"bytes,1,opt,name=transferSpec,proto3" json:"transferSpec,omitempty"`
}

func (x *PeerCheckRequest) Reset() {
	*x = PeerCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerCheckRequest) ProtoMessage() {}

func (x *PeerCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerCheckRequest.ProtoReflect.Descriptor instead.
func (*PeerCheckRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{33}
}

func (x *PeerCheckRequest) GetTransferSpec() string {
	if x != nil {
		return x.TransferSpec
	}
	return ""
}

// Data returned from a peer check request
type PeerCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Peer node is reachable. Allowable values: true, false
	Reachable bool `protobuf:"varint,2,opt,name=reachable,proto3" json:"reachable,omitempty"`
	// Error data returned from the peer check
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PeerCheckResponse) Reset() {
	*x = PeerCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerCheckResponse) ProtoMessage() {}

func (x *PeerCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerCheckResponse.ProtoReflect.Descriptor instead.
func (*PeerCheckResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{34}
}

func (x *PeerCheckResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *PeerCheckResponse) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *PeerCheckResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Response to the request to add data packets to the stream
type WriteStreamChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer returned from the initial transfer request.
	// Used for subsequentrequests
	TransferId string `protobuf:"bytes,1,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Path where stream is written
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Range for the stream
	Range *TransferRange `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	// Byte array sent in the stream
	Chunk *Chunk `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *WriteStreamChunkRequest) Reset() {
	*x = WriteStreamChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteStreamChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteStreamChunkRequest) ProtoMessage() {}

func (x *WriteStreamChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteStreamChunkRequest.ProtoReflect.Descriptor instead.
func (*WriteStreamChunkRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{35}
}

func (x *WriteStreamChunkRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *WriteStreamChunkRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WriteStreamChunkRequest) GetRange() *TransferRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *WriteStreamChunkRequest) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// Response to the request to write data to the stream
type WriteStreamChunkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API version
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// UUID for the transfer returned from the initial transfer request.
	// Used for subsequent requests.
	TransferId string `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Error message, if any
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WriteStreamChunkResponse) Reset() {
	*x = WriteStreamChunkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteStreamChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteStreamChunkResponse) ProtoMessage() {}

func (x *WriteStreamChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteStreamChunkResponse.ProtoReflect.Descriptor instead.
func (*WriteStreamChunkResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{36}
}

func (x *WriteStreamChunkResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *WriteStreamChunkResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *WriteStreamChunkResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Request to write data to the stream
type WriteStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer returned from the initial transfer request.
	// Used for subsequent requests.
	TransferId string `protobuf:"bytes,1,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Path to the stream
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Stream size
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// Byte array sent in the stream
	Chunk *Chunk `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *WriteStreamRequest) Reset() {
	*x = WriteStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteStreamRequest) ProtoMessage() {}

func (x *WriteStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteStreamRequest.ProtoReflect.Descriptor instead.
func (*WriteStreamRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{37}
}

func (x *WriteStreamRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *WriteStreamRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WriteStreamRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *WriteStreamRequest) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// Response to the request to write data to the stream
type WriteStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// UUID for the transfer returned from the initial transfer request, used for subsequent requests
	TransferId string `protobuf:"bytes,2,opt,name=transferId,proto3" json:"transferId,omitempty"`
	// Error that is returned
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WriteStreamResponse) Reset() {
	*x = WriteStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteStreamResponse) ProtoMessage() {}

func (x *WriteStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteStreamResponse.ProtoReflect.Descriptor instead.
func (*WriteStreamResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{38}
}

func (x *WriteStreamResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *WriteStreamResponse) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *WriteStreamResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Request to read data from the stream
type ReadStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the transfer returned from the initial transfer request.
	// Used for subsequent requests.
	TransferId string `protobuf:"bytes,1,opt,name=transferId,proto3" json:"transferId,omitempty"`
}

func (x *ReadStreamRequest) Reset() {
	*x = ReadStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStreamRequest) ProtoMessage() {}

func (x *ReadStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStreamRequest.ProtoReflect.Descriptor instead.
func (*ReadStreamRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{39}
}

func (x *ReadStreamRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

// Data returned after reading data from the stream
type ReadStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Path where the stream is read
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Size of the file or path that is received as a stream
	PathSize int64 `protobuf:"varint,3,opt,name=pathSize,proto3" json:"pathSize,omitempty"`
	// Byte array sent in the stream
	Chunk *Chunk `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`
	// Error that is returned
	Error *Error `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ReadStreamResponse) Reset() {
	*x = ReadStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadStreamResponse) ProtoMessage() {}

func (x *ReadStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadStreamResponse.ProtoReflect.Descriptor instead.
func (*ReadStreamResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{40}
}

func (x *ReadStreamResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ReadStreamResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadStreamResponse) GetPathSize() int64 {
	if x != nil {
		return x.PathSize
	}
	return 0
}

func (x *ReadStreamResponse) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *ReadStreamResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Information about data packets
type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Byte array sent in streaming request and returned in response (both send and receive)
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{41}
}

func (x *Chunk) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

// ValidationRequest submits the transfer specification (transferSpec) for validation and specifies a transfer type.
type ValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transfer specification to be validated
	TransferSpec string `protobuf:"bytes,1,opt,name=transferSpec,proto3" json:"transferSpec,omitempty"`
	// The type of transfer
	TransferType TransferType `protobuf:"varint,2,opt,name=transferType,proto3,enum=transfersdk.TransferType" json:"transferType,omitempty"`
}

func (x *ValidationRequest) Reset() {
	*x = ValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationRequest) ProtoMessage() {}

func (x *ValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationRequest.ProtoReflect.Descriptor instead.
func (*ValidationRequest) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{42}
}

func (x *ValidationRequest) GetTransferSpec() string {
	if x != nil {
		return x.TransferSpec
	}
	return ""
}

func (x *ValidationRequest) GetTransferType() TransferType {
	if x != nil {
		return x.TransferType
	}
	return TransferType_UNKNOWN_TRANSFER_TYPE
}

// ValidationResponse contains the API version, the version of the transfer spec validator which is used, a boolean to indicate
// if the validation is successful, and an error message, if any.
type ValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the API
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Transfer specification is valid. Allowable values: true, false.
	Valid bool `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	// Version of transfer specification validator
	ValidatorVersion string `protobuf:"bytes,3,opt,name=validatorVersion,proto3" json:"validatorVersion,omitempty"`
	// Unkown field in the transfer specification
	UnknownField []string `protobuf:"bytes,4,rep,name=unknownField,proto3" json:"unknownField,omitempty"`
	// Error that is returned
	Error *Error `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ValidationResponse) Reset() {
	*x = ValidationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationResponse) ProtoMessage() {}

func (x *ValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationResponse.ProtoReflect.Descriptor instead.
func (*ValidationResponse) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{43}
}

func (x *ValidationResponse) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ValidationResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidationResponse) GetValidatorVersion() string {
	if x != nil {
		return x.ValidatorVersion
	}
	return ""
}

func (x *ValidationResponse) GetUnknownField() []string {
	if x != nil {
		return x.UnknownField
	}
	return nil
}

func (x *ValidationResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// The transfer specification (transferSpec) contains all components needed to initiate, monitor, and control transfers.
type TransferSpecV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cipher for content protection
	Cipher string `protobuf:"bytes,1,opt,name=cipher,proto3" json:"cipher,omitempty"`
	// Enable client-side content protection (encryption-at-rest).
	// For uploads, set to encrypt to transfer encrypted files and store them on the server with the extension ".aspera-env".
	// To download and decrypt encrypted files, set to decrypt.
	// content_protection_password must be specified if this option is set.
	// Values are : encrypt and decrypt
	ContentProtection string `protobuf:"bytes,2,opt,name=content_protection,json=contentProtection,proto3" json:"content_protection,omitempty"`
	// Password for encryption of transferred assets
	ContentProtectionPassword string `protobuf:"bytes,3,opt,name=content_protection_password,json=contentProtectionPassword,proto3" json:"content_protection_password,omitempty"`
	// Application-specified string
	Cookie string `protobuf:"bytes,4,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// Create a directory at the transfer destination
	CreateDir bool `protobuf:"varint,5,opt,name=create_dir,json=createDir,proto3" json:"create_dir,omitempty"`
	// Before transfer, delete files that exist at the destination but not at the source.
	// The source and destination arguments must be directories that have matching names.
	// Objects on the destination that have the same name but different type or size as
	// objects on the source are not deleted.
	DeleteBeforeTransfer bool `protobuf:"varint,6,opt,name=delete_before_transfer,json=deleteBeforeTransfer,proto3" json:"delete_before_transfer,omitempty"`
	// Delete the source directory after the assets are transferred
	DeleteSource bool `protobuf:"varint,7,opt,name=delete_source,json=deleteSource,proto3" json:"delete_source,omitempty"`
	// Root ID at the destination
	DestinationRootId string `protobuf:"bytes,8,opt,name=destination_root_id,json=destinationRootId,proto3" json:"destination_root_id,omitempty"`
	// Directon of transfer, whether send (upload) or receive (download)
	Direction string `protobuf:"bytes,9,opt,name=direction,proto3" json:"direction,omitempty"`
	// Exclude files (but not directories) that are newer than a specific time from the transfer,
	// based on when the file was last modified. Express in ISO 8601 format (for example,
	// 2006-01-02T15:04:05Z) or as number of seconds elapsed since 00:00:00 UTC on 1 January 1970.
	ExcludeNewerThan string `protobuf:"bytes,10,opt,name=exclude_newer_than,json=excludeNewerThan,proto3" json:"exclude_newer_than,omitempty"`
	// Exclude files (but not directories) that are older than a specific time from the transfer,
	// based on when the file was last modified. Express in ISO 8601 format (for example,
	// 2006-01-02T15:04:05Z) or as number of seconds elapsed since 00:00:00 UTC on 1 January 1970.
	ExcludeOlderThan string `protobuf:"bytes,11,opt,name=exclude_older_than,json=excludeOlderThan,proto3" json:"exclude_older_than,omitempty"`
	// Port used for the transfer. (Default: 3301)
	FaspPort int64 `protobuf:"varint,12,opt,name=fasp_port,json=faspPort,proto3" json:"fasp_port,omitempty"`
	// Parameters to configure HTTP fallback
	HttpFallback bool `protobuf:"varint,13,opt,name=http_fallback,json=httpFallback,proto3" json:"http_fallback,omitempty"`
	// Port used for HTTP fallback server
	HttpFallbackPort int64 `protobuf:"varint,14,opt,name=http_fallback_port,json=httpFallbackPort,proto3" json:"http_fallback_port,omitempty"`
	// Port used for HTTPS fallback
	HttpsFallbackPort int64 `protobuf:"varint,15,opt,name=https_fallback_port,json=httpsFallbackPort,proto3" json:"https_fallback_port,omitempty"`
	// Move source files under path the path after transfer success.
	MoveAfterTransfer string `protobuf:"bytes,16,opt,name=move_after_transfer,json=moveAfterTransfer,proto3" json:"move_after_transfer,omitempty"`
	// Split files across multiple ascp sessions to enable faster transfers.
	// Allowable values: true, false.
	MultiSession int64 `protobuf:"varint,17,opt,name=multi_session,json=multiSession,proto3" json:"multi_session,omitempty"`
	// Split files across multiple ascp sessions if their size is greater than or equal
	// to the specified value. Default: 0 (no files are split).
	MultiSessionThreshold int64 `protobuf:"varint,18,opt,name=multi_session_threshold,json=multiSessionThreshold,proto3" json:"multi_session_threshold,omitempty"`
	// Overwrite files at the destination with source files of the same name based on the policy:
	//   - always – Always overwrite the file.
	//   - never – Never overwrite the file. If the destination contains partial files that are older
	//     or the same as the source files and resume is enabled, the partial files resume transfer.
	//     Partial files with checksums or sizes that differ from the source files are not overwritten.
	//   - diff – Overwrite the file if it is different from the source, depending on the compare method
	//     (default is size). If the destination is object storage, diff has the same effect as always.
	//     If resume is not enabled, partial files are overwritten if they are different from the source,
	//     otherwise they are skipped. If resume is enabled, only partial files with different sizes or
	//     checksums from the source are overwritten; otherwise, files resume.
	//   - diff+older – Overwrite the file if it is older and different from the source, depending on
	//     the compare method (default is size). If resume is not enabled, partial files are overwritten
	//     if they are older and different from the source, otherwise they are skipped. If resume is enabled,
	//     only partial files that are different and older than the source are overwritten, otherwise they
	//     are resumed.
	//   - older – Overwrite the file if its timestamp is older than the source timestamp.
	//
	// If you set an overwrite policy of diff or diff+older, difference is determined by the value set
	// for resume_policy:
	// "none" - the source and destination files are always considered different and the destination
	//
	//	file is always overwritten
	//
	// "attributes" - the source and destination files are compared based on file attributes
	// "sparse_checksum" - the source and destination files are compared based on sparse checksums,
	//
	//	(currently file size)
	//
	// "full_checksum" - the source and destination files are compared based on full checksums
	Overwrite string  `protobuf:"bytes,19,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Paths     []*Path `protobuf:"bytes,20,rep,name=paths,proto3" json:"paths,omitempty"` // Path for the transfer
	// Restore the access time of the source file to the last access prior to transfer,
	// which the source considers an access.
	PrecalculateJobSize bool `protobuf:"varint,21,opt,name=precalculate_job_size,json=precalculateJobSize,proto3" json:"precalculate_job_size,omitempty"`
	// Preserve the time the file was last accessed (read or write access) on the source.
	PreserveAccessTime bool `protobuf:"varint,22,opt,name=preserve_access_time,json=preserveAccessTime,proto3" json:"preserve_access_time,omitempty"`
	// Preserve timestamp for when a file is created
	PreserveCreationTime bool `protobuf:"varint,23,opt,name=preserve_creation_time,json=preserveCreationTime,proto3" json:"preserve_creation_time,omitempty"`
	// Preserve the time the object was last modified (write access) on the source.
	PreserveModificationTime bool `protobuf:"varint,24,opt,name=preserve_modification_time,json=preserveModificationTime,proto3" json:"preserve_modification_time,omitempty"`
	// Preserve file timestamps
	PreserveTimes bool `protobuf:"varint,25,opt,name=preserve_times,json=preserveTimes,proto3" json:"preserve_times,omitempty"`
	// The transfer rate policy to use when sharing bandwidth. Allowable values:
	// high - When sharing bandwidth, transfer at twice the rate of a transfer using a fair policy.
	// fair - (Default) Share bandwidth equally with other traffic.
	// low - Use only unused bandwidth.
	// fixed - Transfer at the target rate, regardless of the actual network capacity.
	// Do not share bandwidth. Aspera recommends that you do not use this setting except under special
	// circumstances, otherwise the destination storage can be damaged.
	RatePolicy string `protobuf:"bytes,26,opt,name=rate_policy,json=ratePolicy,proto3" json:"rate_policy,omitempty"`
	// Access key for the remote server
	RemoteAccessKey string `protobuf:"bytes,27,opt,name=remote_access_key,json=remoteAccessKey,proto3" json:"remote_access_key,omitempty"`
	// Remote server used for the transfer
	RemoteHost string `protobuf:"bytes,28,opt,name=remote_host,json=remoteHost,proto3" json:"remote_host,omitempty"`
	// Password for the remote user
	RemotePassword string `protobuf:"bytes,29,opt,name=remote_password,json=remotePassword,proto3" json:"remote_password,omitempty"`
	// Remote user's username
	RemoteUser string `protobuf:"bytes,30,opt,name=remote_user,json=remoteUser,proto3" json:"remote_user,omitempty"`
	// Remove files at the source of the transfer after the transfer completes successfully
	RemoveAfterTransfer bool `protobuf:"varint,31,opt,name=remove_after_transfer,json=removeAfterTransfer,proto3" json:"remove_after_transfer,omitempty"`
	// Remove empty subdirectories at the source of the transfer
	RemoveEmptyDirectories bool `protobuf:"varint,32,opt,name=remove_empty_directories,json=removeEmptyDirectories,proto3" json:"remove_empty_directories,omitempty"`
	// If a transfer is interrupted or fails to finish, this policy directs the transfer
	//
	//	to resume without retransferring the files. Allowable values:
	//
	// "none"            – always re-transfer the entire file
	// "attributes"      – compare file attributes and resume if they match, and re-transfer if they do not
	// "sparse_checksum" – compare file attributes and the sparse file checksums; resume if they match, and
	//
	//	re-transfer if they do not
	//
	// "full_checksum"   – compare file attributes and the full file checksums; resume if they match, and re-transfer
	//
	//	if they do not.
	ResumePolicy string `protobuf:"bytes,33,opt,name=resume_policy,json=resumePolicy,proto3" json:"resume_policy,omitempty"`
	// Total time committed to retrying the transfer
	RetryDuration int64 `protobuf:"varint,34,opt,name=retry_duration,json=retryDuration,proto3" json:"retry_duration,omitempty"`
	// The file ID of the source root directory. Required if using bearer token authorization for the source node.
	SourceRootId string `protobuf:"bytes,35,opt,name=source_root_id,json=sourceRootId,proto3" json:"source_root_id,omitempty"`
	// TCP port that initiates the transfer session
	SshPort int64 `protobuf:"varint,36,opt,name=ssh_port,json=sshPort,proto3" json:"ssh_port,omitempty"`
	// Private key for SSH
	SshPrivateKey string `protobuf:"bytes,37,opt,name=ssh_private_key,json=sshPrivateKey,proto3" json:"ssh_private_key,omitempty"`
	// Private key passphrase for SSH
	SshPrivateKeyPassphrase string `protobuf:"bytes,38,opt,name=ssh_private_key_passphrase,json=sshPrivateKeyPassphrase,proto3" json:"ssh_private_key_passphrase,omitempty"`
	// The method for processing symbolic links.
	// Allowable values: follow, copy, copy+force, skip
	SymlinkPolicy string `protobuf:"bytes,39,opt,name=symlink_policy,json=symlinkPolicy,proto3" json:"symlink_policy,omitempty"`
	// Tags to include in the transfer
	Tags string `protobuf:"bytes,40,opt,name=tags,proto3" json:"tags,omitempty"`
	// Tags to include in the transfer (base64 encoded)
	Tags64 string `protobuf:"bytes,41,opt,name=tags64,proto3" json:"tags64,omitempty"`
	// Maximum target rate for incoming transfers, in kilobits per second.
	TargetRateCapKbps int64 `protobuf:"varint,42,opt,name=target_rate_cap_kbps,json=targetRateCapKbps,proto3" json:"target_rate_cap_kbps,omitempty"`
	// Ideal transfer rate, in kilobits per second. There is no default value.
	TargetRateKbps int64 `protobuf:"varint,43,opt,name=target_rate_kbps,json=targetRateKbps,proto3" json:"target_rate_kbps,omitempty"`
	// Title of the transfer
	Title string `protobuf:"bytes,44,opt,name=title,proto3" json:"title,omitempty"`
	// Token to authenticate the transfer.
	// For details see the 'Authentication and authorization' section in the IBM Aspera High Speed Transfer Server
	// admin guide.
	Token string `protobuf:"bytes,45,opt,name=token,proto3" json:"token,omitempty"`
	// Use ascp4 as the transfer engine. Allowable values: true, false.
	UseAscp4 bool `protobuf:"varint,46,opt,name=use_ascp4,json=useAscp4,proto3" json:"use_ascp4,omitempty"`
	// Proxy for communications between the remote server and the (local) client.
	FaspProxy *FASPProxy `protobuf:"bytes,47,opt,name=fasp_proxy,json=faspProxy,proto3" json:"fasp_proxy,omitempty"`
	// Destination root directory
	DestinationRoot string `protobuf:"bytes,48,opt,name=destination_root,json=destinationRoot,proto3" json:"destination_root,omitempty"`
	// Source root directory
	SourceRoot string `protobuf:"bytes,49,opt,name=source_root,json=sourceRoot,proto3" json:"source_root,omitempty"`
	// The highest minimum rate that an incoming transfer can request, in kilobits per second.
	// Client minimum rate requests that exceed the minimum rate cap are ignored. The default
	// value of unlimited applies no cap to the minimum rate. (Default: 0)
	MinRateCapKbps int64 `protobuf:"varint,50,opt,name=min_rate_cap_kbps,json=minRateCapKbps,proto3" json:"min_rate_cap_kbps,omitempty"`
	// If true, lock the rate policy to the default value
	// Allowable values: true, false.
	LockRatePolicy bool `protobuf:"varint,51,opt,name=lock_rate_policy,json=lockRatePolicy,proto3" json:"lock_rate_policy,omitempty"`
	// If true, lock the target transfer rate to the default value set for target_rate_kbps.
	// If false, users can adjust the transfer rate up to the value set for target_rate_cap_kbps.
	LockTargetRateKbps bool `protobuf:"varint,52,opt,name=lock_target_rate_kbps,json=lockTargetRateKbps,proto3" json:"lock_target_rate_kbps,omitempty"`
	// If true, lock the minimum transfer rate to the value set for min_rate_kbps.
	// If false, users can adjust the transfer rate up to the value set for target_rate_cap_kbps.
	LockMinRateKbps bool `protobuf:"varint,53,opt,name=lock_min_rate_kbps,json=lockMinRateKbps,proto3" json:"lock_min_rate_kbps,omitempty"`
	// The folder name below which the directory structure is preserved (base64 encoded)
	SrcBase64 string `protobuf:"bytes,54,opt,name=src_base64,json=srcBase64,proto3" json:"src_base64,omitempty"`
	// Configuration parameters for IBM Cloud Object Storage (ICOS)
	Icos *ICOSSpec `protobuf:"bytes,55,opt,name=icos,proto3" json:"icos,omitempty"`
	// Configuration parameters for a call to the Node API
	NodeApi *NodeAPISpec `protobuf:"bytes,56,opt,name=node_api,json=nodeApi,proto3" json:"node_api,omitempty"`
	// Apply the local docroot. This option is used to avoid entering object storage
	// access credentials in the command line. Allowable values: true, false.
	ApplyLocalDocroot bool `protobuf:"varint,57,opt,name=apply_local_docroot,json=applyLocalDocroot,proto3" json:"apply_local_docroot,omitempty"`
	// Preserve access control lists. Allowable values: none, native, metafile.
	PreserveAcls string `protobuf:"bytes,58,opt,name=preserve_acls,json=preserveAcls,proto3" json:"preserve_acls,omitempty"`
	// Preserve remote access control lists. Allowable values: none, native, metafile
	PreserveRemoteAcls string `protobuf:"bytes,59,opt,name=preserve_remote_acls,json=preserveRemoteAcls,proto3" json:"preserve_remote_acls,omitempty"`
	// Preserve the user ID for a file owner
	PreserveFileOwnerUid bool `protobuf:"varint,60,opt,name=preserve_file_owner_uid,json=preserveFileOwnerUid,proto3" json:"preserve_file_owner_uid,omitempty"`
	// Preserve the group ID for a file owner
	PreserveFileOwnerGid bool `protobuf:"varint,61,opt,name=preserve_file_owner_gid,json=preserveFileOwnerGid,proto3" json:"preserve_file_owner_gid,omitempty"`
	// Preserve the extended attributes. Allowable values: none, native, metafile
	PreserveExtendedAttrs string `protobuf:"bytes,62,opt,name=preserve_extended_attrs,json=preserveExtendedAttrs,proto3" json:"preserve_extended_attrs,omitempty"`
	// Preserve the extended attributes for a remote server. Allowable values: none,
	// native, metafile
	PreserveRemoteExtendedAttrs string `protobuf:"bytes,63,opt,name=preserve_remote_extended_attrs,json=preserveRemoteExtendedAttrs,proto3" json:"preserve_remote_extended_attrs,omitempty"`
	// Preserve the time logged for when the source file was accessed
	PreserveSourceAccessTime bool `protobuf:"varint,64,opt,name=preserve_source_access_time,json=preserveSourceAccessTime,proto3" json:"preserve_source_access_time,omitempty"`
	// Remove empty source subdirectories and remove the source directory itself, if empty
	RemoveEmptySourceDir bool `protobuf:"varint,65,opt,name=remove_empty_source_dir,json=removeEmptySourceDir,proto3" json:"remove_empty_source_dir,omitempty"`
	// Rename the file instead of overwriting it. Allowable values: true, false.
	SaveBeforeOverwrite bool `protobuf:"varint,66,opt,name=save_before_overwrite,json=saveBeforeOverwrite,proto3" json:"save_before_overwrite,omitempty"`
	// Don't check for duplicate files at the destination. Allowable values: true, false.
	SkipDuplicateCheck bool `protobuf:"varint,67,opt,name=skip_duplicate_check,json=skipDuplicateCheck,proto3" json:"skip_duplicate_check,omitempty"`
	// All assets other than files, directories and symbolic links are considered special.
	// A transfer will fail if the user attempts to transfer special assets.
	// If true, ascp skips special assets and proceeds with the transfer of all other assets.
	SkipSpecialFiles bool `protobuf:"varint,68,opt,name=skip_special_files,json=skipSpecialFiles,proto3" json:"skip_special_files,omitempty"`
}

func (x *TransferSpecV1) Reset() {
	*x = TransferSpecV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferSpecV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSpecV1) ProtoMessage() {}

func (x *TransferSpecV1) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSpecV1.ProtoReflect.Descriptor instead.
func (*TransferSpecV1) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{44}
}

func (x *TransferSpecV1) GetCipher() string {
	if x != nil {
		return x.Cipher
	}
	return ""
}

func (x *TransferSpecV1) GetContentProtection() string {
	if x != nil {
		return x.ContentProtection
	}
	return ""
}

func (x *TransferSpecV1) GetContentProtectionPassword() string {
	if x != nil {
		return x.ContentProtectionPassword
	}
	return ""
}

func (x *TransferSpecV1) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *TransferSpecV1) GetCreateDir() bool {
	if x != nil {
		return x.CreateDir
	}
	return false
}

func (x *TransferSpecV1) GetDeleteBeforeTransfer() bool {
	if x != nil {
		return x.DeleteBeforeTransfer
	}
	return false
}

func (x *TransferSpecV1) GetDeleteSource() bool {
	if x != nil {
		return x.DeleteSource
	}
	return false
}

func (x *TransferSpecV1) GetDestinationRootId() string {
	if x != nil {
		return x.DestinationRootId
	}
	return ""
}

func (x *TransferSpecV1) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *TransferSpecV1) GetExcludeNewerThan() string {
	if x != nil {
		return x.ExcludeNewerThan
	}
	return ""
}

func (x *TransferSpecV1) GetExcludeOlderThan() string {
	if x != nil {
		return x.ExcludeOlderThan
	}
	return ""
}

func (x *TransferSpecV1) GetFaspPort() int64 {
	if x != nil {
		return x.FaspPort
	}
	return 0
}

func (x *TransferSpecV1) GetHttpFallback() bool {
	if x != nil {
		return x.HttpFallback
	}
	return false
}

func (x *TransferSpecV1) GetHttpFallbackPort() int64 {
	if x != nil {
		return x.HttpFallbackPort
	}
	return 0
}

func (x *TransferSpecV1) GetHttpsFallbackPort() int64 {
	if x != nil {
		return x.HttpsFallbackPort
	}
	return 0
}

func (x *TransferSpecV1) GetMoveAfterTransfer() string {
	if x != nil {
		return x.MoveAfterTransfer
	}
	return ""
}

func (x *TransferSpecV1) GetMultiSession() int64 {
	if x != nil {
		return x.MultiSession
	}
	return 0
}

func (x *TransferSpecV1) GetMultiSessionThreshold() int64 {
	if x != nil {
		return x.MultiSessionThreshold
	}
	return 0
}

func (x *TransferSpecV1) GetOverwrite() string {
	if x != nil {
		return x.Overwrite
	}
	return ""
}

func (x *TransferSpecV1) GetPaths() []*Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *TransferSpecV1) GetPrecalculateJobSize() bool {
	if x != nil {
		return x.PrecalculateJobSize
	}
	return false
}

func (x *TransferSpecV1) GetPreserveAccessTime() bool {
	if x != nil {
		return x.PreserveAccessTime
	}
	return false
}

func (x *TransferSpecV1) GetPreserveCreationTime() bool {
	if x != nil {
		return x.PreserveCreationTime
	}
	return false
}

func (x *TransferSpecV1) GetPreserveModificationTime() bool {
	if x != nil {
		return x.PreserveModificationTime
	}
	return false
}

func (x *TransferSpecV1) GetPreserveTimes() bool {
	if x != nil {
		return x.PreserveTimes
	}
	return false
}

func (x *TransferSpecV1) GetRatePolicy() string {
	if x != nil {
		return x.RatePolicy
	}
	return ""
}

func (x *TransferSpecV1) GetRemoteAccessKey() string {
	if x != nil {
		return x.RemoteAccessKey
	}
	return ""
}

func (x *TransferSpecV1) GetRemoteHost() string {
	if x != nil {
		return x.RemoteHost
	}
	return ""
}

func (x *TransferSpecV1) GetRemotePassword() string {
	if x != nil {
		return x.RemotePassword
	}
	return ""
}

func (x *TransferSpecV1) GetRemoteUser() string {
	if x != nil {
		return x.RemoteUser
	}
	return ""
}

func (x *TransferSpecV1) GetRemoveAfterTransfer() bool {
	if x != nil {
		return x.RemoveAfterTransfer
	}
	return false
}

func (x *TransferSpecV1) GetRemoveEmptyDirectories() bool {
	if x != nil {
		return x.RemoveEmptyDirectories
	}
	return false
}

func (x *TransferSpecV1) GetResumePolicy() string {
	if x != nil {
		return x.ResumePolicy
	}
	return ""
}

func (x *TransferSpecV1) GetRetryDuration() int64 {
	if x != nil {
		return x.RetryDuration
	}
	return 0
}

func (x *TransferSpecV1) GetSourceRootId() string {
	if x != nil {
		return x.SourceRootId
	}
	return ""
}

func (x *TransferSpecV1) GetSshPort() int64 {
	if x != nil {
		return x.SshPort
	}
	return 0
}

func (x *TransferSpecV1) GetSshPrivateKey() string {
	if x != nil {
		return x.SshPrivateKey
	}
	return ""
}

func (x *TransferSpecV1) GetSshPrivateKeyPassphrase() string {
	if x != nil {
		return x.SshPrivateKeyPassphrase
	}
	return ""
}

func (x *TransferSpecV1) GetSymlinkPolicy() string {
	if x != nil {
		return x.SymlinkPolicy
	}
	return ""
}

func (x *TransferSpecV1) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *TransferSpecV1) GetTags64() string {
	if x != nil {
		return x.Tags64
	}
	return ""
}

func (x *TransferSpecV1) GetTargetRateCapKbps() int64 {
	if x != nil {
		return x.TargetRateCapKbps
	}
	return 0
}

func (x *TransferSpecV1) GetTargetRateKbps() int64 {
	if x != nil {
		return x.TargetRateKbps
	}
	return 0
}

func (x *TransferSpecV1) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TransferSpecV1) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TransferSpecV1) GetUseAscp4() bool {
	if x != nil {
		return x.UseAscp4
	}
	return false
}

func (x *TransferSpecV1) GetFaspProxy() *FASPProxy {
	if x != nil {
		return x.FaspProxy
	}
	return nil
}

func (x *TransferSpecV1) GetDestinationRoot() string {
	if x != nil {
		return x.DestinationRoot
	}
	return ""
}

func (x *TransferSpecV1) GetSourceRoot() string {
	if x != nil {
		return x.SourceRoot
	}
	return ""
}

func (x *TransferSpecV1) GetMinRateCapKbps() int64 {
	if x != nil {
		return x.MinRateCapKbps
	}
	return 0
}

func (x *TransferSpecV1) GetLockRatePolicy() bool {
	if x != nil {
		return x.LockRatePolicy
	}
	return false
}

func (x *TransferSpecV1) GetLockTargetRateKbps() bool {
	if x != nil {
		return x.LockTargetRateKbps
	}
	return false
}

func (x *TransferSpecV1) GetLockMinRateKbps() bool {
	if x != nil {
		return x.LockMinRateKbps
	}
	return false
}

func (x *TransferSpecV1) GetSrcBase64() string {
	if x != nil {
		return x.SrcBase64
	}
	return ""
}

func (x *TransferSpecV1) GetIcos() *ICOSSpec {
	if x != nil {
		return x.Icos
	}
	return nil
}

func (x *TransferSpecV1) GetNodeApi() *NodeAPISpec {
	if x != nil {
		return x.NodeApi
	}
	return nil
}

func (x *TransferSpecV1) GetApplyLocalDocroot() bool {
	if x != nil {
		return x.ApplyLocalDocroot
	}
	return false
}

func (x *TransferSpecV1) GetPreserveAcls() string {
	if x != nil {
		return x.PreserveAcls
	}
	return ""
}

func (x *TransferSpecV1) GetPreserveRemoteAcls() string {
	if x != nil {
		return x.PreserveRemoteAcls
	}
	return ""
}

func (x *TransferSpecV1) GetPreserveFileOwnerUid() bool {
	if x != nil {
		return x.PreserveFileOwnerUid
	}
	return false
}

func (x *TransferSpecV1) GetPreserveFileOwnerGid() bool {
	if x != nil {
		return x.PreserveFileOwnerGid
	}
	return false
}

func (x *TransferSpecV1) GetPreserveExtendedAttrs() string {
	if x != nil {
		return x.PreserveExtendedAttrs
	}
	return ""
}

func (x *TransferSpecV1) GetPreserveRemoteExtendedAttrs() string {
	if x != nil {
		return x.PreserveRemoteExtendedAttrs
	}
	return ""
}

func (x *TransferSpecV1) GetPreserveSourceAccessTime() bool {
	if x != nil {
		return x.PreserveSourceAccessTime
	}
	return false
}

func (x *TransferSpecV1) GetRemoveEmptySourceDir() bool {
	if x != nil {
		return x.RemoveEmptySourceDir
	}
	return false
}

func (x *TransferSpecV1) GetSaveBeforeOverwrite() bool {
	if x != nil {
		return x.SaveBeforeOverwrite
	}
	return false
}

func (x *TransferSpecV1) GetSkipDuplicateCheck() bool {
	if x != nil {
		return x.SkipDuplicateCheck
	}
	return false
}

func (x *TransferSpecV1) GetSkipSpecialFiles() bool {
	if x != nil {
		return x.SkipSpecialFiles
	}
	return false
}

// Information about the transfer path
type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source path for the transfer
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// Destination path for the transfer
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{45}
}

func (x *Path) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Path) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

// Access parameters for the Proxy that coordinates communications between the remote server and the (local) client.
type FASPProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of proxy server
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Username for the proxy user
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Password for the proxy user
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *FASPProxy) Reset() {
	*x = FASPProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FASPProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FASPProxy) ProtoMessage() {}

func (x *FASPProxy) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FASPProxy.ProtoReflect.Descriptor instead.
func (*FASPProxy) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{46}
}

func (x *FASPProxy) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FASPProxy) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FASPProxy) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// The transfer specification (transferSpec) contains all components needed to initiate, monitor, and control transfers.
// TransferSpecv2 allows you to construct a custom transfer specification. You only need to configure the modules (such as
// Security or Transport) and parameters that are essential for your transfers.
type TransferSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters that define transfer initiation, including SSH
	SessionInitiation *Initiation `protobuf:"bytes,1,opt,name=session_initiation,json=sessionInitiation,proto3" json:"session_initiation,omitempty"`
	// Parameters that define security for the transfer
	Security *Security `protobuf:"bytes,2,opt,name=security,proto3" json:"security,omitempty"`
	// Parameters that define asset tracking for the transfer, such as tags
	Tracking *Tracking `protobuf:"bytes,3,opt,name=tracking,proto3" json:"tracking,omitempty"`
	// Parameters that define the handling of files and directories being transferred
	FileSystem *Filesystem `protobuf:"bytes,4,opt,name=file_system,json=fileSystem,proto3" json:"file_system,omitempty"`
	// Parameters that define rate policy and transfer rate
	Transport *Transport `protobuf:"bytes,5,opt,name=transport,proto3" json:"transport,omitempty"`
	// Parameters that define source and location for the transfer
	Assets *Assets `protobuf:"bytes,6,opt,name=assets,proto3" json:"assets,omitempty"`
	// Direction of the transfer, whether send (upload) or receive (download)
	Direction string `protobuf:"bytes,7,opt,name=direction,proto3" json:"direction,omitempty"`
	// Name of the remote server
	RemoteHost string `protobuf:"bytes,8,opt,name=remote_host,json=remoteHost,proto3" json:"remote_host,omitempty"`
	// Name assigned to the transfer
	Title string `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *TransferSpecV2) Reset() {
	*x = TransferSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSpecV2) ProtoMessage() {}

func (x *TransferSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSpecV2.ProtoReflect.Descriptor instead.
func (*TransferSpecV2) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{47}
}

func (x *TransferSpecV2) GetSessionInitiation() *Initiation {
	if x != nil {
		return x.SessionInitiation
	}
	return nil
}

func (x *TransferSpecV2) GetSecurity() *Security {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *TransferSpecV2) GetTracking() *Tracking {
	if x != nil {
		return x.Tracking
	}
	return nil
}

func (x *TransferSpecV2) GetFileSystem() *Filesystem {
	if x != nil {
		return x.FileSystem
	}
	return nil
}

func (x *TransferSpecV2) GetTransport() *Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *TransferSpecV2) GetAssets() *Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *TransferSpecV2) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *TransferSpecV2) GetRemoteHost() string {
	if x != nil {
		return x.RemoteHost
	}
	return ""
}

func (x *TransferSpecV2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Elements of transfer initiation
type Initiation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters relating to SSH
	Ssh *SSHSpec `protobuf:"bytes,1,opt,name=ssh,proto3" json:"ssh,omitempty"`
	// Parameters relating to IBM Cloud Object Storage
	Icos *ICOSSpec `protobuf:"bytes,2,opt,name=icos,proto3" json:"icos,omitempty"`
	// Configuration parameters for a call to the Node API
	NodeApi *NodeAPISpec `protobuf:"bytes,3,opt,name=node_api,json=nodeApi,proto3" json:"node_api,omitempty"`
}

func (x *Initiation) Reset() {
	*x = Initiation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Initiation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Initiation) ProtoMessage() {}

func (x *Initiation) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Initiation.ProtoReflect.Descriptor instead.
func (*Initiation) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{48}
}

func (x *Initiation) GetSsh() *SSHSpec {
	if x != nil {
		return x.Ssh
	}
	return nil
}

func (x *Initiation) GetIcos() *ICOSSpec {
	if x != nil {
		return x.Icos
	}
	return nil
}

func (x *Initiation) GetNodeApi() *NodeAPISpec {
	if x != nil {
		return x.NodeApi
	}
	return nil
}

// SSH Configuration
type SSHSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TCP port that initiates the transfer session.
	SshPort int64 `protobuf:"varint,1,opt,name=ssh_port,json=sshPort,proto3" json:"ssh_port,omitempty"`
	// Password for the remote user
	RemotePassword string `protobuf:"bytes,2,opt,name=remote_password,json=remotePassword,proto3" json:"remote_password,omitempty"`
	// Remote user's username
	RemoteUser string `protobuf:"bytes,3,opt,name=remote_user,json=remoteUser,proto3" json:"remote_user,omitempty"`
	// Private key for SSH
	SshPrivateKey string `protobuf:"bytes,4,opt,name=ssh_private_key,json=sshPrivateKey,proto3" json:"ssh_private_key,omitempty"`
	// Private key passphrase for SSH
	SshPrivateKeyPassphrase string `protobuf:"bytes,5,opt,name=ssh_private_key_passphrase,json=sshPrivateKeyPassphrase,proto3" json:"ssh_private_key_passphrase,omitempty"`
	// Public SSH key of the server
	SshFingerprint string `protobuf:"bytes,6,opt,name=ssh_fingerprint,json=sshFingerprint,proto3" json:"ssh_fingerprint,omitempty"`
}

func (x *SSHSpec) Reset() {
	*x = SSHSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHSpec) ProtoMessage() {}

func (x *SSHSpec) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHSpec.ProtoReflect.Descriptor instead.
func (*SSHSpec) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{49}
}

func (x *SSHSpec) GetSshPort() int64 {
	if x != nil {
		return x.SshPort
	}
	return 0
}

func (x *SSHSpec) GetRemotePassword() string {
	if x != nil {
		return x.RemotePassword
	}
	return ""
}

func (x *SSHSpec) GetRemoteUser() string {
	if x != nil {
		return x.RemoteUser
	}
	return ""
}

func (x *SSHSpec) GetSshPrivateKey() string {
	if x != nil {
		return x.SshPrivateKey
	}
	return ""
}

func (x *SSHSpec) GetSshPrivateKeyPassphrase() string {
	if x != nil {
		return x.SshPrivateKeyPassphrase
	}
	return ""
}

func (x *SSHSpec) GetSshFingerprint() string {
	if x != nil {
		return x.SshFingerprint
	}
	return ""
}

// Configuration for IBM Cloud Object Storage
type ICOSSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API key for IBM Cloud Object Storage
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// CRN (cloud resource name) for the bucket
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// Instance ID for the IBM service
	IbmServiceInstanceId string `protobuf:"bytes,3,opt,name=ibm_service_instance_id,json=ibmServiceInstanceId,proto3" json:"ibm_service_instance_id,omitempty"`
	// Endpoint for the IBM service
	IbmServiceEndpoint string `protobuf:"bytes,4,opt,name=ibm_service_endpoint,json=ibmServiceEndpoint,proto3" json:"ibm_service_endpoint,omitempty"`
}

func (x *ICOSSpec) Reset() {
	*x = ICOSSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICOSSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICOSSpec) ProtoMessage() {}

func (x *ICOSSpec) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICOSSpec.ProtoReflect.Descriptor instead.
func (*ICOSSpec) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{50}
}

func (x *ICOSSpec) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ICOSSpec) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *ICOSSpec) GetIbmServiceInstanceId() string {
	if x != nil {
		return x.IbmServiceInstanceId
	}
	return ""
}

func (x *ICOSSpec) GetIbmServiceEndpoint() string {
	if x != nil {
		return x.IbmServiceEndpoint
	}
	return ""
}

// Values for the Node API header. The Node API is used to initiate and manage Aspera transfers.
type NodeAPIHeaderSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node API header key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value for Node API header key
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NodeAPIHeaderSpec) Reset() {
	*x = NodeAPIHeaderSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAPIHeaderSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAPIHeaderSpec) ProtoMessage() {}

func (x *NodeAPIHeaderSpec) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAPIHeaderSpec.ProtoReflect.Descriptor instead.
func (*NodeAPIHeaderSpec) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{51}
}

func (x *NodeAPIHeaderSpec) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeAPIHeaderSpec) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Information for the call to the Node API, which initiates and manages Aspera transfers.
type NodeAPISpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL for call to Node API
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Headers for the call to the Node API
	Headers []*NodeAPIHeaderSpec `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *NodeAPISpec) Reset() {
	*x = NodeAPISpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAPISpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAPISpec) ProtoMessage() {}

func (x *NodeAPISpec) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAPISpec.ProtoReflect.Descriptor instead.
func (*NodeAPISpec) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{52}
}

func (x *NodeAPISpec) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NodeAPISpec) GetHeaders() []*NodeAPIHeaderSpec {
	if x != nil {
		return x.Headers
	}
	return nil
}

// Security configuration
type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Password for encryption of transferred assets
	ContentProtectionPassword string `protobuf:"bytes,1,opt,name=content_protection_password,json=contentProtectionPassword,proto3" json:"content_protection_password,omitempty"`
	// Access key for a remote server
	RemoteAccessKey string `protobuf:"bytes,2,opt,name=remote_access_key,json=remoteAccessKey,proto3" json:"remote_access_key,omitempty"`
	// Token to authenticate the transfer.
	// For details see the 'Authentication and authorization' section in the IBM Aspera High Speed Transfer Server
	// admin guide.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// *
	// Cipher algorithm to apply during the transfer. Valid values are:
	// aes-128, aes-192, aes-256, aes-128-cfb, aes-192-cfb, aes-256-cfb,
	// aes-128-gcm, aes-192-gcm, aes-256-gcm, none
	Cipher string `protobuf:"bytes,4,opt,name=cipher,proto3" json:"cipher,omitempty"`
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{53}
}

func (x *Security) GetContentProtectionPassword() string {
	if x != nil {
		return x.ContentProtectionPassword
	}
	return ""
}

func (x *Security) GetRemoteAccessKey() string {
	if x != nil {
		return x.RemoteAccessKey
	}
	return ""
}

func (x *Security) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Security) GetCipher() string {
	if x != nil {
		return x.Cipher
	}
	return ""
}

// Tracking parameters
type Tracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All cookies included in the transfer
	Cookie string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// All tags included in the transfer
	Tags string `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	// All tags included in the transfer (base64 encoded)
	Tags64 string `protobuf:"bytes,3,opt,name=tags64,proto3" json:"tags64,omitempty"`
}

func (x *Tracking) Reset() {
	*x = Tracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracking) ProtoMessage() {}

func (x *Tracking) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracking.ProtoReflect.Descriptor instead.
func (*Tracking) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{54}
}

func (x *Tracking) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *Tracking) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Tracking) GetTags64() string {
	if x != nil {
		return x.Tags64
	}
	return ""
}

// Policies related to transfer assets
type Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateDir bool `protobuf:"varint,1,opt,name=create_dir,json=createDir,proto3" json:"create_dir,omitempty"` // Create a directory at the transfer destination
	// Before transfer, delete files that exist at the destination but not at the source.
	// The source and destination arguments must be directories that have matching names.
	// Objects on the destination that have the same name but different type or size as
	// objects on the source are not deleted.
	DeleteBeforeTransfer bool `protobuf:"varint,2,opt,name=delete_before_transfer,json=deleteBeforeTransfer,proto3" json:"delete_before_transfer,omitempty"`
	// Exclude files (but not directories) that are newer than a specific time from the transfer,
	// based on when the file was last modified. Express in ISO 8601 format (for example,
	// 2006-01-02T15:04:05Z) or as number of seconds elapsed since 00:00:00 UTC on 1 January 1970.
	ExcludeNewerThan string `protobuf:"bytes,3,opt,name=exclude_newer_than,json=excludeNewerThan,proto3" json:"exclude_newer_than,omitempty"`
	// Exclude files (but not directories) that are older than a specific time from the transfer,
	// based on when the file was last modified. Express in ISO 8601 format (for example,
	// 2006-01-02T15:04:05Z) or as number of seconds elapsed since 00:00:00 UTC on 1 January 1970.
	ExcludeOlderThan string `protobuf:"bytes,4,opt,name=exclude_older_than,json=excludeOlderThan,proto3" json:"exclude_older_than,omitempty"`
	// Move source files under path the path after transfer success.
	MoveAfterTransfer string `protobuf:"bytes,5,opt,name=move_after_transfer,json=moveAfterTransfer,proto3" json:"move_after_transfer,omitempty"`
	// Overwrite files at the destination with source files of the same name based on the policy:
	// - always – Always overwrite the file.
	// - never – Never overwrite the file. If the destination contains partial files that are older
	// or the same as the source files and resume is enabled, the partial files resume transfer.
	// Partial files with checksums or sizes that differ from the source files are not overwritten.
	// - diff – Overwrite the file if it is different from the source, depending on the compare method
	// (default is size). If the destination is object storage, diff has the same effect as always.
	// If resume is not enabled, partial files are overwritten if they are different from the source,
	// otherwise they are skipped. If resume is enabled, only partial files with different sizes or
	// checksums from the source are overwritten; otherwise, files resume.
	// - diff+older – Overwrite the file if it is older and different from the source, depending on
	// the compare method (default is size). If resume is not enabled, partial files are overwritten
	// if they are older and different from the source, otherwise they are skipped. If resume is enabled,
	// only partial files that are different and older than the source are overwritten, otherwise they
	// are resumed.
	// - older – Overwrite the file if its timestamp is older than the source timestamp.
	//
	// If you set an overwrite policy of diff or diff+older, difference is determined by the value set
	// for resume_policy:
	// "none" - the source and destination files are always considered different and the destination
	//
	//	file is always overwritten
	//
	// "attributes" - the source and destination files are compared based on file attributes
	// "sparse_checksum" - the source and destination files are compared based on sparse checksums,
	//
	//	(currently file size)
	//
	// "full_checksum" - the source and destination files are compared based on full checksums
	Overwrite string `protobuf:"bytes,6,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	// Restore the access time of the source file to the last access prior to transfer,
	// which the source considers an access.
	PrecalculateJobSize bool `protobuf:"varint,7,opt,name=precalculate_job_size,json=precalculateJobSize,proto3" json:"precalculate_job_size,omitempty"`
	// Preserve the time the file was last accessed (read or write access) on the source.
	PreserveAccessTime bool `protobuf:"varint,8,opt,name=preserve_access_time,json=preserveAccessTime,proto3" json:"preserve_access_time,omitempty"`
	// Preserve timestamp for when a file was created
	PreserveCreationTime bool `protobuf:"varint,9,opt,name=preserve_creation_time,json=preserveCreationTime,proto3" json:"preserve_creation_time,omitempty"`
	// Preserve the time the object was last modified (write access) on the source.
	PreserveModificationTime bool `protobuf:"varint,10,opt,name=preserve_modification_time,json=preserveModificationTime,proto3" json:"preserve_modification_time,omitempty"`
	PreserveTimes            bool `protobuf:"varint,11,opt,name=preserve_times,json=preserveTimes,proto3" json:"preserve_times,omitempty"`
	// Remove files at the source of the transfer after the transfer completes successfully
	RemoveAfterTransfer bool `protobuf:"varint,12,opt,name=remove_after_transfer,json=removeAfterTransfer,proto3" json:"remove_after_transfer,omitempty"`
	// Remove empty subdirectories at the source of the transfer
	RemoveEmptyDirectories bool `protobuf:"varint,13,opt,name=remove_empty_directories,json=removeEmptyDirectories,proto3" json:"remove_empty_directories,omitempty"`
	// If a transfer is interrupted or fails to finish, this policy directs the transfer
	//
	//	to resume without retransferring the files. Allowable values:
	//
	// "none"            – always re-transfer the entire file
	// "attributes"      – compare file attributes and resume if they match, and re-transfer if they do not
	// "sparse_checksum" – compare file attributes and the sparse file checksums; resume if they match, and
	//
	//	re-transfer if they do not
	//
	// "full_checksum"   – compare file attributes and the full file checksums; resume if they match, and re-transfer
	//
	//	if they do not.
	ResumePolicy string `protobuf:"bytes,14,opt,name=resume_policy,json=resumePolicy,proto3" json:"resume_policy,omitempty"`
	// The method for processing symbolic links. Allowable values:
	// follow, copy, copy+force, skip
	SymlinkPolicy string `protobuf:"bytes,15,opt,name=symlink_policy,json=symlinkPolicy,proto3" json:"symlink_policy,omitempty"`
	// Enable checksum reporting for transferred files by specifying the hash to use. Allowable values:
	// sha-512, sha-384, sha-256, sha1, md5. (Default: none)
	ChecksumType string `protobuf:"bytes,16,opt,name=checksum_type,json=checksumType,proto3" json:"checksum_type,omitempty"`
	// The folder name below which the directory structure is preserved (base64 encoded)
	SrcBase64 string `protobuf:"bytes,17,opt,name=src_base64,json=srcBase64,proto3" json:"src_base64,omitempty"`
	// Include files or directories from the transfer based on the specified pattern. Rules are
	// applied in the order in which they are encountered, from left to right. The following
	// symbols can be used in the pattern:
	//   - * (asterisk) represents zero or more characters in a string, for example *.tmp matches
	//     .tmp and abcde.tmp.
	//   - ? (question mark) represents a single character, for example t?p matches tmp but not temp.
	InclusionPatterns []*PathPattern `protobuf:"bytes,18,rep,name=inclusion_patterns,json=inclusionPatterns,proto3" json:"inclusion_patterns,omitempty"`
	// Exclude files or directories from the transfer based on the specified pattern. Rules are
	// applied in the order in which they are encountered, from left to right. The following
	// symbols can be used in the pattern:
	//   - * (asterisk) represents zero or more characters in a string, for example *.tmp matches
	//     .tmp and abcde.tmp.
	//   - ? (question mark) represents a single character, for example t?p matches tmp but not temp.
	ExclusionPatterns []*PathPattern `protobuf:"bytes,19,rep,name=exclusion_patterns,json=exclusionPatterns,proto3" json:"exclusion_patterns,omitempty"`
	// Apply the local docroot. This option is used to avoid entering object storage access
	// credentials in the command line. Allowable values: true, false.
	ApplyLocalDocroot bool `protobuf:"varint,20,opt,name=apply_local_docroot,json=applyLocalDocroot,proto3" json:"apply_local_docroot,omitempty"`
	// Preserve access control lists. Allowable values: none, native, metafile.
	PreserveAcls string `protobuf:"bytes,21,opt,name=preserve_acls,json=preserveAcls,proto3" json:"preserve_acls,omitempty"`
	// Preserve remote access control lists. Allowable values: none, native, metafile
	PreserveRemoteAcls string `protobuf:"bytes,22,opt,name=preserve_remote_acls,json=preserveRemoteAcls,proto3" json:"preserve_remote_acls,omitempty"`
	// Preserve the user ID for a file owner
	PreserveFileOwnerUid bool `protobuf:"varint,23,opt,name=preserve_file_owner_uid,json=preserveFileOwnerUid,proto3" json:"preserve_file_owner_uid,omitempty"`
	// Preserve the group ID for a file owner
	PreserveFileOwnerGid bool `protobuf:"varint,24,opt,name=preserve_file_owner_gid,json=preserveFileOwnerGid,proto3" json:"preserve_file_owner_gid,omitempty"`
	// Preserve the extended attributes. Allowable values: none, native, metafile
	PreserveExtendedAttrs string `protobuf:"bytes,25,opt,name=preserve_extended_attrs,json=preserveExtendedAttrs,proto3" json:"preserve_extended_attrs,omitempty"`
	// Preserve the extended attributes for a remote server. Allowable values: none, native, metafile
	PreserveRemoteExtendedAttrs string `protobuf:"bytes,26,opt,name=preserve_remote_extended_attrs,json=preserveRemoteExtendedAttrs,proto3" json:"preserve_remote_extended_attrs,omitempty"`
	// Preserve the time logged for when the source file was accessed
	PreserveSourceAccessTime bool `protobuf:"varint,27,opt,name=preserve_source_access_time,json=preserveSourceAccessTime,proto3" json:"preserve_source_access_time,omitempty"`
	// Remove empty source subdirectories and remove the source directory itself, if empty
	RemoveEmptySourceDir bool `protobuf:"varint,28,opt,name=remove_empty_source_dir,json=removeEmptySourceDir,proto3" json:"remove_empty_source_dir,omitempty"`
	// Rename the file instead of overwriting it. Allowable values: true, false.
	SaveBeforeOverwrite bool `protobuf:"varint,29,opt,name=save_before_overwrite,json=saveBeforeOverwrite,proto3" json:"save_before_overwrite,omitempty"`
	// Don't check for duplicate files at the destination. Allowable values: true, false.
	SkipDuplicateCheck bool `protobuf:"varint,30,opt,name=skip_duplicate_check,json=skipDuplicateCheck,proto3" json:"skip_duplicate_check,omitempty"`
	// All assets other than files, directories and symbolic links are considered special.
	// A transfer will fail if the user attempts to transfer special assets.
	// If true, ascp skips special assets and proceeds with the transfer of all other assets.
	SkipSpecialFiles bool `protobuf:"varint,31,opt,name=skip_special_files,json=skipSpecialFiles,proto3" json:"skip_special_files,omitempty"`
}

func (x *Filesystem) Reset() {
	*x = Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem) ProtoMessage() {}

func (x *Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem.ProtoReflect.Descriptor instead.
func (*Filesystem) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{55}
}

func (x *Filesystem) GetCreateDir() bool {
	if x != nil {
		return x.CreateDir
	}
	return false
}

func (x *Filesystem) GetDeleteBeforeTransfer() bool {
	if x != nil {
		return x.DeleteBeforeTransfer
	}
	return false
}

func (x *Filesystem) GetExcludeNewerThan() string {
	if x != nil {
		return x.ExcludeNewerThan
	}
	return ""
}

func (x *Filesystem) GetExcludeOlderThan() string {
	if x != nil {
		return x.ExcludeOlderThan
	}
	return ""
}

func (x *Filesystem) GetMoveAfterTransfer() string {
	if x != nil {
		return x.MoveAfterTransfer
	}
	return ""
}

func (x *Filesystem) GetOverwrite() string {
	if x != nil {
		return x.Overwrite
	}
	return ""
}

func (x *Filesystem) GetPrecalculateJobSize() bool {
	if x != nil {
		return x.PrecalculateJobSize
	}
	return false
}

func (x *Filesystem) GetPreserveAccessTime() bool {
	if x != nil {
		return x.PreserveAccessTime
	}
	return false
}

func (x *Filesystem) GetPreserveCreationTime() bool {
	if x != nil {
		return x.PreserveCreationTime
	}
	return false
}

func (x *Filesystem) GetPreserveModificationTime() bool {
	if x != nil {
		return x.PreserveModificationTime
	}
	return false
}

func (x *Filesystem) GetPreserveTimes() bool {
	if x != nil {
		return x.PreserveTimes
	}
	return false
}

func (x *Filesystem) GetRemoveAfterTransfer() bool {
	if x != nil {
		return x.RemoveAfterTransfer
	}
	return false
}

func (x *Filesystem) GetRemoveEmptyDirectories() bool {
	if x != nil {
		return x.RemoveEmptyDirectories
	}
	return false
}

func (x *Filesystem) GetResumePolicy() string {
	if x != nil {
		return x.ResumePolicy
	}
	return ""
}

func (x *Filesystem) GetSymlinkPolicy() string {
	if x != nil {
		return x.SymlinkPolicy
	}
	return ""
}

func (x *Filesystem) GetChecksumType() string {
	if x != nil {
		return x.ChecksumType
	}
	return ""
}

func (x *Filesystem) GetSrcBase64() string {
	if x != nil {
		return x.SrcBase64
	}
	return ""
}

func (x *Filesystem) GetInclusionPatterns() []*PathPattern {
	if x != nil {
		return x.InclusionPatterns
	}
	return nil
}

func (x *Filesystem) GetExclusionPatterns() []*PathPattern {
	if x != nil {
		return x.ExclusionPatterns
	}
	return nil
}

func (x *Filesystem) GetApplyLocalDocroot() bool {
	if x != nil {
		return x.ApplyLocalDocroot
	}
	return false
}

func (x *Filesystem) GetPreserveAcls() string {
	if x != nil {
		return x.PreserveAcls
	}
	return ""
}

func (x *Filesystem) GetPreserveRemoteAcls() string {
	if x != nil {
		return x.PreserveRemoteAcls
	}
	return ""
}

func (x *Filesystem) GetPreserveFileOwnerUid() bool {
	if x != nil {
		return x.PreserveFileOwnerUid
	}
	return false
}

func (x *Filesystem) GetPreserveFileOwnerGid() bool {
	if x != nil {
		return x.PreserveFileOwnerGid
	}
	return false
}

func (x *Filesystem) GetPreserveExtendedAttrs() string {
	if x != nil {
		return x.PreserveExtendedAttrs
	}
	return ""
}

func (x *Filesystem) GetPreserveRemoteExtendedAttrs() string {
	if x != nil {
		return x.PreserveRemoteExtendedAttrs
	}
	return ""
}

func (x *Filesystem) GetPreserveSourceAccessTime() bool {
	if x != nil {
		return x.PreserveSourceAccessTime
	}
	return false
}

func (x *Filesystem) GetRemoveEmptySourceDir() bool {
	if x != nil {
		return x.RemoveEmptySourceDir
	}
	return false
}

func (x *Filesystem) GetSaveBeforeOverwrite() bool {
	if x != nil {
		return x.SaveBeforeOverwrite
	}
	return false
}

func (x *Filesystem) GetSkipDuplicateCheck() bool {
	if x != nil {
		return x.SkipDuplicateCheck
	}
	return false
}

func (x *Filesystem) GetSkipSpecialFiles() bool {
	if x != nil {
		return x.SkipSpecialFiles
	}
	return false
}

// Values related to the transfer, including transfer policies
type Transport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port used for the transfer. (Default: 3301)
	FaspPort int64 `protobuf:"varint,1,opt,name=fasp_port,json=faspPort,proto3" json:"fasp_port,omitempty"`
	// Fields for configuring HTTP fallback in the transferSpec v2
	HttpFallback *HTTPFallback `protobuf:"bytes,2,opt,name=http_fallback,json=httpFallback,proto3" json:"http_fallback,omitempty"`
	// Fields for configuring the FASP proxy in the transferSpec v2. The FASP proxy coordinates
	// communications between the remote server and the (local) client.
	FaspProxy *FASPProxy `protobuf:"bytes,3,opt,name=fasp_proxy,json=faspProxy,proto3" json:"fasp_proxy,omitempty"`
	// Fields for configuring streaming in the transferSpec v2.
	Streaming *Streaming `protobuf:"bytes,4,opt,name=streaming,proto3" json:"streaming,omitempty"`
	// Split files across multiple ascp sessions to enable faster transfers.
	// Allowable values: true, false.
	MultiSession *MultiSession `protobuf:"bytes,5,opt,name=multi_session,json=multiSession,proto3" json:"multi_session,omitempty"`
	// Split files across multiple ascp sessions if their size is greater than or equal to the
	// specified value. Default: 0 (no files are split).
	MultiSessionThreshold int64 `protobuf:"varint,6,opt,name=multi_session_threshold,json=multiSessionThreshold,proto3" json:"multi_session_threshold,omitempty"`
	// The transfer rate policy to use when sharing bandwidth. Allowable values:
	// high - When sharing bandwidth, transfer at twice the rate of a transfer using a fair policy.
	// fair - (Default) Share bandwidth equally with other traffic.
	// low - Use only unused bandwidth.
	// fixed - Transfer at the target rate, regardless of the actual network capacity.
	// Do not share bandwidth. Aspera recommends that you do not use this setting except under special
	// circumstances, otherwise the destination storage can be damaged.
	RatePolicy string `protobuf:"bytes,7,opt,name=rate_policy,json=ratePolicy,proto3" json:"rate_policy,omitempty"`
	// If true, lock the rate policy to the default value
	// Allowable values: true, false.
	LockRatePolicy bool `protobuf:"varint,8,opt,name=lock_rate_policy,json=lockRatePolicy,proto3" json:"lock_rate_policy,omitempty"`
	// Maximum target rate for incoming transfers, in kilobits per second.
	TargetRateCapKbps int64 `protobuf:"varint,9,opt,name=target_rate_cap_kbps,json=targetRateCapKbps,proto3" json:"target_rate_cap_kbps,omitempty"`
	// Ideal transfer rate, in kilobits per second. There is no default value.
	TargetRateKbps int64 `protobuf:"varint,10,opt,name=target_rate_kbps,json=targetRateKbps,proto3" json:"target_rate_kbps,omitempty"`
	// The highest minimum rate that an incoming transfer can request, in kilobits per second.
	// Client minimum rate requests that exceed the minimum rate cap are ignored. The default
	// value of unlimited applies no cap to the minimum rate. (Default: unlimited)
	MinRateCapKbps int64 `protobuf:"varint,11,opt,name=min_rate_cap_kbps,json=minRateCapKbps,proto3" json:"min_rate_cap_kbps,omitempty"`
	// Minimum transfer rate (in Kbps)
	MinRateKbps int64 `protobuf:"varint,12,opt,name=min_rate_kbps,json=minRateKbps,proto3" json:"min_rate_kbps,omitempty"`
	// If true, lock the target transfer rate to the default value set for target_rate_kbps.
	// If false, users can adjust the transfer rate up to the value set for target_rate_cap_kbps.
	LockTargetRateKbps bool `protobuf:"varint,13,opt,name=lock_target_rate_kbps,json=lockTargetRateKbps,proto3" json:"lock_target_rate_kbps,omitempty"`
	// If true, lock the minimum transfer rate to the value set for min_rate_kbps.
	// If false, users can adjust the transfer rate up to the value set for target_rate_cap_kbps.
	LockMinRateKbps bool `protobuf:"varint,14,opt,name=lock_min_rate_kbps,json=lockMinRateKbps,proto3" json:"lock_min_rate_kbps,omitempty"`
	// Use the ascp4 engine. Allowable values: true, false.
	UseAscp4 bool `protobuf:"varint,15,opt,name=use_ascp4,json=useAscp4,proto3" json:"use_ascp4,omitempty"`
}

func (x *Transport) Reset() {
	*x = Transport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transport) ProtoMessage() {}

func (x *Transport) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transport.ProtoReflect.Descriptor instead.
func (*Transport) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{56}
}

func (x *Transport) GetFaspPort() int64 {
	if x != nil {
		return x.FaspPort
	}
	return 0
}

func (x *Transport) GetHttpFallback() *HTTPFallback {
	if x != nil {
		return x.HttpFallback
	}
	return nil
}

func (x *Transport) GetFaspProxy() *FASPProxy {
	if x != nil {
		return x.FaspProxy
	}
	return nil
}

func (x *Transport) GetStreaming() *Streaming {
	if x != nil {
		return x.Streaming
	}
	return nil
}

func (x *Transport) GetMultiSession() *MultiSession {
	if x != nil {
		return x.MultiSession
	}
	return nil
}

func (x *Transport) GetMultiSessionThreshold() int64 {
	if x != nil {
		return x.MultiSessionThreshold
	}
	return 0
}

func (x *Transport) GetRatePolicy() string {
	if x != nil {
		return x.RatePolicy
	}
	return ""
}

func (x *Transport) GetLockRatePolicy() bool {
	if x != nil {
		return x.LockRatePolicy
	}
	return false
}

func (x *Transport) GetTargetRateCapKbps() int64 {
	if x != nil {
		return x.TargetRateCapKbps
	}
	return 0
}

func (x *Transport) GetTargetRateKbps() int64 {
	if x != nil {
		return x.TargetRateKbps
	}
	return 0
}

func (x *Transport) GetMinRateCapKbps() int64 {
	if x != nil {
		return x.MinRateCapKbps
	}
	return 0
}

func (x *Transport) GetMinRateKbps() int64 {
	if x != nil {
		return x.MinRateKbps
	}
	return 0
}

func (x *Transport) GetLockTargetRateKbps() bool {
	if x != nil {
		return x.LockTargetRateKbps
	}
	return false
}

func (x *Transport) GetLockMinRateKbps() bool {
	if x != nil {
		return x.LockMinRateKbps
	}
	return false
}

func (x *Transport) GetUseAscp4() bool {
	if x != nil {
		return x.UseAscp4
	}
	return false
}

// Assets for the transfer
type Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File ID of the destination root directory. Required if using bearer token authorization for the destination node.
	DestinationRootId string `protobuf:"bytes,1,opt,name=destination_root_id,json=destinationRootId,proto3" json:"destination_root_id,omitempty"`
	// File ID of the source root directory
	SourceRootId string `protobuf:"bytes,2,opt,name=source_root_id,json=sourceRootId,proto3" json:"source_root_id,omitempty"`
	// Destination root directory
	DestinationRoot string `protobuf:"bytes,3,opt,name=destination_root,json=destinationRoot,proto3" json:"destination_root,omitempty"`
	// Source root directory
	SourceRoot string `protobuf:"bytes,4,opt,name=source_root,json=sourceRoot,proto3" json:"source_root,omitempty"`
	// Array of paths
	Paths []*Path `protobuf:"bytes,5,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *Assets) Reset() {
	*x = Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assets) ProtoMessage() {}

func (x *Assets) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assets.ProtoReflect.Descriptor instead.
func (*Assets) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{57}
}

func (x *Assets) GetDestinationRootId() string {
	if x != nil {
		return x.DestinationRootId
	}
	return ""
}

func (x *Assets) GetSourceRootId() string {
	if x != nil {
		return x.SourceRootId
	}
	return ""
}

func (x *Assets) GetDestinationRoot() string {
	if x != nil {
		return x.DestinationRoot
	}
	return ""
}

func (x *Assets) GetSourceRoot() string {
	if x != nil {
		return x.SourceRoot
	}
	return ""
}

func (x *Assets) GetPaths() []*Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

// Data pattern used in the transfer path
type PathPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pattern, such as regex, used in the transfer path
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *PathPattern) Reset() {
	*x = PathPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathPattern) ProtoMessage() {}

func (x *PathPattern) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathPattern.ProtoReflect.Descriptor instead.
func (*PathPattern) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{58}
}

func (x *PathPattern) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

// Configuration for HTTP fallback
type HTTPFallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port used for HTTP fallback server
	Port int64 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Proxy address and port. (Default: 80)
	Proxy string `protobuf:"bytes,2,opt,name=proxy,proto3" json:"proxy,omitempty"`
}

func (x *HTTPFallback) Reset() {
	*x = HTTPFallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPFallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPFallback) ProtoMessage() {}

func (x *HTTPFallback) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPFallback.ProtoReflect.Descriptor instead.
func (*HTTPFallback) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{59}
}

func (x *HTTPFallback) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HTTPFallback) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

// Configuration for streaming
type Streaming struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the byte array sent in streaming request and returned in response for
	// both send and receive.
	ChunkSize int64 `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	// Amount of memory available on the local machine
	LocalMemory int64 `protobuf:"varint,2,opt,name=local_memory,json=localMemory,proto3" json:"local_memory,omitempty"`
	// Amount of memory available on the remote server
	RemoteMemory int64 `protobuf:"varint,3,opt,name=remote_memory,json=remoteMemory,proto3" json:"remote_memory,omitempty"`
	// Enable ascp4 to write sparse files to disk. This option prevents ascp4 from writing
	// zero content to disk for sparse files; ascp4 writes a block to disk if even one bit
	// is set in that block. If no bits are set in the block, ascp4 does not write the block
	// (Default size of ascp4 blocks is 64 KB.)
	SparseFile bool `protobuf:"varint,4,opt,name=sparse_file,json=sparseFile,proto3" json:"sparse_file,omitempty"`
	// Compression object containing a string. Compress file data inline.
	// Allowable values: none, zlib, lz4. (Default: lz4). If set to zlib, the compression hint
	// can be used to set the compression level.
	Compression *Compression `protobuf:"bytes,5,opt,name=compression,proto3" json:"compression,omitempty"`
}

func (x *Streaming) Reset() {
	*x = Streaming{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Streaming) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Streaming) ProtoMessage() {}

func (x *Streaming) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Streaming.ProtoReflect.Descriptor instead.
func (*Streaming) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{60}
}

func (x *Streaming) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *Streaming) GetLocalMemory() int64 {
	if x != nil {
		return x.LocalMemory
	}
	return 0
}

func (x *Streaming) GetRemoteMemory() int64 {
	if x != nil {
		return x.RemoteMemory
	}
	return 0
}

func (x *Streaming) GetSparseFile() bool {
	if x != nil {
		return x.SparseFile
	}
	return false
}

func (x *Streaming) GetCompression() *Compression {
	if x != nil {
		return x.Compression
	}
	return nil
}

// Compression object containing a string. Compresses file data inline.
// Allowable values: none, zlib, lz4. (Default: lz4). If set to zlib, the compression hint can be used to set the compression level.
type Compression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The method for compressing file data. Allowable values: none, zlib, lz4. (Default: lz4).
	// If set to zlib, the compression hint can be used to set the compression level.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Compress file data to the specified level when the compression method is set to an option
	// that accepts compression level settings (currently only zlib). A lower value results in less,
	// but faster, data compression (0 = no compression). A higher value results in greater, slower compression.
	// Valid values are "-1" to "9", where "-1" is "balanced". (Default: "-1")
	Hint int32 `protobuf:"varint,2,opt,name=hint,proto3" json:"hint,omitempty"`
}

func (x *Compression) Reset() {
	*x = Compression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compression) ProtoMessage() {}

func (x *Compression) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compression.ProtoReflect.Descriptor instead.
func (*Compression) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{61}
}

func (x *Compression) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Compression) GetHint() int32 {
	if x != nil {
		return x.Hint
	}
	return 0
}

// MultiSession settings object. Specifies the configuration on how
// the transfer fileset will be split so it is transferred in parallel
// using multiple transfer processes.
type MultiSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable using multisession mode.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Number of parallel processes to transfer the fileset.
	NumberOfSessions int32 `protobuf:"varint,2,opt,name=number_of_sessions,json=numberOfSessions,proto3" json:"number_of_sessions,omitempty"`
	// Settings for using different remote hosts for the multiple
	// transfer processes.
	Hosts *MultiSessionHosts `protobuf:"bytes,3,opt,name=hosts,proto3" json:"hosts,omitempty"`
	// Settings for the minimum size required to partition a single file
	// across multiple transfer processes.
	FileSplitting *MultiSessionFileSplitting `protobuf:"bytes,4,opt,name=file_splitting,json=fileSplitting,proto3" json:"file_splitting,omitempty"`
	// Settings for the minimum rate required to enable multisession.
	Bandwidth *MultiSessionBandwidth `protobuf:"bytes,5,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *MultiSession) Reset() {
	*x = MultiSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSession) ProtoMessage() {}

func (x *MultiSession) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSession.ProtoReflect.Descriptor instead.
func (*MultiSession) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{62}
}

func (x *MultiSession) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *MultiSession) GetNumberOfSessions() int32 {
	if x != nil {
		return x.NumberOfSessions
	}
	return 0
}

func (x *MultiSession) GetHosts() *MultiSessionHosts {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *MultiSession) GetFileSplitting() *MultiSessionFileSplitting {
	if x != nil {
		return x.FileSplitting
	}
	return nil
}

func (x *MultiSession) GetBandwidth() *MultiSessionBandwidth {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

// Settings for using different remote hosts for the multiple
// transfer processes.
type MultiSessionHosts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use the different IP addresses associated with the specified
	// remoteHost hostname as destinations for the different transfer processes.
	Usedns bool `protobuf:"varint,1,opt,name=usedns,proto3" json:"usedns,omitempty"`
	// If not using DNS, specify a list of hosts to use for the different
	// transfer processes.
	Hosts []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
}

func (x *MultiSessionHosts) Reset() {
	*x = MultiSessionHosts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSessionHosts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSessionHosts) ProtoMessage() {}

func (x *MultiSessionHosts) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSessionHosts.ProtoReflect.Descriptor instead.
func (*MultiSessionHosts) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{63}
}

func (x *MultiSessionHosts) GetUsedns() bool {
	if x != nil {
		return x.Usedns
	}
	return false
}

func (x *MultiSessionHosts) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

// Settings for the minimum size required to partition a single file
// across multiple transfer processes.
type MultiSessionFileSplitting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum size in kilobytes (kb) required to partition a single file
	// across multiple transfer processes.
	SizeKbThreshold int32 `protobuf:"varint,1,opt,name=size_kb_threshold,json=sizeKbThreshold,proto3" json:"size_kb_threshold,omitempty"`
}

func (x *MultiSessionFileSplitting) Reset() {
	*x = MultiSessionFileSplitting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSessionFileSplitting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSessionFileSplitting) ProtoMessage() {}

func (x *MultiSessionFileSplitting) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSessionFileSplitting.ProtoReflect.Descriptor instead.
func (*MultiSessionFileSplitting) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{64}
}

func (x *MultiSessionFileSplitting) GetSizeKbThreshold() int32 {
	if x != nil {
		return x.SizeKbThreshold
	}
	return 0
}

// Settings for the minimum rate required to enable multisession.
type MultiSessionBandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum bandwidth rate in kilobits per second (kbps) required
	// to enable multisession.
	BandwidthKpbsThreshold int32 `protobuf:"varint,1,opt,name=bandwidth_kpbs_threshold,json=bandwidthKpbsThreshold,proto3" json:"bandwidth_kpbs_threshold,omitempty"`
}

func (x *MultiSessionBandwidth) Reset() {
	*x = MultiSessionBandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transfer_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSessionBandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSessionBandwidth) ProtoMessage() {}

func (x *MultiSessionBandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_transfer_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSessionBandwidth.ProtoReflect.Descriptor instead.
func (*MultiSessionBandwidth) Descriptor() ([]byte, []int) {
	return file_transfer_proto_rawDescGZIP(), []int{65}
}

func (x *MultiSessionBandwidth) GetBandwidthKpbsThreshold() int32 {
	if x != nil {
		return x.BandwidthKpbsThreshold
	}
	return 0
}

var File_transfer_proto protoreflect.FileDescriptor

var file_transfer_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x22, 0x3d, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11,
	0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x42, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x12, 0x48, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e,
	0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x12, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0xa3, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0f,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3f, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xa9, 0x01, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x22, 0x8b, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x35, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0xae, 0x04, 0x0a,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x49, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x64, 0x6b, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe4, 0x02,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64,
	0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xe0, 0x06, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x32, 0x0a,
	0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73,
	0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x4b, 0x62, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x72, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x72, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x61, 0x72, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x72, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x13, 0x61, 0x72, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x72, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x61, 0x72, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x72, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x73, 0x36, 0x34, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x67, 0x73, 0x36, 0x34, 0x22, 0xc8, 0x1d, 0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62,
	0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x63, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62,
	0x70, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x63, 0x52, 0x61,
	0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x55, 0x73, 0x65, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x55, 0x73,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2a,
	0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x12, 0x34, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x53,
	0x63, 0x61, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x53, 0x63, 0x61, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x53,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x72, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x72, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x61, 0x72, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x72, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x61, 0x72, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x72, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x61, 0x72, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x72, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x18, 0x36, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x61, 0x70, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x74, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x74, 0x74, 0x41, 0x75, 0x74,
	0x6f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x4c, 0x69, 0x6e, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x4c, 0x69, 0x6e,
	0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x65, 0x72,
	0x56, 0x4c, 0x69, 0x6e, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x56, 0x4c, 0x69, 0x6e, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x76, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x76, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x56,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6d,
	0x74, 0x75, 0x18, 0x57, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6d, 0x74, 0x75, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x58, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x59,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69, 0x72, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x5c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x61, 0x72, 0x67, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65,
	0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x72, 0x67, 0x53, 0x63, 0x61, 0x6e,
	0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x72,
	0x67, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x72, 0x67, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x72, 0x67, 0x46,
	0x61, 0x73, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x72, 0x67, 0x46, 0x61, 0x73, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x41, 0x72, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65,
	0x64, 0x18, 0x60, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x64, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x61, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x62, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x64, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x73,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x64, 0x69, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0x9d, 0x04, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x63,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x55, 0x73, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x79, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x6f, 0x75,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x73, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x41, 0x72, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x66, 0x61, 0x73, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x61, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x74, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0x7a, 0x0a, 0x0c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3f, 0x0a, 0x1d, 0x4c, 0x6f,
	0x63, 0x6b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x1e,
	0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x70, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x12, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64,
	0x6b, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x73,
	0x36, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x73, 0x36, 0x34,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x43, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x22, 0x6d, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x6e, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x15, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd5, 0x01, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x73, 0x70, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x61, 0x73, 0x70, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0b, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x69,
	0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x41, 0x73, 0x70, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x70, 0x65, 0x72, 0x61, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x70, 0x65, 0x72, 0x61, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x70, 0x65, 0x72, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x70,
	0x65, 0x72, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64,
	0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x36,
	0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x22, 0x7b, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x64, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x84, 0x01, 0x0a, 0x18, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x64, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x7f, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x33, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x23, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3d,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc4, 0x01,
	0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x8a, 0x17, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x56, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4e, 0x65, 0x77, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61,
	0x73, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66,
	0x61, 0x73, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x68, 0x74, 0x74, 0x70, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x73, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x64, 0x6b, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x73, 0x68, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x68,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x73,
	0x68, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x73, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x73, 0x36, 0x34, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x73, 0x36, 0x34, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x6b, 0x62,
	0x70, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x63, 0x70, 0x34, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x41, 0x73, 0x63, 0x70, 0x34, 0x12, 0x35,
	0x0a, 0x0a, 0x66, 0x61, 0x73, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x46, 0x41, 0x53, 0x50, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x09, 0x66, 0x61, 0x73, 0x70,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64,
	0x6b, 0x2e, 0x49, 0x43, 0x4f, 0x53, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x73,
	0x12, 0x33, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x49, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x41, 0x70, 0x69, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x63, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x6c, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x72, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x61,
	0x76, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0x40, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x09, 0x46, 0x41, 0x53, 0x50, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x12, 0x46, 0x0a,
	0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x94, 0x01,
	0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x03,
	0x73, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x53, 0x48, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x03, 0x73, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x49, 0x43, 0x4f, 0x53, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x49, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x41, 0x70, 0x69, 0x22, 0xfc, 0x01, 0x0a, 0x07, 0x53, 0x53, 0x48, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x73, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a,
	0x1a, 0x73, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x73, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x73,
	0x68, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x73, 0x68, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x08, 0x49, 0x43, 0x4f, 0x53, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x62, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x69, 0x62, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x62, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x62, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x11, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x50, 0x49, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x50, 0x49, 0x53, 0x70, 0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x49, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x73, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x73, 0x36, 0x34, 0x22, 0x98, 0x0c, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x74,
	0x68, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x4e, 0x65, 0x77, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65,
	0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x47, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x11, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12,
	0x47, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x6f, 0x63, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x63, 0x6c, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x6c, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67, 0x69,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x72,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x73, 0x61, 0x76, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0xbf, 0x05, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61, 0x73, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x3e, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x64, 0x6b, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x35, 0x0a, 0x0a, 0x66, 0x61, 0x73, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64,
	0x6b, 0x2e, 0x46, 0x41, 0x53, 0x50, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x09, 0x66, 0x61, 0x73,
	0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64,
	0x6b, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2f, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x70, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x4b, 0x62, 0x70, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x62, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x70, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62,
	0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x62,
	0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x5f, 0x61, 0x73, 0x63, 0x70, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x41, 0x73, 0x63, 0x70, 0x34, 0x22, 0xd3, 0x01, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x27, 0x0a, 0x0b,
	0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x38, 0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x46, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x22,
	0xcf, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x69, 0x6e, 0x74, 0x22, 0x9b, 0x02, 0x0a,
	0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x41, 0x0a, 0x11, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x64, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x64, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x47, 0x0a,
	0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x6b, 0x62, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x51, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x38, 0x0a, 0x18, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6b, 0x70, 0x62,
	0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4b, 0x70, 0x62, 0x73,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2a, 0xc0, 0x01, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x55, 0x52, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x4f,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x05, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x06, 0x2a, 0x80, 0x01, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x50, 0x48, 0x41, 0x4e, 0x45, 0x44, 0x10, 0x07, 0x2a,
	0xf6, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x52, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x0d,
	0x0a, 0x09, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x0b, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x2a, 0x2d, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x32, 0xdc, 0x0a, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x4c, 0x6f, 0x63,
	0x6b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64,
	0x6b, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x20,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x50,
	0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x50,
	0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x49, 0x73, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x24, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x54, 0x0a,
	0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x30, 0x0a, 0x1a, 0x69, 0x62, 0x6d, 0x2e, 0x61, 0x73,
	0x70, 0x65, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5a, 0x12, 0x61, 0x73, 0x70, 0x65, 0x72, 0x61, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x64, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transfer_proto_rawDescOnce sync.Once
	file_transfer_proto_rawDescData = file_transfer_proto_rawDesc
)

func file_transfer_proto_rawDescGZIP() []byte {
	file_transfer_proto_rawDescOnce.Do(func() {
		file_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_transfer_proto_rawDescData)
	})
	return file_transfer_proto_rawDescData
}

var file_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_transfer_proto_goTypes = []interface{}{
	(TransferType)(0),                       // 0: transfersdk.TransferType
	(TransferStatus)(0),                     // 1: transfersdk.TransferStatus
	(TransferEvent)(0),                      // 2: transfersdk.TransferEvent
	(RegistrationFilterOperator)(0),         // 3: transfersdk.RegistrationFilterOperator
	(*Error)(nil),                           // 4: transfersdk.Error
	(*APIVersionRequest)(nil),               // 5: transfersdk.APIVersionRequest
	(*APIVersionResponse)(nil),              // 6: transfersdk.APIVersionResponse
	(*RetryStrategy)(nil),                   // 7: transfersdk.RetryStrategy
	(*BasicRetryStrategy)(nil),              // 8: transfersdk.BasicRetryStrategy
	(*ExponentialBackoffRetryStrategy)(nil), // 9: transfersdk.ExponentialBackoffRetryStrategy
	(*TransferConfig)(nil),                  // 10: transfersdk.TransferConfig
	(*TransferRange)(nil),                   // 11: transfersdk.TransferRange
	(*TransferRequest)(nil),                 // 12: transfersdk.TransferRequest
	(*StartTransferResponse)(nil),           // 13: transfersdk.StartTransferResponse
	(*TransferInfoRequest)(nil),             // 14: transfersdk.TransferInfoRequest
	(*TransferResponse)(nil),                // 15: transfersdk.TransferResponse
	(*QueryTransferResponse)(nil),           // 16: transfersdk.QueryTransferResponse
	(*TransferInfo)(nil),                    // 17: transfersdk.TransferInfo
	(*SessionTransferInformation)(nil),      // 18: transfersdk.SessionTransferInformation
	(*FileTransferInformation)(nil),         // 19: transfersdk.FileTransferInformation
	(*TransferModificationRequest)(nil),     // 20: transfersdk.TransferModificationRequest
	(*TransferModificationResponse)(nil),    // 21: transfersdk.TransferModificationResponse
	(*TransferPathRequest)(nil),             // 22: transfersdk.TransferPathRequest
	(*TransferPath)(nil),                    // 23: transfersdk.TransferPath
	(*TransferPathResponse)(nil),            // 24: transfersdk.TransferPathResponse
	(*LockPersistentTransferRequest)(nil),   // 25: transfersdk.LockPersistentTransferRequest
	(*LockPersistentTransferResponse)(nil),  // 26: transfersdk.LockPersistentTransferResponse
	(*RegistrationRequest)(nil),             // 27: transfersdk.RegistrationRequest
	(*RegistrationFilter)(nil),              // 28: transfersdk.RegistrationFilter
	(*StopTransferRequest)(nil),             // 29: transfersdk.StopTransferRequest
	(*StopTransferResponse)(nil),            // 30: transfersdk.StopTransferResponse
	(*StopInfo)(nil),                        // 31: transfersdk.StopInfo
	(*InstanceInfoRequest)(nil),             // 32: transfersdk.InstanceInfoRequest
	(*InstanceInfoResponse)(nil),            // 33: transfersdk.InstanceInfoResponse
	(*InstanceInfo)(nil),                    // 34: transfersdk.InstanceInfo
	(*LicenseInfo)(nil),                     // 35: transfersdk.LicenseInfo
	(*AsperaInfo)(nil),                      // 36: transfersdk.AsperaInfo
	(*PeerCheckRequest)(nil),                // 37: transfersdk.PeerCheckRequest
	(*PeerCheckResponse)(nil),               // 38: transfersdk.PeerCheckResponse
	(*WriteStreamChunkRequest)(nil),         // 39: transfersdk.WriteStreamChunkRequest
	(*WriteStreamChunkResponse)(nil),        // 40: transfersdk.WriteStreamChunkResponse
	(*WriteStreamRequest)(nil),              // 41: transfersdk.WriteStreamRequest
	(*WriteStreamResponse)(nil),             // 42: transfersdk.WriteStreamResponse
	(*ReadStreamRequest)(nil),               // 43: transfersdk.ReadStreamRequest
	(*ReadStreamResponse)(nil),              // 44: transfersdk.ReadStreamResponse
	(*Chunk)(nil),                           // 45: transfersdk.Chunk
	(*ValidationRequest)(nil),               // 46: transfersdk.ValidationRequest
	(*ValidationResponse)(nil),              // 47: transfersdk.ValidationResponse
	(*TransferSpecV1)(nil),                  // 48: transfersdk.TransferSpecV1
	(*Path)(nil),                            // 49: transfersdk.Path
	(*FASPProxy)(nil),                       // 50: transfersdk.FASPProxy
	(*TransferSpecV2)(nil),                  // 51: transfersdk.TransferSpecV2
	(*Initiation)(nil),                      // 52: transfersdk.Initiation
	(*SSHSpec)(nil),                         // 53: transfersdk.SSHSpec
	(*ICOSSpec)(nil),                        // 54: transfersdk.ICOSSpec
	(*NodeAPIHeaderSpec)(nil),               // 55: transfersdk.NodeAPIHeaderSpec
	(*NodeAPISpec)(nil),                     // 56: transfersdk.NodeAPISpec
	(*Security)(nil),                        // 57: transfersdk.Security
	(*Tracking)(nil),                        // 58: transfersdk.Tracking
	(*Filesystem)(nil),                      // 59: transfersdk.Filesystem
	(*Transport)(nil),                       // 60: transfersdk.Transport
	(*Assets)(nil),                          // 61: transfersdk.Assets
	(*PathPattern)(nil),                     // 62: transfersdk.PathPattern
	(*HTTPFallback)(nil),                    // 63: transfersdk.HTTPFallback
	(*Streaming)(nil),                       // 64: transfersdk.Streaming
	(*Compression)(nil),                     // 65: transfersdk.Compression
	(*MultiSession)(nil),                    // 66: transfersdk.MultiSession
	(*MultiSessionHosts)(nil),               // 67: transfersdk.MultiSessionHosts
	(*MultiSessionFileSplitting)(nil),       // 68: transfersdk.MultiSessionFileSplitting
	(*MultiSessionBandwidth)(nil),           // 69: transfersdk.MultiSessionBandwidth
}
var file_transfer_proto_depIdxs = []int32{
	8,  // 0: transfersdk.RetryStrategy.basic:type_name -> transfersdk.BasicRetryStrategy
	9,  // 1: transfersdk.RetryStrategy.backoff:type_name -> transfersdk.ExponentialBackoffRetryStrategy
	7,  // 2: transfersdk.TransferConfig.retry:type_name -> transfersdk.RetryStrategy
	0,  // 3: transfersdk.TransferRequest.transferType:type_name -> transfersdk.TransferType
	10, // 4: transfersdk.TransferRequest.config:type_name -> transfersdk.TransferConfig
	0,  // 5: transfersdk.StartTransferResponse.transferType:type_name -> transfersdk.TransferType
	1,  // 6: transfersdk.StartTransferResponse.status:type_name -> transfersdk.TransferStatus
	4,  // 7: transfersdk.StartTransferResponse.error:type_name -> transfersdk.Error
	0,  // 8: transfersdk.TransferResponse.transferType:type_name -> transfersdk.TransferType
	1,  // 9: transfersdk.TransferResponse.status:type_name -> transfersdk.TransferStatus
	4,  // 10: transfersdk.TransferResponse.error:type_name -> transfersdk.Error
	2,  // 11: transfersdk.TransferResponse.transferEvent:type_name -> transfersdk.TransferEvent
	17, // 12: transfersdk.TransferResponse.transferInfo:type_name -> transfersdk.TransferInfo
	18, // 13: transfersdk.TransferResponse.sessionInfo:type_name -> transfersdk.SessionTransferInformation
	19, // 14: transfersdk.TransferResponse.fileInfo:type_name -> transfersdk.FileTransferInformation
	0,  // 15: transfersdk.QueryTransferResponse.transferType:type_name -> transfersdk.TransferType
	1,  // 16: transfersdk.QueryTransferResponse.status:type_name -> transfersdk.TransferStatus
	4,  // 17: transfersdk.QueryTransferResponse.error:type_name -> transfersdk.Error
	17, // 18: transfersdk.QueryTransferResponse.transferInfo:type_name -> transfersdk.TransferInfo
	1,  // 19: transfersdk.TransferModificationResponse.status:type_name -> transfersdk.TransferStatus
	4,  // 20: transfersdk.TransferModificationResponse.error:type_name -> transfersdk.Error
	23, // 21: transfersdk.TransferPathRequest.transferPath:type_name -> transfersdk.TransferPath
	11, // 22: transfersdk.TransferPath.range:type_name -> transfersdk.TransferRange
	4,  // 23: transfersdk.TransferPathResponse.error:type_name -> transfersdk.Error
	4,  // 24: transfersdk.LockPersistentTransferResponse.error:type_name -> transfersdk.Error
	28, // 25: transfersdk.RegistrationRequest.filters:type_name -> transfersdk.RegistrationFilter
	3,  // 26: transfersdk.RegistrationFilter.operator:type_name -> transfersdk.RegistrationFilterOperator
	2,  // 27: transfersdk.RegistrationFilter.eventType:type_name -> transfersdk.TransferEvent
	0,  // 28: transfersdk.RegistrationFilter.transferType:type_name -> transfersdk.TransferType
	1,  // 29: transfersdk.RegistrationFilter.transferStatus:type_name -> transfersdk.TransferStatus
	31, // 30: transfersdk.StopTransferResponse.stopResult:type_name -> transfersdk.StopInfo
	4,  // 31: transfersdk.StopInfo.error:type_name -> transfersdk.Error
	34, // 32: transfersdk.InstanceInfoResponse.info:type_name -> transfersdk.InstanceInfo
	4,  // 33: transfersdk.InstanceInfoResponse.error:type_name -> transfersdk.Error
	36, // 34: transfersdk.InstanceInfo.asperaInfo:type_name -> transfersdk.AsperaInfo
	35, // 35: transfersdk.InstanceInfo.licenseInfo:type_name -> transfersdk.LicenseInfo
	4,  // 36: transfersdk.AsperaInfo.error:type_name -> transfersdk.Error
	4,  // 37: transfersdk.PeerCheckResponse.error:type_name -> transfersdk.Error
	11, // 38: transfersdk.WriteStreamChunkRequest.range:type_name -> transfersdk.TransferRange
	45, // 39: transfersdk.WriteStreamChunkRequest.chunk:type_name -> transfersdk.Chunk
	4,  // 40: transfersdk.WriteStreamChunkResponse.error:type_name -> transfersdk.Error
	45, // 41: transfersdk.WriteStreamRequest.chunk:type_name -> transfersdk.Chunk
	4,  // 42: transfersdk.WriteStreamResponse.error:type_name -> transfersdk.Error
	45, // 43: transfersdk.ReadStreamResponse.chunk:type_name -> transfersdk.Chunk
	4,  // 44: transfersdk.ReadStreamResponse.error:type_name -> transfersdk.Error
	0,  // 45: transfersdk.ValidationRequest.transferType:type_name -> transfersdk.TransferType
	4,  // 46: transfersdk.ValidationResponse.error:type_name -> transfersdk.Error
	49, // 47: transfersdk.TransferSpecV1.paths:type_name -> transfersdk.Path
	50, // 48: transfersdk.TransferSpecV1.fasp_proxy:type_name -> transfersdk.FASPProxy
	54, // 49: transfersdk.TransferSpecV1.icos:type_name -> transfersdk.ICOSSpec
	56, // 50: transfersdk.TransferSpecV1.node_api:type_name -> transfersdk.NodeAPISpec
	52, // 51: transfersdk.TransferSpecV2.session_initiation:type_name -> transfersdk.Initiation
	57, // 52: transfersdk.TransferSpecV2.security:type_name -> transfersdk.Security
	58, // 53: transfersdk.TransferSpecV2.tracking:type_name -> transfersdk.Tracking
	59, // 54: transfersdk.TransferSpecV2.file_system:type_name -> transfersdk.Filesystem
	60, // 55: transfersdk.TransferSpecV2.transport:type_name -> transfersdk.Transport
	61, // 56: transfersdk.TransferSpecV2.assets:type_name -> transfersdk.Assets
	53, // 57: transfersdk.Initiation.ssh:type_name -> transfersdk.SSHSpec
	54, // 58: transfersdk.Initiation.icos:type_name -> transfersdk.ICOSSpec
	56, // 59: transfersdk.Initiation.node_api:type_name -> transfersdk.NodeAPISpec
	55, // 60: transfersdk.NodeAPISpec.headers:type_name -> transfersdk.NodeAPIHeaderSpec
	62, // 61: transfersdk.Filesystem.inclusion_patterns:type_name -> transfersdk.PathPattern
	62, // 62: transfersdk.Filesystem.exclusion_patterns:type_name -> transfersdk.PathPattern
	63, // 63: transfersdk.Transport.http_fallback:type_name -> transfersdk.HTTPFallback
	50, // 64: transfersdk.Transport.fasp_proxy:type_name -> transfersdk.FASPProxy
	64, // 65: transfersdk.Transport.streaming:type_name -> transfersdk.Streaming
	66, // 66: transfersdk.Transport.multi_session:type_name -> transfersdk.MultiSession
	49, // 67: transfersdk.Assets.paths:type_name -> transfersdk.Path
	65, // 68: transfersdk.Streaming.compression:type_name -> transfersdk.Compression
	67, // 69: transfersdk.MultiSession.hosts:type_name -> transfersdk.MultiSessionHosts
	68, // 70: transfersdk.MultiSession.file_splitting:type_name -> transfersdk.MultiSessionFileSplitting
	69, // 71: transfersdk.MultiSession.bandwidth:type_name -> transfersdk.MultiSessionBandwidth
	46, // 72: transfersdk.TransferService.Validate:input_type -> transfersdk.ValidationRequest
	12, // 73: transfersdk.TransferService.StartTransfer:input_type -> transfersdk.TransferRequest
	12, // 74: transfersdk.TransferService.StartTransferWithMonitor:input_type -> transfersdk.TransferRequest
	14, // 75: transfersdk.TransferService.QueryTransfer:input_type -> transfersdk.TransferInfoRequest
	20, // 76: transfersdk.TransferService.ModifyTransfer:input_type -> transfersdk.TransferModificationRequest
	22, // 77: transfersdk.TransferService.AddTransferPaths:input_type -> transfersdk.TransferPathRequest
	25, // 78: transfersdk.TransferService.LockPersistentTransfer:input_type -> transfersdk.LockPersistentTransferRequest
	29, // 79: transfersdk.TransferService.StopTransfer:input_type -> transfersdk.StopTransferRequest
	27, // 80: transfersdk.TransferService.MonitorTransfers:input_type -> transfersdk.RegistrationRequest
	5,  // 81: transfersdk.TransferService.GetAPIVersion:input_type -> transfersdk.APIVersionRequest
	32, // 82: transfersdk.TransferService.GetInfo:input_type -> transfersdk.InstanceInfoRequest
	37, // 83: transfersdk.TransferService.IsPeerReachable:input_type -> transfersdk.PeerCheckRequest
	39, // 84: transfersdk.TransferService.WriteStreamChunk:input_type -> transfersdk.WriteStreamChunkRequest
	41, // 85: transfersdk.TransferService.WriteStream:input_type -> transfersdk.WriteStreamRequest
	43, // 86: transfersdk.TransferService.ReadStream:input_type -> transfersdk.ReadStreamRequest
	47, // 87: transfersdk.TransferService.Validate:output_type -> transfersdk.ValidationResponse
	13, // 88: transfersdk.TransferService.StartTransfer:output_type -> transfersdk.StartTransferResponse
	15, // 89: transfersdk.TransferService.StartTransferWithMonitor:output_type -> transfersdk.TransferResponse
	16, // 90: transfersdk.TransferService.QueryTransfer:output_type -> transfersdk.QueryTransferResponse
	21, // 91: transfersdk.TransferService.ModifyTransfer:output_type -> transfersdk.TransferModificationResponse
	24, // 92: transfersdk.TransferService.AddTransferPaths:output_type -> transfersdk.TransferPathResponse
	26, // 93: transfersdk.TransferService.LockPersistentTransfer:output_type -> transfersdk.LockPersistentTransferResponse
	30, // 94: transfersdk.TransferService.StopTransfer:output_type -> transfersdk.StopTransferResponse
	15, // 95: transfersdk.TransferService.MonitorTransfers:output_type -> transfersdk.TransferResponse
	6,  // 96: transfersdk.TransferService.GetAPIVersion:output_type -> transfersdk.APIVersionResponse
	33, // 97: transfersdk.TransferService.GetInfo:output_type -> transfersdk.InstanceInfoResponse
	38, // 98: transfersdk.TransferService.IsPeerReachable:output_type -> transfersdk.PeerCheckResponse
	40, // 99: transfersdk.TransferService.WriteStreamChunk:output_type -> transfersdk.WriteStreamChunkResponse
	42, // 100: transfersdk.TransferService.WriteStream:output_type -> transfersdk.WriteStreamResponse
	44, // 101: transfersdk.TransferService.ReadStream:output_type -> transfersdk.ReadStreamResponse
	87, // [87:102] is the sub-list for method output_type
	72, // [72:87] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_transfer_proto_init() }
func file_transfer_proto_init() {
	if File_transfer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transfer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicRetryStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExponentialBackoffRetryStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionTransferInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTransferInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferModificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferModificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockPersistentTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockPersistentTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsperaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteStreamChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteStreamChunkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferSpecV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FASPProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Initiation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICOSSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAPIHeaderSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAPISpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPFallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Streaming); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSessionHosts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSessionFileSplitting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transfer_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiSessionBandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transfer_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RetryStrategy_Basic)(nil),
		(*RetryStrategy_Backoff)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transfer_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transfer_proto_goTypes,
		DependencyIndexes: file_transfer_proto_depIdxs,
		EnumInfos:         file_transfer_proto_enumTypes,
		MessageInfos:      file_transfer_proto_msgTypes,
	}.Build()
	File_transfer_proto = out.File
	file_transfer_proto_rawDesc = nil
	file_transfer_proto_goTypes = nil
	file_transfer_proto_depIdxs = nil
}

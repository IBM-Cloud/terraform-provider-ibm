/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vpcv1_test

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"os"
	"time"

	"github.com/IBM/go-sdk-core/v5/core"
	"github.com/IBM/vpc-go-sdk/vpcv1"
	"github.com/go-openapi/strfmt"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe(`VpcV1`, func() {
	var testServer *httptest.Server
	Describe(`Service constructor tests`, func() {
		version := "testString"
		It(`Instantiate service client`, func() {
			vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			Expect(vpcService).ToNot(BeNil())
			Expect(serviceErr).To(BeNil())
		})
		It(`Instantiate service client with error: Invalid URL`, func() {
			vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})
			Expect(vpcService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Invalid Auth`, func() {
			vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:     "https://vpcv1/api",
				Version: core.StringPtr(version),
				Authenticator: &core.BasicAuthenticator{
					Username: "",
					Password: "",
				},
			})
			Expect(vpcService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
		It(`Instantiate service client with error: Validation Error`, func() {
			vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{})
			Expect(vpcService).To(BeNil())
			Expect(serviceErr).ToNot(BeNil())
		})
	})
	Describe(`Service constructor tests using external config`, func() {
		version := "testString"
		Context(`Using external config, construct service client instances`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "noauth",
			}

			It(`Create service client using external config successfully`, func() {
				SetTestEnvironment(testEnvironment)
				vpcService, serviceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				Expect(vpcService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				ClearTestEnvironment(testEnvironment)

				clone := vpcService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != vpcService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(vpcService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(vpcService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url from constructor successfully`, func() {
				SetTestEnvironment(testEnvironment)
				vpcService, serviceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					URL:     "https://testService/api",
					Version: core.StringPtr(version),
				})
				Expect(vpcService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(vpcService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := vpcService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != vpcService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(vpcService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(vpcService.Service.Options.Authenticator))
			})
			It(`Create service client using external config and set url programatically successfully`, func() {
				SetTestEnvironment(testEnvironment)
				vpcService, serviceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
					Version: core.StringPtr(version),
				})
				err := vpcService.SetServiceURL("https://testService/api")
				Expect(err).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				Expect(serviceErr).To(BeNil())
				Expect(vpcService.Service.GetServiceURL()).To(Equal("https://testService/api"))
				ClearTestEnvironment(testEnvironment)

				clone := vpcService.Clone()
				Expect(clone).ToNot(BeNil())
				Expect(clone.Service != vpcService.Service).To(BeTrue())
				Expect(clone.GetServiceURL()).To(Equal(vpcService.GetServiceURL()))
				Expect(clone.Service.Options.Authenticator).To(Equal(vpcService.Service.Options.Authenticator))
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid Auth`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_URL":       "https://vpcv1/api",
				"VPC_AUTH_TYPE": "someOtherAuth",
			}

			SetTestEnvironment(testEnvironment)
			vpcService, serviceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(vpcService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
		Context(`Using external config, construct service client instances with error: Invalid URL`, func() {
			// Map containing environment variables used in testing.
			var testEnvironment = map[string]string{
				"VPC_AUTH_TYPE": "NOAuth",
			}

			SetTestEnvironment(testEnvironment)
			vpcService, serviceErr := vpcv1.NewVpcV1UsingExternalConfig(&vpcv1.VpcV1Options{
				URL:     "{BAD_URL_STRING",
				Version: core.StringPtr(version),
			})

			It(`Instantiate service client with error`, func() {
				Expect(vpcService).To(BeNil())
				Expect(serviceErr).ToNot(BeNil())
				ClearTestEnvironment(testEnvironment)
			})
		})
	})
	Describe(`Regional endpoint tests`, func() {
		It(`GetServiceURLForRegion(region string)`, func() {
			var url string
			var err error
			url, err = vpcv1.GetServiceURLForRegion("INVALID_REGION")
			Expect(url).To(BeEmpty())
			Expect(err).ToNot(BeNil())
			fmt.Fprintf(GinkgoWriter, "Expected error: %s\n", err.Error())
		})
	})
	Describe(`ListVpcs(listVpcsOptions *ListVpcsOptions) - Operation response error`, func() {
		version := "testString"
		listVpcsPath := "/vpcs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVpcsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// TODO: Add check for classic_access query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVpcs with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVpcsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVpcs(listVpcsOptions *ListVpcsOptions)`, func() {
		version := "testString"
		listVpcsPath := "/vpcs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVpcsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// TODO: Add check for classic_access query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "vpcs": [{"classic_access": false, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}]}`)
				}))
			})
			It(`Invoke ListVpcs successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVpcsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVpcsWithContext(ctx, listVpcsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVpcsWithContext(ctx, listVpcsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVpcsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// TODO: Add check for classic_access query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132, "vpcs": [{"classic_access": false, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}]}`)
				}))
			})
			It(`Invoke ListVpcs successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVpcs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVpcsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVpcs with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVpcsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVpcs successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := new(vpcv1.ListVpcsOptions)
				listVpcsOptionsModel.Start = core.StringPtr("testString")
				listVpcsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVpcsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVpcsOptionsModel.ClassicAccess = core.BoolPtr(true)
				listVpcsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVpcs(listVpcsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPC(createVPCOptions *CreateVPCOptions) - Operation response error`, func() {
		version := "testString"
		createVPCPath := "/vpcs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPC with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := new(vpcv1.CreateVPCOptions)
				createVPCOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVPCOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVPCOptionsModel.Name = core.StringPtr("my-vpc")
				createVPCOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateVPC(createVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateVPC(createVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPC(createVPCOptions *CreateVPCOptions)`, func() {
		version := "testString"
		createVPCPath := "/vpcs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"classic_access": false, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}`)
				}))
			})
			It(`Invoke CreateVPC successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := new(vpcv1.CreateVPCOptions)
				createVPCOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVPCOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVPCOptionsModel.Name = core.StringPtr("my-vpc")
				createVPCOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateVPCWithContext(ctx, createVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateVPC(createVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateVPCWithContext(ctx, createVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"classic_access": false, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}`)
				}))
			})
			It(`Invoke CreateVPC successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateVPC(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := new(vpcv1.CreateVPCOptions)
				createVPCOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVPCOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVPCOptionsModel.Name = core.StringPtr("my-vpc")
				createVPCOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateVPC(createVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateVPC with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := new(vpcv1.CreateVPCOptions)
				createVPCOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVPCOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVPCOptionsModel.Name = core.StringPtr("my-vpc")
				createVPCOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateVPC(createVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateVPC successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := new(vpcv1.CreateVPCOptions)
				createVPCOptionsModel.AddressPrefixManagement = core.StringPtr("manual")
				createVPCOptionsModel.ClassicAccess = core.BoolPtr(false)
				createVPCOptionsModel.Name = core.StringPtr("my-vpc")
				createVPCOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateVPC(createVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteVPC(deleteVPCOptions *DeleteVPCOptions)`, func() {
		version := "testString"
		deleteVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVPCPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVPC successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteVPC(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPCOptions model
				deleteVPCOptionsModel := new(vpcv1.DeleteVPCOptions)
				deleteVPCOptionsModel.ID = core.StringPtr("testString")
				deleteVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteVPC(deleteVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPC with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteVPCOptions model
				deleteVPCOptionsModel := new(vpcv1.DeleteVPCOptions)
				deleteVPCOptionsModel.ID = core.StringPtr("testString")
				deleteVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteVPC(deleteVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPCOptions model with no property values
				deleteVPCOptionsModelNew := new(vpcv1.DeleteVPCOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteVPC(deleteVPCOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPC(getVPCOptions *GetVPCOptions) - Operation response error`, func() {
		version := "testString"
		getVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPC with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVPCOptionsModel := new(vpcv1.GetVPCOptions)
				getVPCOptionsModel.ID = core.StringPtr("testString")
				getVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPC(getVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPC(getVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPC(getVPCOptions *GetVPCOptions)`, func() {
		version := "testString"
		getVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic_access": false, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}`)
				}))
			})
			It(`Invoke GetVPC successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCOptions model
				getVPCOptionsModel := new(vpcv1.GetVPCOptions)
				getVPCOptionsModel.ID = core.StringPtr("testString")
				getVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPCWithContext(ctx, getVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPC(getVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPCWithContext(ctx, getVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic_access": false, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}`)
				}))
			})
			It(`Invoke GetVPC successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPC(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVPCOptionsModel := new(vpcv1.GetVPCOptions)
				getVPCOptionsModel.ID = core.StringPtr("testString")
				getVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPC(getVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPC with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVPCOptionsModel := new(vpcv1.GetVPCOptions)
				getVPCOptionsModel.ID = core.StringPtr("testString")
				getVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPC(getVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCOptions model with no property values
				getVPCOptionsModelNew := new(vpcv1.GetVPCOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPC(getVPCOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPC successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCOptions model
				getVPCOptionsModel := new(vpcv1.GetVPCOptions)
				getVPCOptionsModel.ID = core.StringPtr("testString")
				getVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPC(getVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPC(updateVPCOptions *UpdateVPCOptions) - Operation response error`, func() {
		version := "testString"
		updateVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPC with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPCPatch model
				vpcPatchModel := new(vpcv1.VPCPatch)
				vpcPatchModel.Name = core.StringPtr("my-vpc")
				vpcPatchModelAsPatch, asPatchErr := vpcPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCOptions model
				updateVPCOptionsModel := new(vpcv1.UpdateVPCOptions)
				updateVPCOptionsModel.ID = core.StringPtr("testString")
				updateVPCOptionsModel.VPCPatch = vpcPatchModelAsPatch
				updateVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateVPC(updateVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateVPC(updateVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPC(updateVPCOptions *UpdateVPCOptions)`, func() {
		version := "testString"
		updateVPCPath := "/vpcs/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic_access": false, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}`)
				}))
			})
			It(`Invoke UpdateVPC successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VPCPatch model
				vpcPatchModel := new(vpcv1.VPCPatch)
				vpcPatchModel.Name = core.StringPtr("my-vpc")
				vpcPatchModelAsPatch, asPatchErr := vpcPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCOptions model
				updateVPCOptionsModel := new(vpcv1.UpdateVPCOptions)
				updateVPCOptionsModel.ID = core.StringPtr("testString")
				updateVPCOptionsModel.VPCPatch = vpcPatchModelAsPatch
				updateVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateVPCWithContext(ctx, updateVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateVPC(updateVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateVPCWithContext(ctx, updateVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"classic_access": false, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "cse_source_ips": [{"ip": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "default_network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "default_routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "default_security_group": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available"}`)
				}))
			})
			It(`Invoke UpdateVPC successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateVPC(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VPCPatch model
				vpcPatchModel := new(vpcv1.VPCPatch)
				vpcPatchModel.Name = core.StringPtr("my-vpc")
				vpcPatchModelAsPatch, asPatchErr := vpcPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCOptions model
				updateVPCOptionsModel := new(vpcv1.UpdateVPCOptions)
				updateVPCOptionsModel.ID = core.StringPtr("testString")
				updateVPCOptionsModel.VPCPatch = vpcPatchModelAsPatch
				updateVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateVPC(updateVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateVPC with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPCPatch model
				vpcPatchModel := new(vpcv1.VPCPatch)
				vpcPatchModel.Name = core.StringPtr("my-vpc")
				vpcPatchModelAsPatch, asPatchErr := vpcPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCOptions model
				updateVPCOptionsModel := new(vpcv1.UpdateVPCOptions)
				updateVPCOptionsModel.ID = core.StringPtr("testString")
				updateVPCOptionsModel.VPCPatch = vpcPatchModelAsPatch
				updateVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateVPC(updateVPCOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPCOptions model with no property values
				updateVPCOptionsModelNew := new(vpcv1.UpdateVPCOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateVPC(updateVPCOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateVPC successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPCPatch model
				vpcPatchModel := new(vpcv1.VPCPatch)
				vpcPatchModel.Name = core.StringPtr("my-vpc")
				vpcPatchModelAsPatch, asPatchErr := vpcPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCOptions model
				updateVPCOptionsModel := new(vpcv1.UpdateVPCOptions)
				updateVPCOptionsModel.ID = core.StringPtr("testString")
				updateVPCOptionsModel.VPCPatch = vpcPatchModelAsPatch
				updateVPCOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateVPC(updateVPCOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCDefaultNetworkACL(getVPCDefaultNetworkACLOptions *GetVPCDefaultNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		getVPCDefaultNetworkACLPath := "/vpcs/testString/default_network_acl"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCDefaultNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCDefaultNetworkACL with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultNetworkACLOptions model
				getVPCDefaultNetworkACLOptionsModel := new(vpcv1.GetVPCDefaultNetworkACLOptions)
				getVPCDefaultNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPCDefaultNetworkACL(getVPCDefaultNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPCDefaultNetworkACL(getVPCDefaultNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCDefaultNetworkACL(getVPCDefaultNetworkACLOptions *GetVPCDefaultNetworkACLOptions)`, func() {
		version := "testString"
		getVPCDefaultNetworkACLPath := "/vpcs/testString/default_network_acl"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCDefaultNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "mnemonic-ersatz-eatery-malaise", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetVPCDefaultNetworkACL successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCDefaultNetworkACLOptions model
				getVPCDefaultNetworkACLOptionsModel := new(vpcv1.GetVPCDefaultNetworkACLOptions)
				getVPCDefaultNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPCDefaultNetworkACLWithContext(ctx, getVPCDefaultNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPCDefaultNetworkACL(getVPCDefaultNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPCDefaultNetworkACLWithContext(ctx, getVPCDefaultNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCDefaultNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "mnemonic-ersatz-eatery-malaise", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetVPCDefaultNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPCDefaultNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCDefaultNetworkACLOptions model
				getVPCDefaultNetworkACLOptionsModel := new(vpcv1.GetVPCDefaultNetworkACLOptions)
				getVPCDefaultNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPCDefaultNetworkACL(getVPCDefaultNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPCDefaultNetworkACL with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultNetworkACLOptions model
				getVPCDefaultNetworkACLOptionsModel := new(vpcv1.GetVPCDefaultNetworkACLOptions)
				getVPCDefaultNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPCDefaultNetworkACL(getVPCDefaultNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCDefaultNetworkACLOptions model with no property values
				getVPCDefaultNetworkACLOptionsModelNew := new(vpcv1.GetVPCDefaultNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPCDefaultNetworkACL(getVPCDefaultNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPCDefaultNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultNetworkACLOptions model
				getVPCDefaultNetworkACLOptionsModel := new(vpcv1.GetVPCDefaultNetworkACLOptions)
				getVPCDefaultNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPCDefaultNetworkACL(getVPCDefaultNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCDefaultRoutingTable(getVPCDefaultRoutingTableOptions *GetVPCDefaultRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		getVPCDefaultRoutingTablePath := "/vpcs/testString/default_routing_table"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCDefaultRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCDefaultRoutingTable with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultRoutingTableOptions model
				getVPCDefaultRoutingTableOptionsModel := new(vpcv1.GetVPCDefaultRoutingTableOptions)
				getVPCDefaultRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPCDefaultRoutingTable(getVPCDefaultRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPCDefaultRoutingTable(getVPCDefaultRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCDefaultRoutingTable(getVPCDefaultRoutingTableOptions *GetVPCDefaultRoutingTableOptions)`, func() {
		version := "testString"
		getVPCDefaultRoutingTablePath := "/vpcs/testString/default_routing_table"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCDefaultRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "milled-easy-equine-machines", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetVPCDefaultRoutingTable successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCDefaultRoutingTableOptions model
				getVPCDefaultRoutingTableOptionsModel := new(vpcv1.GetVPCDefaultRoutingTableOptions)
				getVPCDefaultRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPCDefaultRoutingTableWithContext(ctx, getVPCDefaultRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPCDefaultRoutingTable(getVPCDefaultRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPCDefaultRoutingTableWithContext(ctx, getVPCDefaultRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCDefaultRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "milled-easy-equine-machines", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetVPCDefaultRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPCDefaultRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCDefaultRoutingTableOptions model
				getVPCDefaultRoutingTableOptionsModel := new(vpcv1.GetVPCDefaultRoutingTableOptions)
				getVPCDefaultRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPCDefaultRoutingTable(getVPCDefaultRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPCDefaultRoutingTable with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultRoutingTableOptions model
				getVPCDefaultRoutingTableOptionsModel := new(vpcv1.GetVPCDefaultRoutingTableOptions)
				getVPCDefaultRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPCDefaultRoutingTable(getVPCDefaultRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCDefaultRoutingTableOptions model with no property values
				getVPCDefaultRoutingTableOptionsModelNew := new(vpcv1.GetVPCDefaultRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPCDefaultRoutingTable(getVPCDefaultRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPCDefaultRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultRoutingTableOptions model
				getVPCDefaultRoutingTableOptionsModel := new(vpcv1.GetVPCDefaultRoutingTableOptions)
				getVPCDefaultRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPCDefaultRoutingTable(getVPCDefaultRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptions *GetVPCDefaultSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		getVPCDefaultSecurityGroupPath := "/vpcs/testString/default_security_group"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCDefaultSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCDefaultSecurityGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				getVPCDefaultSecurityGroupOptionsModel := new(vpcv1.GetVPCDefaultSecurityGroupOptions)
				getVPCDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptions *GetVPCDefaultSecurityGroupOptions)`, func() {
		version := "testString"
		getVPCDefaultSecurityGroupPath := "/vpcs/testString/default_security_group"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCDefaultSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "observant-chip-emphatic-engraver", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetVPCDefaultSecurityGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				getVPCDefaultSecurityGroupOptionsModel := new(vpcv1.GetVPCDefaultSecurityGroupOptions)
				getVPCDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPCDefaultSecurityGroupWithContext(ctx, getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPCDefaultSecurityGroupWithContext(ctx, getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCDefaultSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "observant-chip-emphatic-engraver", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetVPCDefaultSecurityGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPCDefaultSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				getVPCDefaultSecurityGroupOptionsModel := new(vpcv1.GetVPCDefaultSecurityGroupOptions)
				getVPCDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPCDefaultSecurityGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				getVPCDefaultSecurityGroupOptionsModel := new(vpcv1.GetVPCDefaultSecurityGroupOptions)
				getVPCDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCDefaultSecurityGroupOptions model with no property values
				getVPCDefaultSecurityGroupOptionsModelNew := new(vpcv1.GetVPCDefaultSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPCDefaultSecurityGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				getVPCDefaultSecurityGroupOptionsModel := new(vpcv1.GetVPCDefaultSecurityGroupOptions)
				getVPCDefaultSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getVPCDefaultSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPCDefaultSecurityGroup(getVPCDefaultSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCAddressPrefixes(listVPCAddressPrefixesOptions *ListVPCAddressPrefixesOptions) - Operation response error`, func() {
		version := "testString"
		listVPCAddressPrefixesPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCAddressPrefixesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPCAddressPrefixes with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCAddressPrefixesOptions model
				listVPCAddressPrefixesOptionsModel := new(vpcv1.ListVPCAddressPrefixesOptions)
				listVPCAddressPrefixesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Start = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCAddressPrefixes(listVPCAddressPrefixesOptions *ListVPCAddressPrefixesOptions)`, func() {
		version := "testString"
		listVPCAddressPrefixesPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCAddressPrefixesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address_prefixes": [{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00.000Z", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListVPCAddressPrefixes successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVPCAddressPrefixesOptions model
				listVPCAddressPrefixesOptionsModel := new(vpcv1.ListVPCAddressPrefixesOptions)
				listVPCAddressPrefixesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Start = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVPCAddressPrefixesWithContext(ctx, listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVPCAddressPrefixesWithContext(ctx, listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCAddressPrefixesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address_prefixes": [{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00.000Z", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/a4e28308-8ee7-46ab-8108-9f881f22bdbf/address_prefixes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListVPCAddressPrefixes successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVPCAddressPrefixes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPCAddressPrefixesOptions model
				listVPCAddressPrefixesOptionsModel := new(vpcv1.ListVPCAddressPrefixesOptions)
				listVPCAddressPrefixesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Start = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVPCAddressPrefixes with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCAddressPrefixesOptions model
				listVPCAddressPrefixesOptionsModel := new(vpcv1.ListVPCAddressPrefixesOptions)
				listVPCAddressPrefixesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Start = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPCAddressPrefixesOptions model with no property values
				listVPCAddressPrefixesOptionsModelNew := new(vpcv1.ListVPCAddressPrefixesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVPCAddressPrefixes successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCAddressPrefixesOptions model
				listVPCAddressPrefixesOptionsModel := new(vpcv1.ListVPCAddressPrefixesOptions)
				listVPCAddressPrefixesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Start = core.StringPtr("testString")
				listVPCAddressPrefixesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCAddressPrefixesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVPCAddressPrefixes(listVPCAddressPrefixesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCAddressPrefix(createVPCAddressPrefixOptions *CreateVPCAddressPrefixOptions) - Operation response error`, func() {
		version := "testString"
		createVPCAddressPrefixPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPCAddressPrefix with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				createVPCAddressPrefixOptionsModel := new(vpcv1.CreateVPCAddressPrefixOptions)
				createVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				createVPCAddressPrefixOptionsModel.CIDR = core.StringPtr("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCAddressPrefix(createVPCAddressPrefixOptions *CreateVPCAddressPrefixOptions)`, func() {
		version := "testString"
		createVPCAddressPrefixPath := "/vpcs/testString/address_prefixes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00.000Z", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVPCAddressPrefix successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				createVPCAddressPrefixOptionsModel := new(vpcv1.CreateVPCAddressPrefixOptions)
				createVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				createVPCAddressPrefixOptionsModel.CIDR = core.StringPtr("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateVPCAddressPrefixWithContext(ctx, createVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateVPCAddressPrefixWithContext(ctx, createVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00.000Z", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVPCAddressPrefix successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateVPCAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				createVPCAddressPrefixOptionsModel := new(vpcv1.CreateVPCAddressPrefixOptions)
				createVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				createVPCAddressPrefixOptionsModel.CIDR = core.StringPtr("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateVPCAddressPrefix with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				createVPCAddressPrefixOptionsModel := new(vpcv1.CreateVPCAddressPrefixOptions)
				createVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				createVPCAddressPrefixOptionsModel.CIDR = core.StringPtr("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPCAddressPrefixOptions model with no property values
				createVPCAddressPrefixOptionsModelNew := new(vpcv1.CreateVPCAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateVPCAddressPrefix successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				createVPCAddressPrefixOptionsModel := new(vpcv1.CreateVPCAddressPrefixOptions)
				createVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				createVPCAddressPrefixOptionsModel.CIDR = core.StringPtr("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.Zone = zoneIdentityModel
				createVPCAddressPrefixOptionsModel.IsDefault = core.BoolPtr(true)
				createVPCAddressPrefixOptionsModel.Name = core.StringPtr("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateVPCAddressPrefix(createVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteVPCAddressPrefix(deleteVPCAddressPrefixOptions *DeleteVPCAddressPrefixOptions)`, func() {
		version := "testString"
		deleteVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVPCAddressPrefix successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteVPCAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPCAddressPrefixOptions model
				deleteVPCAddressPrefixOptionsModel := new(vpcv1.DeleteVPCAddressPrefixOptions)
				deleteVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				deleteVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteVPCAddressPrefix(deleteVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPCAddressPrefix with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteVPCAddressPrefixOptions model
				deleteVPCAddressPrefixOptionsModel := new(vpcv1.DeleteVPCAddressPrefixOptions)
				deleteVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				deleteVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteVPCAddressPrefix(deleteVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPCAddressPrefixOptions model with no property values
				deleteVPCAddressPrefixOptionsModelNew := new(vpcv1.DeleteVPCAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteVPCAddressPrefix(deleteVPCAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCAddressPrefix(getVPCAddressPrefixOptions *GetVPCAddressPrefixOptions) - Operation response error`, func() {
		version := "testString"
		getVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCAddressPrefix with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCAddressPrefixOptions model
				getVPCAddressPrefixOptionsModel := new(vpcv1.GetVPCAddressPrefixOptions)
				getVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCAddressPrefix(getVPCAddressPrefixOptions *GetVPCAddressPrefixOptions)`, func() {
		version := "testString"
		getVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00.000Z", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVPCAddressPrefix successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCAddressPrefixOptions model
				getVPCAddressPrefixOptionsModel := new(vpcv1.GetVPCAddressPrefixOptions)
				getVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPCAddressPrefixWithContext(ctx, getVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPCAddressPrefixWithContext(ctx, getVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00.000Z", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVPCAddressPrefix successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPCAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCAddressPrefixOptions model
				getVPCAddressPrefixOptionsModel := new(vpcv1.GetVPCAddressPrefixOptions)
				getVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPCAddressPrefix with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCAddressPrefixOptions model
				getVPCAddressPrefixOptionsModel := new(vpcv1.GetVPCAddressPrefixOptions)
				getVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCAddressPrefixOptions model with no property values
				getVPCAddressPrefixOptionsModelNew := new(vpcv1.GetVPCAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPCAddressPrefix successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCAddressPrefixOptions model
				getVPCAddressPrefixOptionsModel := new(vpcv1.GetVPCAddressPrefixOptions)
				getVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				getVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPCAddressPrefix(getVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCAddressPrefix(updateVPCAddressPrefixOptions *UpdateVPCAddressPrefixOptions) - Operation response error`, func() {
		version := "testString"
		updateVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPCAddressPrefix with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddressPrefixPatch model
				addressPrefixPatchModel := new(vpcv1.AddressPrefixPatch)
				addressPrefixPatchModel.IsDefault = core.BoolPtr(false)
				addressPrefixPatchModel.Name = core.StringPtr("my-address-prefix-2")
				addressPrefixPatchModelAsPatch, asPatchErr := addressPrefixPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				updateVPCAddressPrefixOptionsModel := new(vpcv1.UpdateVPCAddressPrefixOptions)
				updateVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.AddressPrefixPatch = addressPrefixPatchModelAsPatch
				updateVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCAddressPrefix(updateVPCAddressPrefixOptions *UpdateVPCAddressPrefixOptions)`, func() {
		version := "testString"
		updateVPCAddressPrefixPath := "/vpcs/testString/address_prefixes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00.000Z", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVPCAddressPrefix successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the AddressPrefixPatch model
				addressPrefixPatchModel := new(vpcv1.AddressPrefixPatch)
				addressPrefixPatchModel.IsDefault = core.BoolPtr(false)
				addressPrefixPatchModel.Name = core.StringPtr("my-address-prefix-2")
				addressPrefixPatchModelAsPatch, asPatchErr := addressPrefixPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				updateVPCAddressPrefixOptionsModel := new(vpcv1.UpdateVPCAddressPrefixOptions)
				updateVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.AddressPrefixPatch = addressPrefixPatchModelAsPatch
				updateVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateVPCAddressPrefixWithContext(ctx, updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateVPCAddressPrefixWithContext(ctx, updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCAddressPrefixPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"cidr": "192.168.3.0/24", "created_at": "2019-01-01T12:00:00.000Z", "has_subnets": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/address_prefixes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "name": "my-address-prefix-2", "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVPCAddressPrefix successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateVPCAddressPrefix(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddressPrefixPatch model
				addressPrefixPatchModel := new(vpcv1.AddressPrefixPatch)
				addressPrefixPatchModel.IsDefault = core.BoolPtr(false)
				addressPrefixPatchModel.Name = core.StringPtr("my-address-prefix-2")
				addressPrefixPatchModelAsPatch, asPatchErr := addressPrefixPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				updateVPCAddressPrefixOptionsModel := new(vpcv1.UpdateVPCAddressPrefixOptions)
				updateVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.AddressPrefixPatch = addressPrefixPatchModelAsPatch
				updateVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateVPCAddressPrefix with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddressPrefixPatch model
				addressPrefixPatchModel := new(vpcv1.AddressPrefixPatch)
				addressPrefixPatchModel.IsDefault = core.BoolPtr(false)
				addressPrefixPatchModel.Name = core.StringPtr("my-address-prefix-2")
				addressPrefixPatchModelAsPatch, asPatchErr := addressPrefixPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				updateVPCAddressPrefixOptionsModel := new(vpcv1.UpdateVPCAddressPrefixOptions)
				updateVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.AddressPrefixPatch = addressPrefixPatchModelAsPatch
				updateVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPCAddressPrefixOptions model with no property values
				updateVPCAddressPrefixOptionsModelNew := new(vpcv1.UpdateVPCAddressPrefixOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateVPCAddressPrefix successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddressPrefixPatch model
				addressPrefixPatchModel := new(vpcv1.AddressPrefixPatch)
				addressPrefixPatchModel.IsDefault = core.BoolPtr(false)
				addressPrefixPatchModel.Name = core.StringPtr("my-address-prefix-2")
				addressPrefixPatchModelAsPatch, asPatchErr := addressPrefixPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				updateVPCAddressPrefixOptionsModel := new(vpcv1.UpdateVPCAddressPrefixOptions)
				updateVPCAddressPrefixOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.ID = core.StringPtr("testString")
				updateVPCAddressPrefixOptionsModel.AddressPrefixPatch = addressPrefixPatchModelAsPatch
				updateVPCAddressPrefixOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateVPCAddressPrefix(updateVPCAddressPrefixOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCRoutes(listVPCRoutesOptions *ListVPCRoutesOptions) - Operation response error`, func() {
		version := "testString"
		listVPCRoutesPath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCRoutesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPCRoutes with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutesOptions model
				listVPCRoutesOptionsModel := new(vpcv1.ListVPCRoutesOptions)
				listVPCRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVPCRoutes(listVPCRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVPCRoutes(listVPCRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCRoutes(listVPCRoutesOptions *ListVPCRoutesOptions)`, func() {
		version := "testString"
		listVPCRoutesPath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCRoutesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20"}, "routes": [{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListVPCRoutes successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVPCRoutesOptions model
				listVPCRoutesOptionsModel := new(vpcv1.ListVPCRoutesOptions)
				listVPCRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVPCRoutesWithContext(ctx, listVPCRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVPCRoutes(listVPCRoutesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVPCRoutesWithContext(ctx, listVPCRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCRoutesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20"}, "routes": [{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListVPCRoutes successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVPCRoutes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPCRoutesOptions model
				listVPCRoutesOptionsModel := new(vpcv1.ListVPCRoutesOptions)
				listVPCRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVPCRoutes(listVPCRoutesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVPCRoutes with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutesOptions model
				listVPCRoutesOptionsModel := new(vpcv1.ListVPCRoutesOptions)
				listVPCRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVPCRoutes(listVPCRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPCRoutesOptions model with no property values
				listVPCRoutesOptionsModelNew := new(vpcv1.ListVPCRoutesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListVPCRoutes(listVPCRoutesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVPCRoutes successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutesOptions model
				listVPCRoutesOptionsModel := new(vpcv1.ListVPCRoutesOptions)
				listVPCRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutesOptionsModel.ZoneName = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVPCRoutes(listVPCRoutesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCRoute(createVPCRouteOptions *CreateVPCRouteOptions) - Operation response error`, func() {
		version := "testString"
		createVPCRoutePath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCRoutePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPCRoute with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRouteOptions model
				createVPCRouteOptionsModel := new(vpcv1.CreateVPCRouteOptions)
				createVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateVPCRoute(createVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateVPCRoute(createVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCRoute(createVPCRouteOptions *CreateVPCRouteOptions)`, func() {
		version := "testString"
		createVPCRoutePath := "/vpcs/testString/routes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCRoutePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVPCRoute successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRouteOptions model
				createVPCRouteOptionsModel := new(vpcv1.CreateVPCRouteOptions)
				createVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateVPCRouteWithContext(ctx, createVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateVPCRoute(createVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateVPCRouteWithContext(ctx, createVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCRoutePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVPCRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateVPCRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRouteOptions model
				createVPCRouteOptionsModel := new(vpcv1.CreateVPCRouteOptions)
				createVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateVPCRoute(createVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateVPCRoute with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRouteOptions model
				createVPCRouteOptionsModel := new(vpcv1.CreateVPCRouteOptions)
				createVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateVPCRoute(createVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPCRouteOptions model with no property values
				createVPCRouteOptionsModelNew := new(vpcv1.CreateVPCRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateVPCRoute(createVPCRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateVPCRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRouteOptions model
				createVPCRouteOptionsModel := new(vpcv1.CreateVPCRouteOptions)
				createVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateVPCRoute(createVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteVPCRoute(deleteVPCRouteOptions *DeleteVPCRouteOptions)`, func() {
		version := "testString"
		deleteVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVPCRoutePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVPCRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteVPCRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPCRouteOptions model
				deleteVPCRouteOptionsModel := new(vpcv1.DeleteVPCRouteOptions)
				deleteVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteVPCRoute(deleteVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPCRoute with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteVPCRouteOptions model
				deleteVPCRouteOptionsModel := new(vpcv1.DeleteVPCRouteOptions)
				deleteVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteVPCRoute(deleteVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPCRouteOptions model with no property values
				deleteVPCRouteOptionsModelNew := new(vpcv1.DeleteVPCRouteOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteVPCRoute(deleteVPCRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCRoute(getVPCRouteOptions *GetVPCRouteOptions) - Operation response error`, func() {
		version := "testString"
		getVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCRoutePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCRoute with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCRouteOptions model
				getVPCRouteOptionsModel := new(vpcv1.GetVPCRouteOptions)
				getVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPCRoute(getVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPCRoute(getVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCRoute(getVPCRouteOptions *GetVPCRouteOptions)`, func() {
		version := "testString"
		getVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCRoutePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVPCRoute successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCRouteOptions model
				getVPCRouteOptionsModel := new(vpcv1.GetVPCRouteOptions)
				getVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPCRouteWithContext(ctx, getVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPCRoute(getVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPCRouteWithContext(ctx, getVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCRoutePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVPCRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPCRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCRouteOptions model
				getVPCRouteOptionsModel := new(vpcv1.GetVPCRouteOptions)
				getVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPCRoute(getVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPCRoute with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCRouteOptions model
				getVPCRouteOptionsModel := new(vpcv1.GetVPCRouteOptions)
				getVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPCRoute(getVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCRouteOptions model with no property values
				getVPCRouteOptionsModelNew := new(vpcv1.GetVPCRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPCRoute(getVPCRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPCRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCRouteOptions model
				getVPCRouteOptionsModel := new(vpcv1.GetVPCRouteOptions)
				getVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPCRoute(getVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCRoute(updateVPCRouteOptions *UpdateVPCRouteOptions) - Operation response error`, func() {
		version := "testString"
		updateVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCRoutePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPCRoute with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRouteOptions model
				updateVPCRouteOptionsModel := new(vpcv1.UpdateVPCRouteOptions)
				updateVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateVPCRoute(updateVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateVPCRoute(updateVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCRoute(updateVPCRouteOptions *UpdateVPCRouteOptions)`, func() {
		version := "testString"
		updateVPCRoutePath := "/vpcs/testString/routes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCRoutePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVPCRoute successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRouteOptions model
				updateVPCRouteOptionsModel := new(vpcv1.UpdateVPCRouteOptions)
				updateVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateVPCRouteWithContext(ctx, updateVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateVPCRoute(updateVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateVPCRouteWithContext(ctx, updateVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCRoutePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVPCRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateVPCRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRouteOptions model
				updateVPCRouteOptionsModel := new(vpcv1.UpdateVPCRouteOptions)
				updateVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateVPCRoute(updateVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateVPCRoute with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRouteOptions model
				updateVPCRouteOptionsModel := new(vpcv1.UpdateVPCRouteOptions)
				updateVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateVPCRoute(updateVPCRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPCRouteOptions model with no property values
				updateVPCRouteOptionsModelNew := new(vpcv1.UpdateVPCRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateVPCRoute(updateVPCRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateVPCRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRouteOptions model
				updateVPCRouteOptionsModel := new(vpcv1.UpdateVPCRouteOptions)
				updateVPCRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateVPCRoute(updateVPCRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCRoutingTables(listVPCRoutingTablesOptions *ListVPCRoutingTablesOptions) - Operation response error`, func() {
		version := "testString"
		listVPCRoutingTablesPath := "/vpcs/testString/routing_tables"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCRoutingTablesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// TODO: Add check for is_default query parameter
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPCRoutingTables with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutingTablesOptions model
				listVPCRoutingTablesOptionsModel := new(vpcv1.ListVPCRoutingTablesOptions)
				listVPCRoutingTablesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTablesOptionsModel.IsDefault = core.BoolPtr(true)
				listVPCRoutingTablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVPCRoutingTables(listVPCRoutingTablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVPCRoutingTables(listVPCRoutingTablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCRoutingTables(listVPCRoutingTablesOptions *ListVPCRoutingTablesOptions)`, func() {
		version := "testString"
		listVPCRoutingTablesPath := "/vpcs/testString/routing_tables"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCRoutingTablesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// TODO: Add check for is_default query parameter
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "routing_tables": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListVPCRoutingTables successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVPCRoutingTablesOptions model
				listVPCRoutingTablesOptionsModel := new(vpcv1.ListVPCRoutingTablesOptions)
				listVPCRoutingTablesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTablesOptionsModel.IsDefault = core.BoolPtr(true)
				listVPCRoutingTablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVPCRoutingTablesWithContext(ctx, listVPCRoutingTablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVPCRoutingTables(listVPCRoutingTablesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVPCRoutingTablesWithContext(ctx, listVPCRoutingTablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCRoutingTablesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// TODO: Add check for is_default query parameter
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "routing_tables": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListVPCRoutingTables successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVPCRoutingTables(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPCRoutingTablesOptions model
				listVPCRoutingTablesOptionsModel := new(vpcv1.ListVPCRoutingTablesOptions)
				listVPCRoutingTablesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTablesOptionsModel.IsDefault = core.BoolPtr(true)
				listVPCRoutingTablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVPCRoutingTables(listVPCRoutingTablesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVPCRoutingTables with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutingTablesOptions model
				listVPCRoutingTablesOptionsModel := new(vpcv1.ListVPCRoutingTablesOptions)
				listVPCRoutingTablesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTablesOptionsModel.IsDefault = core.BoolPtr(true)
				listVPCRoutingTablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVPCRoutingTables(listVPCRoutingTablesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPCRoutingTablesOptions model with no property values
				listVPCRoutingTablesOptionsModelNew := new(vpcv1.ListVPCRoutingTablesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListVPCRoutingTables(listVPCRoutingTablesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVPCRoutingTables successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutingTablesOptions model
				listVPCRoutingTablesOptionsModel := new(vpcv1.ListVPCRoutingTablesOptions)
				listVPCRoutingTablesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTablesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTablesOptionsModel.IsDefault = core.BoolPtr(true)
				listVPCRoutingTablesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVPCRoutingTables(listVPCRoutingTablesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCRoutingTable(createVPCRoutingTableOptions *CreateVPCRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		createVPCRoutingTablePath := "/vpcs/testString/routing_tables"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCRoutingTablePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPCRoutingTable with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateVPCRoutingTableOptions model
				createVPCRoutingTableOptionsModel := new(vpcv1.CreateVPCRoutingTableOptions)
				createVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				createVPCRoutingTableOptionsModel.RouteDirectLinkIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteVPCZoneIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.Routes = []vpcv1.RoutePrototype{*routePrototypeModel}
				createVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateVPCRoutingTable(createVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateVPCRoutingTable(createVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCRoutingTable(createVPCRoutingTableOptions *CreateVPCRoutingTableOptions)`, func() {
		version := "testString"
		createVPCRoutingTablePath := "/vpcs/testString/routing_tables"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCRoutingTablePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateVPCRoutingTable successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateVPCRoutingTableOptions model
				createVPCRoutingTableOptionsModel := new(vpcv1.CreateVPCRoutingTableOptions)
				createVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				createVPCRoutingTableOptionsModel.RouteDirectLinkIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteVPCZoneIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.Routes = []vpcv1.RoutePrototype{*routePrototypeModel}
				createVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateVPCRoutingTableWithContext(ctx, createVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateVPCRoutingTable(createVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateVPCRoutingTableWithContext(ctx, createVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCRoutingTablePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateVPCRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateVPCRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateVPCRoutingTableOptions model
				createVPCRoutingTableOptionsModel := new(vpcv1.CreateVPCRoutingTableOptions)
				createVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				createVPCRoutingTableOptionsModel.RouteDirectLinkIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteVPCZoneIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.Routes = []vpcv1.RoutePrototype{*routePrototypeModel}
				createVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateVPCRoutingTable(createVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateVPCRoutingTable with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateVPCRoutingTableOptions model
				createVPCRoutingTableOptionsModel := new(vpcv1.CreateVPCRoutingTableOptions)
				createVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				createVPCRoutingTableOptionsModel.RouteDirectLinkIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteVPCZoneIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.Routes = []vpcv1.RoutePrototype{*routePrototypeModel}
				createVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateVPCRoutingTable(createVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPCRoutingTableOptions model with no property values
				createVPCRoutingTableOptionsModelNew := new(vpcv1.CreateVPCRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateVPCRoutingTable(createVPCRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateVPCRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateVPCRoutingTableOptions model
				createVPCRoutingTableOptionsModel := new(vpcv1.CreateVPCRoutingTableOptions)
				createVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableOptionsModel.Name = core.StringPtr("my-routing-table-2")
				createVPCRoutingTableOptionsModel.RouteDirectLinkIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.RouteVPCZoneIngress = core.BoolPtr(true)
				createVPCRoutingTableOptionsModel.Routes = []vpcv1.RoutePrototype{*routePrototypeModel}
				createVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateVPCRoutingTable(createVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteVPCRoutingTable(deleteVPCRoutingTableOptions *DeleteVPCRoutingTableOptions)`, func() {
		version := "testString"
		deleteVPCRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVPCRoutingTablePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVPCRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteVPCRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPCRoutingTableOptions model
				deleteVPCRoutingTableOptionsModel := new(vpcv1.DeleteVPCRoutingTableOptions)
				deleteVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				deleteVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteVPCRoutingTable(deleteVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPCRoutingTable with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteVPCRoutingTableOptions model
				deleteVPCRoutingTableOptionsModel := new(vpcv1.DeleteVPCRoutingTableOptions)
				deleteVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				deleteVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteVPCRoutingTable(deleteVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPCRoutingTableOptions model with no property values
				deleteVPCRoutingTableOptionsModelNew := new(vpcv1.DeleteVPCRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteVPCRoutingTable(deleteVPCRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCRoutingTable(getVPCRoutingTableOptions *GetVPCRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		getVPCRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCRoutingTable with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCRoutingTableOptions model
				getVPCRoutingTableOptionsModel := new(vpcv1.GetVPCRoutingTableOptions)
				getVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPCRoutingTable(getVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPCRoutingTable(getVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCRoutingTable(getVPCRoutingTableOptions *GetVPCRoutingTableOptions)`, func() {
		version := "testString"
		getVPCRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetVPCRoutingTable successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCRoutingTableOptions model
				getVPCRoutingTableOptionsModel := new(vpcv1.GetVPCRoutingTableOptions)
				getVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPCRoutingTableWithContext(ctx, getVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPCRoutingTable(getVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPCRoutingTableWithContext(ctx, getVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetVPCRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPCRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCRoutingTableOptions model
				getVPCRoutingTableOptionsModel := new(vpcv1.GetVPCRoutingTableOptions)
				getVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPCRoutingTable(getVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPCRoutingTable with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCRoutingTableOptions model
				getVPCRoutingTableOptionsModel := new(vpcv1.GetVPCRoutingTableOptions)
				getVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPCRoutingTable(getVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCRoutingTableOptions model with no property values
				getVPCRoutingTableOptionsModelNew := new(vpcv1.GetVPCRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPCRoutingTable(getVPCRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPCRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCRoutingTableOptions model
				getVPCRoutingTableOptionsModel := new(vpcv1.GetVPCRoutingTableOptions)
				getVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPCRoutingTable(getVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCRoutingTable(updateVPCRoutingTableOptions *UpdateVPCRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		updateVPCRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCRoutingTablePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPCRoutingTable with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutingTablePatch model
				routingTablePatchModel := new(vpcv1.RoutingTablePatch)
				routingTablePatchModel.Name = core.StringPtr("my-routing-table-2")
				routingTablePatchModel.RouteDirectLinkIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteVPCZoneIngress = core.BoolPtr(true)
				routingTablePatchModelAsPatch, asPatchErr := routingTablePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableOptions model
				updateVPCRoutingTableOptionsModel := new(vpcv1.UpdateVPCRoutingTableOptions)
				updateVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.RoutingTablePatch = routingTablePatchModelAsPatch
				updateVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateVPCRoutingTable(updateVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateVPCRoutingTable(updateVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCRoutingTable(updateVPCRoutingTableOptions *UpdateVPCRoutingTableOptions)`, func() {
		version := "testString"
		updateVPCRoutingTablePath := "/vpcs/testString/routing_tables/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCRoutingTablePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateVPCRoutingTable successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the RoutingTablePatch model
				routingTablePatchModel := new(vpcv1.RoutingTablePatch)
				routingTablePatchModel.Name = core.StringPtr("my-routing-table-2")
				routingTablePatchModel.RouteDirectLinkIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteVPCZoneIngress = core.BoolPtr(true)
				routingTablePatchModelAsPatch, asPatchErr := routingTablePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableOptions model
				updateVPCRoutingTableOptionsModel := new(vpcv1.UpdateVPCRoutingTableOptions)
				updateVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.RoutingTablePatch = routingTablePatchModelAsPatch
				updateVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateVPCRoutingTableWithContext(ctx, updateVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateVPCRoutingTable(updateVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateVPCRoutingTableWithContext(ctx, updateVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCRoutingTablePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateVPCRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateVPCRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RoutingTablePatch model
				routingTablePatchModel := new(vpcv1.RoutingTablePatch)
				routingTablePatchModel.Name = core.StringPtr("my-routing-table-2")
				routingTablePatchModel.RouteDirectLinkIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteVPCZoneIngress = core.BoolPtr(true)
				routingTablePatchModelAsPatch, asPatchErr := routingTablePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableOptions model
				updateVPCRoutingTableOptionsModel := new(vpcv1.UpdateVPCRoutingTableOptions)
				updateVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.RoutingTablePatch = routingTablePatchModelAsPatch
				updateVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateVPCRoutingTable(updateVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateVPCRoutingTable with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutingTablePatch model
				routingTablePatchModel := new(vpcv1.RoutingTablePatch)
				routingTablePatchModel.Name = core.StringPtr("my-routing-table-2")
				routingTablePatchModel.RouteDirectLinkIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteVPCZoneIngress = core.BoolPtr(true)
				routingTablePatchModelAsPatch, asPatchErr := routingTablePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableOptions model
				updateVPCRoutingTableOptionsModel := new(vpcv1.UpdateVPCRoutingTableOptions)
				updateVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.RoutingTablePatch = routingTablePatchModelAsPatch
				updateVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateVPCRoutingTable(updateVPCRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPCRoutingTableOptions model with no property values
				updateVPCRoutingTableOptionsModelNew := new(vpcv1.UpdateVPCRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateVPCRoutingTable(updateVPCRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateVPCRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutingTablePatch model
				routingTablePatchModel := new(vpcv1.RoutingTablePatch)
				routingTablePatchModel.Name = core.StringPtr("my-routing-table-2")
				routingTablePatchModel.RouteDirectLinkIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteTransitGatewayIngress = core.BoolPtr(true)
				routingTablePatchModel.RouteVPCZoneIngress = core.BoolPtr(true)
				routingTablePatchModelAsPatch, asPatchErr := routingTablePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableOptions model
				updateVPCRoutingTableOptionsModel := new(vpcv1.UpdateVPCRoutingTableOptions)
				updateVPCRoutingTableOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableOptionsModel.RoutingTablePatch = routingTablePatchModelAsPatch
				updateVPCRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateVPCRoutingTable(updateVPCRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCRoutingTableRoutes(listVPCRoutingTableRoutesOptions *ListVPCRoutingTableRoutesOptions) - Operation response error`, func() {
		version := "testString"
		listVPCRoutingTableRoutesPath := "/vpcs/testString/routing_tables/testString/routes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCRoutingTableRoutesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPCRoutingTableRoutes with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutingTableRoutesOptions model
				listVPCRoutingTableRoutesOptionsModel := new(vpcv1.ListVPCRoutingTableRoutesOptions)
				listVPCRoutingTableRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.RoutingTableID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTableRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVPCRoutingTableRoutes(listVPCRoutingTableRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVPCRoutingTableRoutes(listVPCRoutingTableRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPCRoutingTableRoutes(listVPCRoutingTableRoutesOptions *ListVPCRoutingTableRoutesOptions)`, func() {
		version := "testString"
		listVPCRoutingTableRoutesPath := "/vpcs/testString/routing_tables/testString/routes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCRoutingTableRoutesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20"}, "routes": [{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListVPCRoutingTableRoutes successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVPCRoutingTableRoutesOptions model
				listVPCRoutingTableRoutesOptionsModel := new(vpcv1.ListVPCRoutingTableRoutesOptions)
				listVPCRoutingTableRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.RoutingTableID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTableRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVPCRoutingTableRoutesWithContext(ctx, listVPCRoutingTableRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVPCRoutingTableRoutes(listVPCRoutingTableRoutesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVPCRoutingTableRoutesWithContext(ctx, listVPCRoutingTableRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPCRoutingTableRoutesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/1a15dca5-7e33-45e1-b7c5-bc690e569531/routes?start=a5e812a2-62c0-4555-86a5-907106760c56&limit=20"}, "routes": [{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListVPCRoutingTableRoutes successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVPCRoutingTableRoutes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPCRoutingTableRoutesOptions model
				listVPCRoutingTableRoutesOptionsModel := new(vpcv1.ListVPCRoutingTableRoutesOptions)
				listVPCRoutingTableRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.RoutingTableID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTableRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVPCRoutingTableRoutes(listVPCRoutingTableRoutesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVPCRoutingTableRoutes with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutingTableRoutesOptions model
				listVPCRoutingTableRoutesOptionsModel := new(vpcv1.ListVPCRoutingTableRoutesOptions)
				listVPCRoutingTableRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.RoutingTableID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTableRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVPCRoutingTableRoutes(listVPCRoutingTableRoutesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPCRoutingTableRoutesOptions model with no property values
				listVPCRoutingTableRoutesOptionsModelNew := new(vpcv1.ListVPCRoutingTableRoutesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListVPCRoutingTableRoutes(listVPCRoutingTableRoutesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVPCRoutingTableRoutes successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPCRoutingTableRoutesOptions model
				listVPCRoutingTableRoutesOptionsModel := new(vpcv1.ListVPCRoutingTableRoutesOptions)
				listVPCRoutingTableRoutesOptionsModel.VPCID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.RoutingTableID = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Start = core.StringPtr("testString")
				listVPCRoutingTableRoutesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPCRoutingTableRoutesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVPCRoutingTableRoutes(listVPCRoutingTableRoutesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCRoutingTableRoute(createVPCRoutingTableRouteOptions *CreateVPCRoutingTableRouteOptions) - Operation response error`, func() {
		version := "testString"
		createVPCRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPCRoutingTableRoute with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRoutingTableRouteOptions model
				createVPCRoutingTableRouteOptionsModel := new(vpcv1.CreateVPCRoutingTableRouteOptions)
				createVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRoutingTableRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRoutingTableRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRoutingTableRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateVPCRoutingTableRoute(createVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateVPCRoutingTableRoute(createVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPCRoutingTableRoute(createVPCRoutingTableRouteOptions *CreateVPCRoutingTableRouteOptions)`, func() {
		version := "testString"
		createVPCRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVPCRoutingTableRoute successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRoutingTableRouteOptions model
				createVPCRoutingTableRouteOptionsModel := new(vpcv1.CreateVPCRoutingTableRouteOptions)
				createVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRoutingTableRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRoutingTableRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRoutingTableRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateVPCRoutingTableRouteWithContext(ctx, createVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateVPCRoutingTableRoute(createVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateVPCRoutingTableRouteWithContext(ctx, createVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVPCRoutingTableRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateVPCRoutingTableRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRoutingTableRouteOptions model
				createVPCRoutingTableRouteOptionsModel := new(vpcv1.CreateVPCRoutingTableRouteOptions)
				createVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRoutingTableRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRoutingTableRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRoutingTableRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateVPCRoutingTableRoute(createVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateVPCRoutingTableRoute with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRoutingTableRouteOptions model
				createVPCRoutingTableRouteOptionsModel := new(vpcv1.CreateVPCRoutingTableRouteOptions)
				createVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRoutingTableRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRoutingTableRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRoutingTableRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateVPCRoutingTableRoute(createVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPCRoutingTableRouteOptions model with no property values
				createVPCRoutingTableRouteOptionsModelNew := new(vpcv1.CreateVPCRoutingTableRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateVPCRoutingTableRoute(createVPCRoutingTableRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateVPCRoutingTableRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the CreateVPCRoutingTableRouteOptions model
				createVPCRoutingTableRouteOptionsModel := new(vpcv1.CreateVPCRoutingTableRouteOptions)
				createVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				createVPCRoutingTableRouteOptionsModel.Destination = core.StringPtr("192.168.3.0/24")
				createVPCRoutingTableRouteOptionsModel.Zone = zoneIdentityModel
				createVPCRoutingTableRouteOptionsModel.Action = core.StringPtr("delegate")
				createVPCRoutingTableRouteOptionsModel.Name = core.StringPtr("my-route-2")
				createVPCRoutingTableRouteOptionsModel.NextHop = routeNextHopPrototypeModel
				createVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateVPCRoutingTableRoute(createVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteVPCRoutingTableRoute(deleteVPCRoutingTableRouteOptions *DeleteVPCRoutingTableRouteOptions)`, func() {
		version := "testString"
		deleteVPCRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVPCRoutingTableRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteVPCRoutingTableRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPCRoutingTableRouteOptions model
				deleteVPCRoutingTableRouteOptionsModel := new(vpcv1.DeleteVPCRoutingTableRouteOptions)
				deleteVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				deleteVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteVPCRoutingTableRoute(deleteVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPCRoutingTableRoute with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteVPCRoutingTableRouteOptions model
				deleteVPCRoutingTableRouteOptionsModel := new(vpcv1.DeleteVPCRoutingTableRouteOptions)
				deleteVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				deleteVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				deleteVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				deleteVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteVPCRoutingTableRoute(deleteVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPCRoutingTableRouteOptions model with no property values
				deleteVPCRoutingTableRouteOptionsModelNew := new(vpcv1.DeleteVPCRoutingTableRouteOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteVPCRoutingTableRoute(deleteVPCRoutingTableRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCRoutingTableRoute(getVPCRoutingTableRouteOptions *GetVPCRoutingTableRouteOptions) - Operation response error`, func() {
		version := "testString"
		getVPCRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPCRoutingTableRoute with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCRoutingTableRouteOptions model
				getVPCRoutingTableRouteOptionsModel := new(vpcv1.GetVPCRoutingTableRouteOptions)
				getVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPCRoutingTableRoute(getVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPCRoutingTableRoute(getVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPCRoutingTableRoute(getVPCRoutingTableRouteOptions *GetVPCRoutingTableRouteOptions)`, func() {
		version := "testString"
		getVPCRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVPCRoutingTableRoute successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPCRoutingTableRouteOptions model
				getVPCRoutingTableRouteOptionsModel := new(vpcv1.GetVPCRoutingTableRouteOptions)
				getVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPCRoutingTableRouteWithContext(ctx, getVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPCRoutingTableRoute(getVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPCRoutingTableRouteWithContext(ctx, getVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVPCRoutingTableRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPCRoutingTableRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPCRoutingTableRouteOptions model
				getVPCRoutingTableRouteOptionsModel := new(vpcv1.GetVPCRoutingTableRouteOptions)
				getVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPCRoutingTableRoute(getVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPCRoutingTableRoute with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCRoutingTableRouteOptions model
				getVPCRoutingTableRouteOptionsModel := new(vpcv1.GetVPCRoutingTableRouteOptions)
				getVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPCRoutingTableRoute(getVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPCRoutingTableRouteOptions model with no property values
				getVPCRoutingTableRouteOptionsModelNew := new(vpcv1.GetVPCRoutingTableRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPCRoutingTableRoute(getVPCRoutingTableRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPCRoutingTableRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPCRoutingTableRouteOptions model
				getVPCRoutingTableRouteOptionsModel := new(vpcv1.GetVPCRoutingTableRouteOptions)
				getVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				getVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPCRoutingTableRoute(getVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCRoutingTableRoute(updateVPCRoutingTableRouteOptions *UpdateVPCRoutingTableRouteOptions) - Operation response error`, func() {
		version := "testString"
		updateVPCRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPCRoutingTableRoute with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableRouteOptions model
				updateVPCRoutingTableRouteOptionsModel := new(vpcv1.UpdateVPCRoutingTableRouteOptions)
				updateVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateVPCRoutingTableRoute(updateVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateVPCRoutingTableRoute(updateVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPCRoutingTableRoute(updateVPCRoutingTableRouteOptions *UpdateVPCRoutingTableRouteOptions)`, func() {
		version := "testString"
		updateVPCRoutingTableRoutePath := "/vpcs/testString/routing_tables/testString/routes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVPCRoutingTableRoute successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableRouteOptions model
				updateVPCRoutingTableRouteOptionsModel := new(vpcv1.UpdateVPCRoutingTableRouteOptions)
				updateVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateVPCRoutingTableRouteWithContext(ctx, updateVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateVPCRoutingTableRoute(updateVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateVPCRoutingTableRouteWithContext(ctx, updateVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPCRoutingTableRoutePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "lifecycle_state": "stable", "name": "my-route-1", "next_hop": {"address": "192.168.3.4"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVPCRoutingTableRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateVPCRoutingTableRoute(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableRouteOptions model
				updateVPCRoutingTableRouteOptionsModel := new(vpcv1.UpdateVPCRoutingTableRouteOptions)
				updateVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateVPCRoutingTableRoute(updateVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateVPCRoutingTableRoute with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableRouteOptions model
				updateVPCRoutingTableRouteOptionsModel := new(vpcv1.UpdateVPCRoutingTableRouteOptions)
				updateVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateVPCRoutingTableRoute(updateVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPCRoutingTableRouteOptions model with no property values
				updateVPCRoutingTableRouteOptionsModelNew := new(vpcv1.UpdateVPCRoutingTableRouteOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateVPCRoutingTableRoute(updateVPCRoutingTableRouteOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateVPCRoutingTableRoute successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutePatch model
				routePatchModel := new(vpcv1.RoutePatch)
				routePatchModel.Name = core.StringPtr("my-route-2")
				routePatchModelAsPatch, asPatchErr := routePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPCRoutingTableRouteOptions model
				updateVPCRoutingTableRouteOptionsModel := new(vpcv1.UpdateVPCRoutingTableRouteOptions)
				updateVPCRoutingTableRouteOptionsModel.VPCID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutingTableID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.ID = core.StringPtr("testString")
				updateVPCRoutingTableRouteOptionsModel.RoutePatch = routePatchModelAsPatch
				updateVPCRoutingTableRouteOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateVPCRoutingTableRoute(updateVPCRoutingTableRouteOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSubnets(listSubnetsOptions *ListSubnetsOptions) - Operation response error`, func() {
		version := "testString"
		listSubnetsPath := "/subnets"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["routing_table.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["routing_table.name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSubnets with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableName = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSubnets(listSubnetsOptions *ListSubnetsOptions)`, func() {
		version := "testString"
		listSubnetsPath := "/subnets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["routing_table.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["routing_table.name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "subnets": [{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "ipv4", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListSubnets successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableName = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListSubnetsWithContext(ctx, listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListSubnetsWithContext(ctx, listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubnetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["routing_table.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["routing_table.name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "subnets": [{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "ipv4", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListSubnets successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListSubnets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableName = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSubnets with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableName = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListSubnets successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := new(vpcv1.ListSubnetsOptions)
				listSubnetsOptionsModel.Start = core.StringPtr("testString")
				listSubnetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableID = core.StringPtr("testString")
				listSubnetsOptionsModel.RoutingTableName = core.StringPtr("testString")
				listSubnetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListSubnets(listSubnetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSubnet(createSubnetOptions *CreateSubnetOptions) - Operation response error`, func() {
		version := "testString"
		createSubnetPath := "/subnets"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSubnetPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSubnet with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.IPVersion = core.StringPtr("ipv4")
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSubnet(createSubnetOptions *CreateSubnetOptions)`, func() {
		version := "testString"
		createSubnetPath := "/subnets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSubnetPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "ipv4", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateSubnet successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.IPVersion = core.StringPtr("ipv4")
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateSubnetWithContext(ctx, createSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateSubnetWithContext(ctx, createSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSubnetPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "ipv4", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateSubnet successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.IPVersion = core.StringPtr("ipv4")
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSubnet with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.IPVersion = core.StringPtr("ipv4")
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSubnetOptions model with no property values
				createSubnetOptionsModelNew := new(vpcv1.CreateSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateSubnet(createSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateSubnet successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				subnetPrototypeModel.IPVersion = core.StringPtr("ipv4")
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateSubnetOptions model
				createSubnetOptionsModel := new(vpcv1.CreateSubnetOptions)
				createSubnetOptionsModel.SubnetPrototype = subnetPrototypeModel
				createSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateSubnet(createSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteSubnet(deleteSubnetOptions *DeleteSubnetOptions)`, func() {
		version := "testString"
		deleteSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteSubnetPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSubnet successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSubnetOptions model
				deleteSubnetOptionsModel := new(vpcv1.DeleteSubnetOptions)
				deleteSubnetOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteSubnet(deleteSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSubnet with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteSubnetOptions model
				deleteSubnetOptionsModel := new(vpcv1.DeleteSubnetOptions)
				deleteSubnetOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteSubnet(deleteSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSubnetOptions model with no property values
				deleteSubnetOptionsModelNew := new(vpcv1.DeleteSubnetOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteSubnet(deleteSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnet(getSubnetOptions *GetSubnetOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnet with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnet(getSubnetOptions *GetSubnetOptions)`, func() {
		version := "testString"
		getSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "ipv4", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetSubnet successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetSubnetWithContext(ctx, getSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetSubnetWithContext(ctx, getSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "ipv4", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetSubnet successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSubnet with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetOptions model with no property values
				getSubnetOptionsModelNew := new(vpcv1.GetSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetSubnet(getSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSubnet successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetOptions model
				getSubnetOptionsModel := new(vpcv1.GetSubnetOptions)
				getSubnetOptionsModel.ID = core.StringPtr("testString")
				getSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetSubnet(getSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSubnet(updateSubnetOptions *UpdateSubnetOptions) - Operation response error`, func() {
		version := "testString"
		updateSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSubnetPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSubnet with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the SubnetPatch model
				subnetPatchModel := new(vpcv1.SubnetPatch)
				subnetPatchModel.Name = core.StringPtr("my-subnet")
				subnetPatchModel.NetworkACL = networkACLIdentityModel
				subnetPatchModel.PublicGateway = publicGatewayIdentityModel
				subnetPatchModel.RoutingTable = routingTableIdentityModel
				subnetPatchModelAsPatch, asPatchErr := subnetPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.SubnetPatch = subnetPatchModelAsPatch
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSubnet(updateSubnetOptions *UpdateSubnetOptions)`, func() {
		version := "testString"
		updateSubnetPath := "/subnets/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSubnetPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "ipv4", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateSubnet successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the SubnetPatch model
				subnetPatchModel := new(vpcv1.SubnetPatch)
				subnetPatchModel.Name = core.StringPtr("my-subnet")
				subnetPatchModel.NetworkACL = networkACLIdentityModel
				subnetPatchModel.PublicGateway = publicGatewayIdentityModel
				subnetPatchModel.RoutingTable = routingTableIdentityModel
				subnetPatchModelAsPatch, asPatchErr := subnetPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.SubnetPatch = subnetPatchModelAsPatch
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateSubnetWithContext(ctx, updateSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateSubnetWithContext(ctx, updateSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSubnetPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available_ipv4_address_count": 15, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "ip_version": "ipv4", "ipv4_cidr_block": "10.0.0.0/24", "name": "my-subnet", "network_acl": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl"}, "public_gateway": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_type": "public_gateway"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "routing_table": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-routing-table-1", "resource_type": "routing_table"}, "status": "available", "total_ipv4_address_count": 256, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateSubnet successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateSubnet(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the SubnetPatch model
				subnetPatchModel := new(vpcv1.SubnetPatch)
				subnetPatchModel.Name = core.StringPtr("my-subnet")
				subnetPatchModel.NetworkACL = networkACLIdentityModel
				subnetPatchModel.PublicGateway = publicGatewayIdentityModel
				subnetPatchModel.RoutingTable = routingTableIdentityModel
				subnetPatchModelAsPatch, asPatchErr := subnetPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.SubnetPatch = subnetPatchModelAsPatch
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateSubnet with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the SubnetPatch model
				subnetPatchModel := new(vpcv1.SubnetPatch)
				subnetPatchModel.Name = core.StringPtr("my-subnet")
				subnetPatchModel.NetworkACL = networkACLIdentityModel
				subnetPatchModel.PublicGateway = publicGatewayIdentityModel
				subnetPatchModel.RoutingTable = routingTableIdentityModel
				subnetPatchModelAsPatch, asPatchErr := subnetPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.SubnetPatch = subnetPatchModelAsPatch
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSubnetOptions model with no property values
				updateSubnetOptionsModelNew := new(vpcv1.UpdateSubnetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateSubnet(updateSubnetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateSubnet successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")

				// Construct an instance of the SubnetPatch model
				subnetPatchModel := new(vpcv1.SubnetPatch)
				subnetPatchModel.Name = core.StringPtr("my-subnet")
				subnetPatchModel.NetworkACL = networkACLIdentityModel
				subnetPatchModel.PublicGateway = publicGatewayIdentityModel
				subnetPatchModel.RoutingTable = routingTableIdentityModel
				subnetPatchModelAsPatch, asPatchErr := subnetPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetOptions model
				updateSubnetOptionsModel := new(vpcv1.UpdateSubnetOptions)
				updateSubnetOptionsModel.ID = core.StringPtr("testString")
				updateSubnetOptionsModel.SubnetPatch = subnetPatchModelAsPatch
				updateSubnetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateSubnet(updateSubnetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetNetworkACL(getSubnetNetworkACLOptions *GetSubnetNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetNetworkACLPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnetNetworkACL with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetNetworkACLOptions model
				getSubnetNetworkACLOptionsModel := new(vpcv1.GetSubnetNetworkACLOptions)
				getSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetNetworkACL(getSubnetNetworkACLOptions *GetSubnetNetworkACLOptions)`, func() {
		version := "testString"
		getSubnetNetworkACLPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetSubnetNetworkACL successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetSubnetNetworkACLOptions model
				getSubnetNetworkACLOptionsModel := new(vpcv1.GetSubnetNetworkACLOptions)
				getSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetSubnetNetworkACLWithContext(ctx, getSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetSubnetNetworkACLWithContext(ctx, getSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetSubnetNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetSubnetNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetNetworkACLOptions model
				getSubnetNetworkACLOptionsModel := new(vpcv1.GetSubnetNetworkACLOptions)
				getSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSubnetNetworkACL with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetNetworkACLOptions model
				getSubnetNetworkACLOptionsModel := new(vpcv1.GetSubnetNetworkACLOptions)
				getSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetNetworkACLOptions model with no property values
				getSubnetNetworkACLOptionsModelNew := new(vpcv1.GetSubnetNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSubnetNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetNetworkACLOptions model
				getSubnetNetworkACLOptionsModel := new(vpcv1.GetSubnetNetworkACLOptions)
				getSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetSubnetNetworkACL(getSubnetNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptions *ReplaceSubnetNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		replaceSubnetNetworkACLPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceSubnetNetworkACL with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				replaceSubnetNetworkACLOptionsModel := new(vpcv1.ReplaceSubnetNetworkACLOptions)
				replaceSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity = networkACLIdentityModel
				replaceSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptions *ReplaceSubnetNetworkACLOptions)`, func() {
		version := "testString"
		replaceSubnetNetworkACLPath := "/subnets/testString/network_acl"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke ReplaceSubnetNetworkACL successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				replaceSubnetNetworkACLOptionsModel := new(vpcv1.ReplaceSubnetNetworkACLOptions)
				replaceSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity = networkACLIdentityModel
				replaceSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ReplaceSubnetNetworkACLWithContext(ctx, replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ReplaceSubnetNetworkACLWithContext(ctx, replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceSubnetNetworkACLPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke ReplaceSubnetNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ReplaceSubnetNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				replaceSubnetNetworkACLOptionsModel := new(vpcv1.ReplaceSubnetNetworkACLOptions)
				replaceSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity = networkACLIdentityModel
				replaceSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceSubnetNetworkACL with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				replaceSubnetNetworkACLOptionsModel := new(vpcv1.ReplaceSubnetNetworkACLOptions)
				replaceSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity = networkACLIdentityModel
				replaceSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceSubnetNetworkACLOptions model with no property values
				replaceSubnetNetworkACLOptionsModelNew := new(vpcv1.ReplaceSubnetNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke ReplaceSubnetNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				replaceSubnetNetworkACLOptionsModel := new(vpcv1.ReplaceSubnetNetworkACLOptions)
				replaceSubnetNetworkACLOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity = networkACLIdentityModel
				replaceSubnetNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ReplaceSubnetNetworkACL(replaceSubnetNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UnsetSubnetPublicGateway(unsetSubnetPublicGatewayOptions *UnsetSubnetPublicGatewayOptions)`, func() {
		version := "testString"
		unsetSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(unsetSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke UnsetSubnetPublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.UnsetSubnetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the UnsetSubnetPublicGatewayOptions model
				unsetSubnetPublicGatewayOptionsModel := new(vpcv1.UnsetSubnetPublicGatewayOptions)
				unsetSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				unsetSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.UnsetSubnetPublicGateway(unsetSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke UnsetSubnetPublicGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the UnsetSubnetPublicGatewayOptions model
				unsetSubnetPublicGatewayOptionsModel := new(vpcv1.UnsetSubnetPublicGatewayOptions)
				unsetSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				unsetSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.UnsetSubnetPublicGateway(unsetSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the UnsetSubnetPublicGatewayOptions model with no property values
				unsetSubnetPublicGatewayOptionsModelNew := new(vpcv1.UnsetSubnetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.UnsetSubnetPublicGateway(unsetSubnetPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetPublicGateway(getSubnetPublicGatewayOptions *GetSubnetPublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnetPublicGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetPublicGateway(getSubnetPublicGatewayOptions *GetSubnetPublicGatewayOptions)`, func() {
		version := "testString"
		getSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetSubnetPublicGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetSubnetPublicGatewayWithContext(ctx, getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetSubnetPublicGatewayWithContext(ctx, getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetSubnetPublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetSubnetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSubnetPublicGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetPublicGatewayOptions model with no property values
				getSubnetPublicGatewayOptionsModelNew := new(vpcv1.GetSubnetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSubnetPublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetPublicGatewayOptions model
				getSubnetPublicGatewayOptionsModel := new(vpcv1.GetSubnetPublicGatewayOptions)
				getSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetSubnetPublicGateway(getSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetSubnetPublicGateway(setSubnetPublicGatewayOptions *SetSubnetPublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		setSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke SetSubnetPublicGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				setSubnetPublicGatewayOptionsModel := new(vpcv1.SetSubnetPublicGatewayOptions)
				setSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`SetSubnetPublicGateway(setSubnetPublicGatewayOptions *SetSubnetPublicGatewayOptions)`, func() {
		version := "testString"
		setSubnetPublicGatewayPath := "/subnets/testString/public_gateway"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke SetSubnetPublicGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				setSubnetPublicGatewayOptionsModel := new(vpcv1.SetSubnetPublicGatewayOptions)
				setSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.SetSubnetPublicGatewayWithContext(ctx, setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.SetSubnetPublicGatewayWithContext(ctx, setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(setSubnetPublicGatewayPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke SetSubnetPublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.SetSubnetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				setSubnetPublicGatewayOptionsModel := new(vpcv1.SetSubnetPublicGatewayOptions)
				setSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke SetSubnetPublicGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				setSubnetPublicGatewayOptionsModel := new(vpcv1.SetSubnetPublicGatewayOptions)
				setSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the SetSubnetPublicGatewayOptions model with no property values
				setSubnetPublicGatewayOptionsModelNew := new(vpcv1.SetSubnetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke SetSubnetPublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				setSubnetPublicGatewayOptionsModel := new(vpcv1.SetSubnetPublicGatewayOptions)
				setSubnetPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity = publicGatewayIdentityModel
				setSubnetPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.SetSubnetPublicGateway(setSubnetPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetRoutingTable(getSubnetRoutingTableOptions *GetSubnetRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetRoutingTablePath := "/subnets/testString/routing_table"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnetRoutingTable with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetRoutingTableOptions model
				getSubnetRoutingTableOptionsModel := new(vpcv1.GetSubnetRoutingTableOptions)
				getSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetRoutingTable(getSubnetRoutingTableOptions *GetSubnetRoutingTableOptions)`, func() {
		version := "testString"
		getSubnetRoutingTablePath := "/subnets/testString/routing_table"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetSubnetRoutingTable successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetSubnetRoutingTableOptions model
				getSubnetRoutingTableOptionsModel := new(vpcv1.GetSubnetRoutingTableOptions)
				getSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetSubnetRoutingTableWithContext(ctx, getSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetSubnetRoutingTableWithContext(ctx, getSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetRoutingTablePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetSubnetRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetSubnetRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetRoutingTableOptions model
				getSubnetRoutingTableOptionsModel := new(vpcv1.GetSubnetRoutingTableOptions)
				getSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSubnetRoutingTable with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetRoutingTableOptions model
				getSubnetRoutingTableOptionsModel := new(vpcv1.GetSubnetRoutingTableOptions)
				getSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetRoutingTableOptions model with no property values
				getSubnetRoutingTableOptionsModelNew := new(vpcv1.GetSubnetRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSubnetRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetRoutingTableOptions model
				getSubnetRoutingTableOptionsModel := new(vpcv1.GetSubnetRoutingTableOptions)
				getSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				getSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetSubnetRoutingTable(getSubnetRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceSubnetRoutingTable(replaceSubnetRoutingTableOptions *ReplaceSubnetRoutingTableOptions) - Operation response error`, func() {
		version := "testString"
		replaceSubnetRoutingTablePath := "/subnets/testString/routing_table"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceSubnetRoutingTablePath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceSubnetRoutingTable with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the ReplaceSubnetRoutingTableOptions model
				replaceSubnetRoutingTableOptionsModel := new(vpcv1.ReplaceSubnetRoutingTableOptions)
				replaceSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetRoutingTableOptionsModel.RoutingTableIdentity = routingTableIdentityModel
				replaceSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ReplaceSubnetRoutingTable(replaceSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ReplaceSubnetRoutingTable(replaceSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceSubnetRoutingTable(replaceSubnetRoutingTableOptions *ReplaceSubnetRoutingTableOptions)`, func() {
		version := "testString"
		replaceSubnetRoutingTablePath := "/subnets/testString/routing_table"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceSubnetRoutingTablePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke ReplaceSubnetRoutingTable successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the ReplaceSubnetRoutingTableOptions model
				replaceSubnetRoutingTableOptionsModel := new(vpcv1.ReplaceSubnetRoutingTableOptions)
				replaceSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetRoutingTableOptionsModel.RoutingTableIdentity = routingTableIdentityModel
				replaceSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ReplaceSubnetRoutingTableWithContext(ctx, replaceSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ReplaceSubnetRoutingTable(replaceSubnetRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ReplaceSubnetRoutingTableWithContext(ctx, replaceSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceSubnetRoutingTablePath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "is_default": false, "lifecycle_state": "stable", "name": "my-routing-table-1", "resource_type": "routing_table", "route_direct_link_ingress": true, "route_transit_gateway_ingress": true, "route_vpc_zone_ingress": false, "routes": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/8e454ead-0db7-48ac-9a8b-2698d8c470a7/routes/1a15dca5-7e33-45e1-b7c5-bc690e569531", "id": "1a15dca5-7e33-45e1-b7c5-bc690e569531", "name": "my-route-1"}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke ReplaceSubnetRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ReplaceSubnetRoutingTable(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the ReplaceSubnetRoutingTableOptions model
				replaceSubnetRoutingTableOptionsModel := new(vpcv1.ReplaceSubnetRoutingTableOptions)
				replaceSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetRoutingTableOptionsModel.RoutingTableIdentity = routingTableIdentityModel
				replaceSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ReplaceSubnetRoutingTable(replaceSubnetRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceSubnetRoutingTable with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the ReplaceSubnetRoutingTableOptions model
				replaceSubnetRoutingTableOptionsModel := new(vpcv1.ReplaceSubnetRoutingTableOptions)
				replaceSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetRoutingTableOptionsModel.RoutingTableIdentity = routingTableIdentityModel
				replaceSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ReplaceSubnetRoutingTable(replaceSubnetRoutingTableOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceSubnetRoutingTableOptions model with no property values
				replaceSubnetRoutingTableOptionsModelNew := new(vpcv1.ReplaceSubnetRoutingTableOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ReplaceSubnetRoutingTable(replaceSubnetRoutingTableOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke ReplaceSubnetRoutingTable successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				routingTableIdentityModel.ID = core.StringPtr("1a15dca5-7e33-45e1-b7c5-bc690e569531")

				// Construct an instance of the ReplaceSubnetRoutingTableOptions model
				replaceSubnetRoutingTableOptionsModel := new(vpcv1.ReplaceSubnetRoutingTableOptions)
				replaceSubnetRoutingTableOptionsModel.ID = core.StringPtr("testString")
				replaceSubnetRoutingTableOptionsModel.RoutingTableIdentity = routingTableIdentityModel
				replaceSubnetRoutingTableOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ReplaceSubnetRoutingTable(replaceSubnetRoutingTableOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSubnetReservedIps(listSubnetReservedIpsOptions *ListSubnetReservedIpsOptions) - Operation response error`, func() {
		version := "testString"
		listSubnetReservedIpsPath := "/subnets/testString/reserved_ips"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubnetReservedIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"name"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSubnetReservedIps with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSubnetReservedIpsOptions model
				listSubnetReservedIpsOptionsModel := new(vpcv1.ListSubnetReservedIpsOptions)
				listSubnetReservedIpsOptionsModel.SubnetID = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Start = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetReservedIpsOptionsModel.Sort = core.StringPtr("name")
				listSubnetReservedIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListSubnetReservedIps(listSubnetReservedIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListSubnetReservedIps(listSubnetReservedIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSubnetReservedIps(listSubnetReservedIpsOptions *ListSubnetReservedIpsOptions)`, func() {
		version := "testString"
		listSubnetReservedIpsPath := "/subnets/testString/reserved_ips"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubnetReservedIpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"name"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "reserved_ips": [{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListSubnetReservedIps successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListSubnetReservedIpsOptions model
				listSubnetReservedIpsOptionsModel := new(vpcv1.ListSubnetReservedIpsOptions)
				listSubnetReservedIpsOptionsModel.SubnetID = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Start = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetReservedIpsOptionsModel.Sort = core.StringPtr("name")
				listSubnetReservedIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListSubnetReservedIpsWithContext(ctx, listSubnetReservedIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListSubnetReservedIps(listSubnetReservedIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListSubnetReservedIpsWithContext(ctx, listSubnetReservedIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSubnetReservedIpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"name"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "reserved_ips": [{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListSubnetReservedIps successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListSubnetReservedIps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSubnetReservedIpsOptions model
				listSubnetReservedIpsOptionsModel := new(vpcv1.ListSubnetReservedIpsOptions)
				listSubnetReservedIpsOptionsModel.SubnetID = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Start = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetReservedIpsOptionsModel.Sort = core.StringPtr("name")
				listSubnetReservedIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListSubnetReservedIps(listSubnetReservedIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSubnetReservedIps with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSubnetReservedIpsOptions model
				listSubnetReservedIpsOptionsModel := new(vpcv1.ListSubnetReservedIpsOptions)
				listSubnetReservedIpsOptionsModel.SubnetID = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Start = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetReservedIpsOptionsModel.Sort = core.StringPtr("name")
				listSubnetReservedIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListSubnetReservedIps(listSubnetReservedIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSubnetReservedIpsOptions model with no property values
				listSubnetReservedIpsOptionsModelNew := new(vpcv1.ListSubnetReservedIpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListSubnetReservedIps(listSubnetReservedIpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListSubnetReservedIps successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSubnetReservedIpsOptions model
				listSubnetReservedIpsOptionsModel := new(vpcv1.ListSubnetReservedIpsOptions)
				listSubnetReservedIpsOptionsModel.SubnetID = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Start = core.StringPtr("testString")
				listSubnetReservedIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSubnetReservedIpsOptionsModel.Sort = core.StringPtr("name")
				listSubnetReservedIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListSubnetReservedIps(listSubnetReservedIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSubnetReservedIP(createSubnetReservedIPOptions *CreateSubnetReservedIPOptions) - Operation response error`, func() {
		version := "testString"
		createSubnetReservedIPPath := "/subnets/testString/reserved_ips"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSubnetReservedIPPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSubnetReservedIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID model
				reservedIPTargetPrototypeModel := new(vpcv1.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID)
				reservedIPTargetPrototypeModel.ID = core.StringPtr("d7cc5196-9864-48c4-82d8-3f30da41fcc5")

				// Construct an instance of the CreateSubnetReservedIPOptions model
				createSubnetReservedIPOptionsModel := new(vpcv1.CreateSubnetReservedIPOptions)
				createSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				createSubnetReservedIPOptionsModel.AutoDelete = core.BoolPtr(false)
				createSubnetReservedIPOptionsModel.Name = core.StringPtr("my-reserved-ip")
				createSubnetReservedIPOptionsModel.Target = reservedIPTargetPrototypeModel
				createSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateSubnetReservedIP(createSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateSubnetReservedIP(createSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSubnetReservedIP(createSubnetReservedIPOptions *CreateSubnetReservedIPOptions)`, func() {
		version := "testString"
		createSubnetReservedIPPath := "/subnets/testString/reserved_ips"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSubnetReservedIPPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke CreateSubnetReservedIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID model
				reservedIPTargetPrototypeModel := new(vpcv1.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID)
				reservedIPTargetPrototypeModel.ID = core.StringPtr("d7cc5196-9864-48c4-82d8-3f30da41fcc5")

				// Construct an instance of the CreateSubnetReservedIPOptions model
				createSubnetReservedIPOptionsModel := new(vpcv1.CreateSubnetReservedIPOptions)
				createSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				createSubnetReservedIPOptionsModel.AutoDelete = core.BoolPtr(false)
				createSubnetReservedIPOptionsModel.Name = core.StringPtr("my-reserved-ip")
				createSubnetReservedIPOptionsModel.Target = reservedIPTargetPrototypeModel
				createSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateSubnetReservedIPWithContext(ctx, createSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateSubnetReservedIP(createSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateSubnetReservedIPWithContext(ctx, createSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSubnetReservedIPPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke CreateSubnetReservedIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateSubnetReservedIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID model
				reservedIPTargetPrototypeModel := new(vpcv1.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID)
				reservedIPTargetPrototypeModel.ID = core.StringPtr("d7cc5196-9864-48c4-82d8-3f30da41fcc5")

				// Construct an instance of the CreateSubnetReservedIPOptions model
				createSubnetReservedIPOptionsModel := new(vpcv1.CreateSubnetReservedIPOptions)
				createSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				createSubnetReservedIPOptionsModel.AutoDelete = core.BoolPtr(false)
				createSubnetReservedIPOptionsModel.Name = core.StringPtr("my-reserved-ip")
				createSubnetReservedIPOptionsModel.Target = reservedIPTargetPrototypeModel
				createSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateSubnetReservedIP(createSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSubnetReservedIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID model
				reservedIPTargetPrototypeModel := new(vpcv1.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID)
				reservedIPTargetPrototypeModel.ID = core.StringPtr("d7cc5196-9864-48c4-82d8-3f30da41fcc5")

				// Construct an instance of the CreateSubnetReservedIPOptions model
				createSubnetReservedIPOptionsModel := new(vpcv1.CreateSubnetReservedIPOptions)
				createSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				createSubnetReservedIPOptionsModel.AutoDelete = core.BoolPtr(false)
				createSubnetReservedIPOptionsModel.Name = core.StringPtr("my-reserved-ip")
				createSubnetReservedIPOptionsModel.Target = reservedIPTargetPrototypeModel
				createSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateSubnetReservedIP(createSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSubnetReservedIPOptions model with no property values
				createSubnetReservedIPOptionsModelNew := new(vpcv1.CreateSubnetReservedIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateSubnetReservedIP(createSubnetReservedIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateSubnetReservedIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID model
				reservedIPTargetPrototypeModel := new(vpcv1.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID)
				reservedIPTargetPrototypeModel.ID = core.StringPtr("d7cc5196-9864-48c4-82d8-3f30da41fcc5")

				// Construct an instance of the CreateSubnetReservedIPOptions model
				createSubnetReservedIPOptionsModel := new(vpcv1.CreateSubnetReservedIPOptions)
				createSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				createSubnetReservedIPOptionsModel.AutoDelete = core.BoolPtr(false)
				createSubnetReservedIPOptionsModel.Name = core.StringPtr("my-reserved-ip")
				createSubnetReservedIPOptionsModel.Target = reservedIPTargetPrototypeModel
				createSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateSubnetReservedIP(createSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteSubnetReservedIP(deleteSubnetReservedIPOptions *DeleteSubnetReservedIPOptions)`, func() {
		version := "testString"
		deleteSubnetReservedIPPath := "/subnets/testString/reserved_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteSubnetReservedIPPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSubnetReservedIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteSubnetReservedIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSubnetReservedIPOptions model
				deleteSubnetReservedIPOptionsModel := new(vpcv1.DeleteSubnetReservedIPOptions)
				deleteSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				deleteSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteSubnetReservedIP(deleteSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSubnetReservedIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteSubnetReservedIPOptions model
				deleteSubnetReservedIPOptionsModel := new(vpcv1.DeleteSubnetReservedIPOptions)
				deleteSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				deleteSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				deleteSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteSubnetReservedIP(deleteSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSubnetReservedIPOptions model with no property values
				deleteSubnetReservedIPOptionsModelNew := new(vpcv1.DeleteSubnetReservedIPOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteSubnetReservedIP(deleteSubnetReservedIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetReservedIP(getSubnetReservedIPOptions *GetSubnetReservedIPOptions) - Operation response error`, func() {
		version := "testString"
		getSubnetReservedIPPath := "/subnets/testString/reserved_ips/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetReservedIPPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSubnetReservedIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetReservedIPOptions model
				getSubnetReservedIPOptionsModel := new(vpcv1.GetSubnetReservedIPOptions)
				getSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetSubnetReservedIP(getSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetSubnetReservedIP(getSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSubnetReservedIP(getSubnetReservedIPOptions *GetSubnetReservedIPOptions)`, func() {
		version := "testString"
		getSubnetReservedIPPath := "/subnets/testString/reserved_ips/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetReservedIPPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke GetSubnetReservedIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetSubnetReservedIPOptions model
				getSubnetReservedIPOptionsModel := new(vpcv1.GetSubnetReservedIPOptions)
				getSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetSubnetReservedIPWithContext(ctx, getSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetSubnetReservedIP(getSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetSubnetReservedIPWithContext(ctx, getSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSubnetReservedIPPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke GetSubnetReservedIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetSubnetReservedIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSubnetReservedIPOptions model
				getSubnetReservedIPOptionsModel := new(vpcv1.GetSubnetReservedIPOptions)
				getSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetSubnetReservedIP(getSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSubnetReservedIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetReservedIPOptions model
				getSubnetReservedIPOptionsModel := new(vpcv1.GetSubnetReservedIPOptions)
				getSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetSubnetReservedIP(getSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSubnetReservedIPOptions model with no property values
				getSubnetReservedIPOptionsModelNew := new(vpcv1.GetSubnetReservedIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetSubnetReservedIP(getSubnetReservedIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSubnetReservedIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSubnetReservedIPOptions model
				getSubnetReservedIPOptionsModel := new(vpcv1.GetSubnetReservedIPOptions)
				getSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				getSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetSubnetReservedIP(getSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSubnetReservedIP(updateSubnetReservedIPOptions *UpdateSubnetReservedIPOptions) - Operation response error`, func() {
		version := "testString"
		updateSubnetReservedIPPath := "/subnets/testString/reserved_ips/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSubnetReservedIPPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSubnetReservedIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ReservedIPPatch model
				reservedIPPatchModel := new(vpcv1.ReservedIPPatch)
				reservedIPPatchModel.AutoDelete = core.BoolPtr(false)
				reservedIPPatchModel.Name = core.StringPtr("my-reserved-ip")
				reservedIPPatchModelAsPatch, asPatchErr := reservedIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetReservedIPOptions model
				updateSubnetReservedIPOptionsModel := new(vpcv1.UpdateSubnetReservedIPOptions)
				updateSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ReservedIPPatch = reservedIPPatchModelAsPatch
				updateSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateSubnetReservedIP(updateSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateSubnetReservedIP(updateSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSubnetReservedIP(updateSubnetReservedIPOptions *UpdateSubnetReservedIPOptions)`, func() {
		version := "testString"
		updateSubnetReservedIPPath := "/subnets/testString/reserved_ips/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSubnetReservedIPPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke UpdateSubnetReservedIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ReservedIPPatch model
				reservedIPPatchModel := new(vpcv1.ReservedIPPatch)
				reservedIPPatchModel.AutoDelete = core.BoolPtr(false)
				reservedIPPatchModel.Name = core.StringPtr("my-reserved-ip")
				reservedIPPatchModelAsPatch, asPatchErr := reservedIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetReservedIPOptions model
				updateSubnetReservedIPOptionsModel := new(vpcv1.UpdateSubnetReservedIPOptions)
				updateSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ReservedIPPatch = reservedIPPatchModelAsPatch
				updateSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateSubnetReservedIPWithContext(ctx, updateSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateSubnetReservedIP(updateSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateSubnetReservedIPWithContext(ctx, updateSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSubnetReservedIPPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke UpdateSubnetReservedIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateSubnetReservedIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ReservedIPPatch model
				reservedIPPatchModel := new(vpcv1.ReservedIPPatch)
				reservedIPPatchModel.AutoDelete = core.BoolPtr(false)
				reservedIPPatchModel.Name = core.StringPtr("my-reserved-ip")
				reservedIPPatchModelAsPatch, asPatchErr := reservedIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetReservedIPOptions model
				updateSubnetReservedIPOptionsModel := new(vpcv1.UpdateSubnetReservedIPOptions)
				updateSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ReservedIPPatch = reservedIPPatchModelAsPatch
				updateSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateSubnetReservedIP(updateSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateSubnetReservedIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ReservedIPPatch model
				reservedIPPatchModel := new(vpcv1.ReservedIPPatch)
				reservedIPPatchModel.AutoDelete = core.BoolPtr(false)
				reservedIPPatchModel.Name = core.StringPtr("my-reserved-ip")
				reservedIPPatchModelAsPatch, asPatchErr := reservedIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetReservedIPOptions model
				updateSubnetReservedIPOptionsModel := new(vpcv1.UpdateSubnetReservedIPOptions)
				updateSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ReservedIPPatch = reservedIPPatchModelAsPatch
				updateSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateSubnetReservedIP(updateSubnetReservedIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSubnetReservedIPOptions model with no property values
				updateSubnetReservedIPOptionsModelNew := new(vpcv1.UpdateSubnetReservedIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateSubnetReservedIP(updateSubnetReservedIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateSubnetReservedIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ReservedIPPatch model
				reservedIPPatchModel := new(vpcv1.ReservedIPPatch)
				reservedIPPatchModel.AutoDelete = core.BoolPtr(false)
				reservedIPPatchModel.Name = core.StringPtr("my-reserved-ip")
				reservedIPPatchModelAsPatch, asPatchErr := reservedIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSubnetReservedIPOptions model
				updateSubnetReservedIPOptionsModel := new(vpcv1.UpdateSubnetReservedIPOptions)
				updateSubnetReservedIPOptionsModel.SubnetID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ID = core.StringPtr("testString")
				updateSubnetReservedIPOptionsModel.ReservedIPPatch = reservedIPPatchModelAsPatch
				updateSubnetReservedIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateSubnetReservedIP(updateSubnetReservedIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListImages(listImagesOptions *ListImagesOptions) - Operation response error`, func() {
		version := "testString"
		listImagesPath := "/images"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listImagesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["visibility"]).To(Equal([]string{"private"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListImages with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListImages(listImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListImages(listImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListImages(listImagesOptions *ListImagesOptions)`, func() {
		version := "testString"
		listImagesPath := "/images"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listImagesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["visibility"]).To(Equal([]string{"private"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "images": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "file": {"checksums": {"sha256": "e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15"}, "size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "visibility": "private"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}}`)
				}))
			})
			It(`Invoke ListImages successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListImagesWithContext(ctx, listImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListImages(listImagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListImagesWithContext(ctx, listImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listImagesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["visibility"]).To(Equal([]string{"private"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?limit=20"}, "images": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "file": {"checksums": {"sha256": "e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15"}, "size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "visibility": "private"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/images?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}}`)
				}))
			})
			It(`Invoke ListImages successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListImages(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListImages(listImagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListImages with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListImages(listImagesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListImages successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := new(vpcv1.ListImagesOptions)
				listImagesOptionsModel.Start = core.StringPtr("testString")
				listImagesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listImagesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listImagesOptionsModel.Name = core.StringPtr("testString")
				listImagesOptionsModel.Visibility = core.StringPtr("private")
				listImagesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListImages(listImagesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateImage(createImageOptions *CreateImageOptions) - Operation response error`, func() {
		version := "testString"
		createImagePath := "/images"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createImagePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateImage with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/my-bucket/my-image.qcow2")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("debian-9-amd64")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.EncryptedDataKey = core.StringPtr("testString")
				imagePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateImage(createImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateImage(createImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateImage(createImageOptions *CreateImageOptions)`, func() {
		version := "testString"
		createImagePath := "/images"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createImagePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "file": {"checksums": {"sha256": "e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15"}, "size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "visibility": "private"}`)
				}))
			})
			It(`Invoke CreateImage successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/my-bucket/my-image.qcow2")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("debian-9-amd64")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.EncryptedDataKey = core.StringPtr("testString")
				imagePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateImageWithContext(ctx, createImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateImage(createImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateImageWithContext(ctx, createImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createImagePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "file": {"checksums": {"sha256": "e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15"}, "size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "visibility": "private"}`)
				}))
			})
			It(`Invoke CreateImage successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/my-bucket/my-image.qcow2")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("debian-9-amd64")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.EncryptedDataKey = core.StringPtr("testString")
				imagePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateImage(createImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateImage with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/my-bucket/my-image.qcow2")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("debian-9-amd64")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.EncryptedDataKey = core.StringPtr("testString")
				imagePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateImage(createImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateImageOptions model with no property values
				createImageOptionsModelNew := new(vpcv1.CreateImageOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateImage(createImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateImage successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/my-bucket/my-image.qcow2")

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				operatingSystemIdentityModel.Name = core.StringPtr("debian-9-amd64")

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.EncryptedDataKey = core.StringPtr("testString")
				imagePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel

				// Construct an instance of the CreateImageOptions model
				createImageOptionsModel := new(vpcv1.CreateImageOptions)
				createImageOptionsModel.ImagePrototype = imagePrototypeModel
				createImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateImage(createImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteImage(deleteImageOptions *DeleteImageOptions)`, func() {
		version := "testString"
		deleteImagePath := "/images/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteImagePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteImage successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteImageOptions model
				deleteImageOptionsModel := new(vpcv1.DeleteImageOptions)
				deleteImageOptionsModel.ID = core.StringPtr("testString")
				deleteImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteImage(deleteImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteImage with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteImageOptions model
				deleteImageOptionsModel := new(vpcv1.DeleteImageOptions)
				deleteImageOptionsModel.ID = core.StringPtr("testString")
				deleteImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteImage(deleteImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteImageOptions model with no property values
				deleteImageOptionsModelNew := new(vpcv1.DeleteImageOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteImage(deleteImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetImage(getImageOptions *GetImageOptions) - Operation response error`, func() {
		version := "testString"
		getImagePath := "/images/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getImagePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetImage with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetImage(getImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetImage(getImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetImage(getImageOptions *GetImageOptions)`, func() {
		version := "testString"
		getImagePath := "/images/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getImagePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "file": {"checksums": {"sha256": "e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15"}, "size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "visibility": "private"}`)
				}))
			})
			It(`Invoke GetImage successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetImageWithContext(ctx, getImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetImage(getImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetImageWithContext(ctx, getImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getImagePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "file": {"checksums": {"sha256": "e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15"}, "size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "visibility": "private"}`)
				}))
			})
			It(`Invoke GetImage successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetImage(getImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetImage with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetImage(getImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetImageOptions model with no property values
				getImageOptionsModelNew := new(vpcv1.GetImageOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetImage(getImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetImage successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetImageOptions model
				getImageOptionsModel := new(vpcv1.GetImageOptions)
				getImageOptionsModel.ID = core.StringPtr("testString")
				getImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetImage(getImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateImage(updateImageOptions *UpdateImageOptions) - Operation response error`, func() {
		version := "testString"
		updateImagePath := "/images/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateImagePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateImage with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ImagePatch model
				imagePatchModel := new(vpcv1.ImagePatch)
				imagePatchModel.Name = core.StringPtr("my-image")
				imagePatchModelAsPatch, asPatchErr := imagePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.ImagePatch = imagePatchModelAsPatch
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateImage(updateImageOptions *UpdateImageOptions)`, func() {
		version := "testString"
		updateImagePath := "/images/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateImagePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "file": {"checksums": {"sha256": "e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15"}, "size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "visibility": "private"}`)
				}))
			})
			It(`Invoke UpdateImage successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ImagePatch model
				imagePatchModel := new(vpcv1.ImagePatch)
				imagePatchModel.Name = core.StringPtr("my-image")
				imagePatchModelAsPatch, asPatchErr := imagePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.ImagePatch = imagePatchModelAsPatch
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateImageWithContext(ctx, updateImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateImageWithContext(ctx, updateImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateImagePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "encryption": "user_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "file": {"checksums": {"sha256": "e992a84f113d3a35d2145ca3e7aca4fc95fe6daf470a08d8af3422ee59c92e15"}, "size": 1}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "minimum_provisioned_size": 22, "name": "my-image", "operating_system": {"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "visibility": "private"}`)
				}))
			})
			It(`Invoke UpdateImage successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateImage(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ImagePatch model
				imagePatchModel := new(vpcv1.ImagePatch)
				imagePatchModel.Name = core.StringPtr("my-image")
				imagePatchModelAsPatch, asPatchErr := imagePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.ImagePatch = imagePatchModelAsPatch
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateImage with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ImagePatch model
				imagePatchModel := new(vpcv1.ImagePatch)
				imagePatchModel.Name = core.StringPtr("my-image")
				imagePatchModelAsPatch, asPatchErr := imagePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.ImagePatch = imagePatchModelAsPatch
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateImageOptions model with no property values
				updateImageOptionsModelNew := new(vpcv1.UpdateImageOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateImage(updateImageOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateImage successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ImagePatch model
				imagePatchModel := new(vpcv1.ImagePatch)
				imagePatchModel.Name = core.StringPtr("my-image")
				imagePatchModelAsPatch, asPatchErr := imagePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateImageOptions model
				updateImageOptionsModel := new(vpcv1.UpdateImageOptions)
				updateImageOptionsModel.ID = core.StringPtr("testString")
				updateImageOptionsModel.ImagePatch = imagePatchModelAsPatch
				updateImageOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateImage(updateImageOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListOperatingSystems(listOperatingSystemsOptions *ListOperatingSystemsOptions) - Operation response error`, func() {
		version := "testString"
		listOperatingSystemsPath := "/operating_systems"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listOperatingSystemsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListOperatingSystems with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListOperatingSystems(listOperatingSystemsOptions *ListOperatingSystemsOptions)`, func() {
		version := "testString"
		listOperatingSystemsPath := "/operating_systems"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listOperatingSystemsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}]}`)
				}))
			})
			It(`Invoke ListOperatingSystems successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListOperatingSystemsWithContext(ctx, listOperatingSystemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListOperatingSystemsWithContext(ctx, listOperatingSystemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listOperatingSystemsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "operating_systems": [{"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}]}`)
				}))
			})
			It(`Invoke ListOperatingSystems successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListOperatingSystems(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListOperatingSystems with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListOperatingSystems successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := new(vpcv1.ListOperatingSystemsOptions)
				listOperatingSystemsOptionsModel.Start = core.StringPtr("testString")
				listOperatingSystemsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listOperatingSystemsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListOperatingSystems(listOperatingSystemsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetOperatingSystem(getOperatingSystemOptions *GetOperatingSystemOptions) - Operation response error`, func() {
		version := "testString"
		getOperatingSystemPath := "/operating_systems/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getOperatingSystemPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetOperatingSystem with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetOperatingSystem(getOperatingSystemOptions *GetOperatingSystemOptions)`, func() {
		version := "testString"
		getOperatingSystemPath := "/operating_systems/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getOperatingSystemPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}`)
				}))
			})
			It(`Invoke GetOperatingSystem successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetOperatingSystemWithContext(ctx, getOperatingSystemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetOperatingSystemWithContext(ctx, getOperatingSystemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getOperatingSystemPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"architecture": "amd64", "dedicated_host_only": false, "display_name": "Ubuntu Server 16.04 LTS amd64", "family": "Ubuntu Server", "href": "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64", "name": "ubuntu-16-amd64", "vendor": "Canonical", "version": "16.04 LTS"}`)
				}))
			})
			It(`Invoke GetOperatingSystem successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetOperatingSystem(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetOperatingSystem with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetOperatingSystemOptions model with no property values
				getOperatingSystemOptionsModelNew := new(vpcv1.GetOperatingSystemOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetOperatingSystem(getOperatingSystemOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetOperatingSystem successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetOperatingSystemOptions model
				getOperatingSystemOptionsModel := new(vpcv1.GetOperatingSystemOptions)
				getOperatingSystemOptionsModel.Name = core.StringPtr("testString")
				getOperatingSystemOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetOperatingSystem(getOperatingSystemOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListKeys(listKeysOptions *ListKeysOptions) - Operation response error`, func() {
		version := "testString"
		listKeysPath := "/keys"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKeysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListKeys with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcv1.ListKeysOptions)
				listKeysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListKeys(listKeysOptions *ListKeysOptions)`, func() {
		version := "testString"
		listKeysPath := "/keys"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKeysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"keys": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}]}`)
				}))
			})
			It(`Invoke ListKeys successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcv1.ListKeysOptions)
				listKeysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListKeysWithContext(ctx, listKeysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListKeysWithContext(ctx, listKeysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listKeysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"keys": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}]}`)
				}))
			})
			It(`Invoke ListKeys successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListKeys(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcv1.ListKeysOptions)
				listKeysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListKeys with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcv1.ListKeysOptions)
				listKeysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListKeys successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := new(vpcv1.ListKeysOptions)
				listKeysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listKeysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListKeys(listKeysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateKey(createKeyOptions *CreateKeyOptions) - Operation response error`, func() {
		version := "testString"
		createKeyPath := "/keys"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createKeyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateKey with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateKey(createKeyOptions *CreateKeyOptions)`, func() {
		version := "testString"
		createKeyPath := "/keys"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createKeyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}`)
				}))
			})
			It(`Invoke CreateKey successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateKeyWithContext(ctx, createKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateKeyWithContext(ctx, createKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createKeyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}`)
				}))
			})
			It(`Invoke CreateKey successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateKey with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateKeyOptions model with no property values
				createKeyOptionsModelNew := new(vpcv1.CreateKeyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateKey(createKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateKey successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsModel := new(vpcv1.CreateKeyOptions)
				createKeyOptionsModel.PublicKey = core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.Name = core.StringPtr("my-key")
				createKeyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createKeyOptionsModel.Type = core.StringPtr("rsa")
				createKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateKey(createKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteKey(deleteKeyOptions *DeleteKeyOptions)`, func() {
		version := "testString"
		deleteKeyPath := "/keys/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteKeyPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteKey successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteKeyOptions model
				deleteKeyOptionsModel := new(vpcv1.DeleteKeyOptions)
				deleteKeyOptionsModel.ID = core.StringPtr("testString")
				deleteKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteKey(deleteKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteKey with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteKeyOptions model
				deleteKeyOptionsModel := new(vpcv1.DeleteKeyOptions)
				deleteKeyOptionsModel.ID = core.StringPtr("testString")
				deleteKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteKey(deleteKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteKeyOptions model with no property values
				deleteKeyOptionsModelNew := new(vpcv1.DeleteKeyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteKey(deleteKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetKey(getKeyOptions *GetKeyOptions) - Operation response error`, func() {
		version := "testString"
		getKeyPath := "/keys/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKeyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetKey with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetKey(getKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetKey(getKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetKey(getKeyOptions *GetKeyOptions)`, func() {
		version := "testString"
		getKeyPath := "/keys/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKeyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}`)
				}))
			})
			It(`Invoke GetKey successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetKeyWithContext(ctx, getKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetKey(getKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetKeyWithContext(ctx, getKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getKeyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}`)
				}))
			})
			It(`Invoke GetKey successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetKey(getKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetKey with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetKey(getKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetKeyOptions model with no property values
				getKeyOptionsModelNew := new(vpcv1.GetKeyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetKey(getKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetKey successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetKeyOptions model
				getKeyOptionsModel := new(vpcv1.GetKeyOptions)
				getKeyOptionsModel.ID = core.StringPtr("testString")
				getKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetKey(getKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateKey(updateKeyOptions *UpdateKeyOptions) - Operation response error`, func() {
		version := "testString"
		updateKeyPath := "/keys/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKeyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateKey with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the KeyPatch model
				keyPatchModel := new(vpcv1.KeyPatch)
				keyPatchModel.Name = core.StringPtr("my-key")
				keyPatchModelAsPatch, asPatchErr := keyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.KeyPatch = keyPatchModelAsPatch
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateKey(updateKeyOptions *UpdateKeyOptions)`, func() {
		version := "testString"
		updateKeyPath := "/keys/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKeyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}`)
				}))
			})
			It(`Invoke UpdateKey successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the KeyPatch model
				keyPatchModel := new(vpcv1.KeyPatch)
				keyPatchModel.Name = core.StringPtr("my-key")
				keyPatchModelAsPatch, asPatchErr := keyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.KeyPatch = keyPatchModelAsPatch
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateKeyWithContext(ctx, updateKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateKeyWithContext(ctx, updateKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateKeyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "length": 2048, "name": "my-key", "public_key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "type": "rsa"}`)
				}))
			})
			It(`Invoke UpdateKey successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateKey(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the KeyPatch model
				keyPatchModel := new(vpcv1.KeyPatch)
				keyPatchModel.Name = core.StringPtr("my-key")
				keyPatchModelAsPatch, asPatchErr := keyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.KeyPatch = keyPatchModelAsPatch
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateKey with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the KeyPatch model
				keyPatchModel := new(vpcv1.KeyPatch)
				keyPatchModel.Name = core.StringPtr("my-key")
				keyPatchModelAsPatch, asPatchErr := keyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.KeyPatch = keyPatchModelAsPatch
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateKeyOptions model with no property values
				updateKeyOptionsModelNew := new(vpcv1.UpdateKeyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateKey(updateKeyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateKey successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the KeyPatch model
				keyPatchModel := new(vpcv1.KeyPatch)
				keyPatchModel.Name = core.StringPtr("my-key")
				keyPatchModelAsPatch, asPatchErr := keyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateKeyOptions model
				updateKeyOptionsModel := new(vpcv1.UpdateKeyOptions)
				updateKeyOptionsModel.ID = core.StringPtr("testString")
				updateKeyOptionsModel.KeyPatch = keyPatchModelAsPatch
				updateKeyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateKey(updateKeyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceProfiles(listInstanceProfilesOptions *ListInstanceProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceProfilesPath := "/instance/profiles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceProfiles with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceProfiles(listInstanceProfilesOptions *ListInstanceProfilesOptions)`, func() {
		version := "testString"
		listInstanceProfilesPath := "/instance/profiles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"profiles": [{"bandwidth": {"type": "fixed", "value": 20000}, "disks": [{"quantity": {"type": "fixed", "value": 4}, "size": {"type": "fixed", "value": 100}, "supported_interface_types": {"default": "virtio_blk", "type": "enum", "values": ["virtio_blk"]}}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "memory": {"type": "fixed", "value": 16}, "name": "bc1-4x16", "os_architecture": {"default": "Default", "type": "enum", "values": ["amd64"]}, "port_speed": {"type": "fixed", "value": 1000}, "vcpu_architecture": {"default": "Default", "type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}]}`)
				}))
			})
			It(`Invoke ListInstanceProfiles successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceProfilesWithContext(ctx, listInstanceProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceProfilesWithContext(ctx, listInstanceProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"profiles": [{"bandwidth": {"type": "fixed", "value": 20000}, "disks": [{"quantity": {"type": "fixed", "value": 4}, "size": {"type": "fixed", "value": 100}, "supported_interface_types": {"default": "virtio_blk", "type": "enum", "values": ["virtio_blk"]}}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "memory": {"type": "fixed", "value": 16}, "name": "bc1-4x16", "os_architecture": {"default": "Default", "type": "enum", "values": ["amd64"]}, "port_speed": {"type": "fixed", "value": 1000}, "vcpu_architecture": {"default": "Default", "type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}]}`)
				}))
			})
			It(`Invoke ListInstanceProfiles successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceProfiles with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceProfiles successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := new(vpcv1.ListInstanceProfilesOptions)
				listInstanceProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceProfiles(listInstanceProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceProfile(getInstanceProfileOptions *GetInstanceProfileOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceProfilePath := "/instance/profiles/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceProfile with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceProfile(getInstanceProfileOptions *GetInstanceProfileOptions)`, func() {
		version := "testString"
		getInstanceProfilePath := "/instance/profiles/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"bandwidth": {"type": "fixed", "value": 20000}, "disks": [{"quantity": {"type": "fixed", "value": 4}, "size": {"type": "fixed", "value": 100}, "supported_interface_types": {"default": "virtio_blk", "type": "enum", "values": ["virtio_blk"]}}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "memory": {"type": "fixed", "value": 16}, "name": "bc1-4x16", "os_architecture": {"default": "Default", "type": "enum", "values": ["amd64"]}, "port_speed": {"type": "fixed", "value": 1000}, "vcpu_architecture": {"default": "Default", "type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}`)
				}))
			})
			It(`Invoke GetInstanceProfile successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceProfileWithContext(ctx, getInstanceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceProfileWithContext(ctx, getInstanceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"bandwidth": {"type": "fixed", "value": 20000}, "disks": [{"quantity": {"type": "fixed", "value": 4}, "size": {"type": "fixed", "value": 100}, "supported_interface_types": {"default": "virtio_blk", "type": "enum", "values": ["virtio_blk"]}}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "memory": {"type": "fixed", "value": 16}, "name": "bc1-4x16", "os_architecture": {"default": "Default", "type": "enum", "values": ["amd64"]}, "port_speed": {"type": "fixed", "value": 1000}, "vcpu_architecture": {"default": "Default", "type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}`)
				}))
			})
			It(`Invoke GetInstanceProfile successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceProfile with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceProfileOptions model with no property values
				getInstanceProfileOptionsModelNew := new(vpcv1.GetInstanceProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceProfile(getInstanceProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceProfile successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceProfileOptions model
				getInstanceProfileOptionsModel := new(vpcv1.GetInstanceProfileOptions)
				getInstanceProfileOptionsModel.Name = core.StringPtr("testString")
				getInstanceProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceProfile(getInstanceProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceTemplates(listInstanceTemplatesOptions *ListInstanceTemplatesOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceTemplatesPath := "/instance/templates"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceTemplatesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceTemplates with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := new(vpcv1.ListInstanceTemplatesOptions)
				listInstanceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceTemplates(listInstanceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceTemplates(listInstanceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceTemplates(listInstanceTemplatesOptions *ListInstanceTemplatesOptions)`, func() {
		version := "testString"
		listInstanceTemplatesPath := "/instance/templates"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceTemplatesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "templates": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "name": "my-instance-template", "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"capacity": 100, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "iops": 10000, "name": "my-volume", "profile": {"name": "general-purpose"}}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceTemplates successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := new(vpcv1.ListInstanceTemplatesOptions)
				listInstanceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceTemplatesWithContext(ctx, listInstanceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceTemplates(listInstanceTemplatesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceTemplatesWithContext(ctx, listInstanceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceTemplatesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "templates": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "name": "my-instance-template", "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"capacity": 100, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "iops": 10000, "name": "my-volume", "profile": {"name": "general-purpose"}}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceTemplates successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceTemplates(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := new(vpcv1.ListInstanceTemplatesOptions)
				listInstanceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceTemplates(listInstanceTemplatesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceTemplates with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := new(vpcv1.ListInstanceTemplatesOptions)
				listInstanceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceTemplates(listInstanceTemplatesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceTemplates successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := new(vpcv1.ListInstanceTemplatesOptions)
				listInstanceTemplatesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceTemplates(listInstanceTemplatesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceTemplate(createInstanceTemplateOptions *CreateInstanceTemplateOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceTemplatePath := "/instance/templates"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceTemplatePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceTemplate with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID)
				volumeAttachmentVolumePrototypeInstanceContextModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("dc201ab2-8536-4904-86a8-084d84582133")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("3f9a2d96-830e-4100-9b4c-663225a3f872")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.VPC = vpcIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceTemplateOptions model
				createInstanceTemplateOptionsModel := new(vpcv1.CreateInstanceTemplateOptions)
				createInstanceTemplateOptionsModel.InstanceTemplatePrototype = instanceTemplatePrototypeModel
				createInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstanceTemplate(createInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstanceTemplate(createInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceTemplate(createInstanceTemplateOptions *CreateInstanceTemplateOptions)`, func() {
		version := "testString"
		createInstanceTemplatePath := "/instance/templates"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceTemplatePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "name": "my-instance-template", "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"capacity": 100, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "iops": 10000, "name": "my-volume", "profile": {"name": "general-purpose"}}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateInstanceTemplate successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID)
				volumeAttachmentVolumePrototypeInstanceContextModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("dc201ab2-8536-4904-86a8-084d84582133")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("3f9a2d96-830e-4100-9b4c-663225a3f872")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.VPC = vpcIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceTemplateOptions model
				createInstanceTemplateOptionsModel := new(vpcv1.CreateInstanceTemplateOptions)
				createInstanceTemplateOptionsModel.InstanceTemplatePrototype = instanceTemplatePrototypeModel
				createInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceTemplateWithContext(ctx, createInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstanceTemplate(createInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceTemplateWithContext(ctx, createInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceTemplatePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "name": "my-instance-template", "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"capacity": 100, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "iops": 10000, "name": "my-volume", "profile": {"name": "general-purpose"}}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateInstanceTemplate successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstanceTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID)
				volumeAttachmentVolumePrototypeInstanceContextModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("dc201ab2-8536-4904-86a8-084d84582133")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("3f9a2d96-830e-4100-9b4c-663225a3f872")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.VPC = vpcIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceTemplateOptions model
				createInstanceTemplateOptionsModel := new(vpcv1.CreateInstanceTemplateOptions)
				createInstanceTemplateOptionsModel.InstanceTemplatePrototype = instanceTemplatePrototypeModel
				createInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstanceTemplate(createInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstanceTemplate with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID)
				volumeAttachmentVolumePrototypeInstanceContextModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("dc201ab2-8536-4904-86a8-084d84582133")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("3f9a2d96-830e-4100-9b4c-663225a3f872")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.VPC = vpcIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceTemplateOptions model
				createInstanceTemplateOptionsModel := new(vpcv1.CreateInstanceTemplateOptions)
				createInstanceTemplateOptionsModel.InstanceTemplatePrototype = instanceTemplatePrototypeModel
				createInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstanceTemplate(createInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceTemplateOptions model with no property values
				createInstanceTemplateOptionsModelNew := new(vpcv1.CreateInstanceTemplateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstanceTemplate(createInstanceTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateInstanceTemplate successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID)
				volumeAttachmentVolumePrototypeInstanceContextModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("dc201ab2-8536-4904-86a8-084d84582133")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("3f9a2d96-830e-4100-9b4c-663225a3f872")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.VPC = vpcIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceTemplateOptions model
				createInstanceTemplateOptionsModel := new(vpcv1.CreateInstanceTemplateOptions)
				createInstanceTemplateOptionsModel.InstanceTemplatePrototype = instanceTemplatePrototypeModel
				createInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstanceTemplate(createInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceTemplate(deleteInstanceTemplateOptions *DeleteInstanceTemplateOptions)`, func() {
		version := "testString"
		deleteInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceTemplatePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceTemplate successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceTemplateOptions model
				deleteInstanceTemplateOptionsModel := new(vpcv1.DeleteInstanceTemplateOptions)
				deleteInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceTemplate(deleteInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceTemplate with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceTemplateOptions model
				deleteInstanceTemplateOptionsModel := new(vpcv1.DeleteInstanceTemplateOptions)
				deleteInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceTemplate(deleteInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceTemplateOptions model with no property values
				deleteInstanceTemplateOptionsModelNew := new(vpcv1.DeleteInstanceTemplateOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceTemplate(deleteInstanceTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceTemplate(getInstanceTemplateOptions *GetInstanceTemplateOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceTemplatePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceTemplate with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceTemplateOptions model
				getInstanceTemplateOptionsModel := new(vpcv1.GetInstanceTemplateOptions)
				getInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				getInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceTemplate(getInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceTemplate(getInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceTemplate(getInstanceTemplateOptions *GetInstanceTemplateOptions)`, func() {
		version := "testString"
		getInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceTemplatePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "name": "my-instance-template", "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"capacity": 100, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "iops": 10000, "name": "my-volume", "profile": {"name": "general-purpose"}}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetInstanceTemplate successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceTemplateOptions model
				getInstanceTemplateOptionsModel := new(vpcv1.GetInstanceTemplateOptions)
				getInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				getInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceTemplateWithContext(ctx, getInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceTemplate(getInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceTemplateWithContext(ctx, getInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceTemplatePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "name": "my-instance-template", "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"capacity": 100, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "iops": 10000, "name": "my-volume", "profile": {"name": "general-purpose"}}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetInstanceTemplate successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceTemplateOptions model
				getInstanceTemplateOptionsModel := new(vpcv1.GetInstanceTemplateOptions)
				getInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				getInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceTemplate(getInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceTemplate with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceTemplateOptions model
				getInstanceTemplateOptionsModel := new(vpcv1.GetInstanceTemplateOptions)
				getInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				getInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceTemplate(getInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceTemplateOptions model with no property values
				getInstanceTemplateOptionsModelNew := new(vpcv1.GetInstanceTemplateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceTemplate(getInstanceTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceTemplate successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceTemplateOptions model
				getInstanceTemplateOptionsModel := new(vpcv1.GetInstanceTemplateOptions)
				getInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				getInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceTemplate(getInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceTemplate(updateInstanceTemplateOptions *UpdateInstanceTemplateOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceTemplatePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceTemplate with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplatePatch model
				instanceTemplatePatchModel := new(vpcv1.InstanceTemplatePatch)
				instanceTemplatePatchModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePatchModelAsPatch, asPatchErr := instanceTemplatePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceTemplateOptions model
				updateInstanceTemplateOptionsModel := new(vpcv1.UpdateInstanceTemplateOptions)
				updateInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				updateInstanceTemplateOptionsModel.InstanceTemplatePatch = instanceTemplatePatchModelAsPatch
				updateInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceTemplate(updateInstanceTemplateOptions *UpdateInstanceTemplateOptions)`, func() {
		version := "testString"
		updateInstanceTemplatePath := "/instance/templates/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceTemplatePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "name": "my-instance-template", "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"capacity": 100, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "iops": 10000, "name": "my-volume", "profile": {"name": "general-purpose"}}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateInstanceTemplate successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceTemplatePatch model
				instanceTemplatePatchModel := new(vpcv1.InstanceTemplatePatch)
				instanceTemplatePatchModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePatchModelAsPatch, asPatchErr := instanceTemplatePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceTemplateOptions model
				updateInstanceTemplateOptionsModel := new(vpcv1.UpdateInstanceTemplateOptions)
				updateInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				updateInstanceTemplateOptionsModel.InstanceTemplatePatch = instanceTemplatePatchModelAsPatch
				updateInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceTemplateWithContext(ctx, updateInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceTemplateWithContext(ctx, updateInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceTemplatePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "keys": [{"id": "a6b1a881-2ce8-41a3-80fc-36316a73f803"}], "name": "my-instance-template", "network_interfaces": [{"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}], "placement_target": {"id": "1e09281b-f177-46fb-baf1-bc152b2e391a"}, "profile": {"name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "user_data": "UserData", "volume_attachments": [{"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"}}], "vpc": {"id": "4727d842-f94f-4a2d-824a-9bc9b02c523b"}, "boot_volume_attachment": {"delete_volume_on_instance_delete": true, "name": "my-volume-attachment", "volume": {"capacity": 100, "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "iops": 10000, "name": "my-volume", "profile": {"name": "general-purpose"}}}, "image": {"id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"}, "primary_network_interface": {"allow_ip_spoofing": true, "name": "my-network-interface", "primary_ipv4_address": "10.0.0.5", "security_groups": [{"id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271"}], "subnet": {"id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"}}, "zone": {"name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateInstanceTemplate successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstanceTemplate(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceTemplatePatch model
				instanceTemplatePatchModel := new(vpcv1.InstanceTemplatePatch)
				instanceTemplatePatchModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePatchModelAsPatch, asPatchErr := instanceTemplatePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceTemplateOptions model
				updateInstanceTemplateOptionsModel := new(vpcv1.UpdateInstanceTemplateOptions)
				updateInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				updateInstanceTemplateOptionsModel.InstanceTemplatePatch = instanceTemplatePatchModelAsPatch
				updateInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstanceTemplate with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplatePatch model
				instanceTemplatePatchModel := new(vpcv1.InstanceTemplatePatch)
				instanceTemplatePatchModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePatchModelAsPatch, asPatchErr := instanceTemplatePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceTemplateOptions model
				updateInstanceTemplateOptionsModel := new(vpcv1.UpdateInstanceTemplateOptions)
				updateInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				updateInstanceTemplateOptionsModel.InstanceTemplatePatch = instanceTemplatePatchModelAsPatch
				updateInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceTemplateOptions model with no property values
				updateInstanceTemplateOptionsModelNew := new(vpcv1.UpdateInstanceTemplateOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstanceTemplate successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplatePatch model
				instanceTemplatePatchModel := new(vpcv1.InstanceTemplatePatch)
				instanceTemplatePatchModel.Name = core.StringPtr("my-instance-template")
				instanceTemplatePatchModelAsPatch, asPatchErr := instanceTemplatePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceTemplateOptions model
				updateInstanceTemplateOptionsModel := new(vpcv1.UpdateInstanceTemplateOptions)
				updateInstanceTemplateOptionsModel.ID = core.StringPtr("testString")
				updateInstanceTemplateOptionsModel.InstanceTemplatePatch = instanceTemplatePatchModelAsPatch
				updateInstanceTemplateOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstanceTemplate(updateInstanceTemplateOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstances(listInstancesOptions *ListInstancesOptions) - Operation response error`, func() {
		version := "testString"
		listInstancesPath := "/instances"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstancesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstances with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstancesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listInstancesOptionsModel.Name = core.StringPtr("testString")
				listInstancesOptionsModel.VPCID = core.StringPtr("testString")
				listInstancesOptionsModel.VPCCRN = core.StringPtr("testString")
				listInstancesOptionsModel.VPCName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstances(listInstancesOptions *ListInstancesOptions)`, func() {
		version := "testString"
		listInstancesPath := "/instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "instances": [{"bandwidth": 1000, "boot_volume_attachment": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}], "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "status_reasons": [{"code": "cannot_start_storage", "message": "The virtual server instance is unusable because the encryption key for the boot volume has been deleted", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstances successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstancesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listInstancesOptionsModel.Name = core.StringPtr("testString")
				listInstancesOptionsModel.VPCID = core.StringPtr("testString")
				listInstancesOptionsModel.VPCCRN = core.StringPtr("testString")
				listInstancesOptionsModel.VPCName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstancesWithContext(ctx, listInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstancesWithContext(ctx, listInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstancesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?limit=20"}, "instances": [{"bandwidth": 1000, "boot_volume_attachment": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}], "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "status_reasons": [{"code": "cannot_start_storage", "message": "The virtual server instance is unusable because the encryption key for the boot volume has been deleted", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstances successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstances(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstancesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listInstancesOptionsModel.Name = core.StringPtr("testString")
				listInstancesOptionsModel.VPCID = core.StringPtr("testString")
				listInstancesOptionsModel.VPCCRN = core.StringPtr("testString")
				listInstancesOptionsModel.VPCName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstances with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstancesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listInstancesOptionsModel.Name = core.StringPtr("testString")
				listInstancesOptionsModel.VPCID = core.StringPtr("testString")
				listInstancesOptionsModel.VPCCRN = core.StringPtr("testString")
				listInstancesOptionsModel.VPCName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstances successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := new(vpcv1.ListInstancesOptions)
				listInstancesOptionsModel.Start = core.StringPtr("testString")
				listInstancesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstancesOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listInstancesOptionsModel.Name = core.StringPtr("testString")
				listInstancesOptionsModel.VPCID = core.StringPtr("testString")
				listInstancesOptionsModel.VPCCRN = core.StringPtr("testString")
				listInstancesOptionsModel.VPCName = core.StringPtr("testString")
				listInstancesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstances(listInstancesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstance(createInstanceOptions *CreateInstanceOptions) - Operation response error`, func() {
		version := "testString"
		createInstancePath := "/instances"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstancePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstance with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("0787-8c2a09be-ee18-4af2-8ef4-6a6060732221")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:[...]")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity)
				volumeAttachmentVolumePrototypeInstanceContextModel.Iops = core.Int64Ptr(int64(10000))
				volumeAttachmentVolumePrototypeInstanceContextModel.Name = core.StringPtr("my-data-volume")
				volumeAttachmentVolumePrototypeInstanceContextModel.Profile = volumeProfileIdentityModel
				volumeAttachmentVolumePrototypeInstanceContextModel.Capacity = core.Int64Ptr(int64(1000))
				volumeAttachmentVolumePrototypeInstanceContextModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-boot-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("9aaf3bcb-dcd7-4de7-bb60-24e39ff9d366")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstance(createInstanceOptions *CreateInstanceOptions)`, func() {
		version := "testString"
		createInstancePath := "/instances"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"bandwidth": 1000, "boot_volume_attachment": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}], "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "status_reasons": [{"code": "cannot_start_storage", "message": "The virtual server instance is unusable because the encryption key for the boot volume has been deleted", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateInstance successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("0787-8c2a09be-ee18-4af2-8ef4-6a6060732221")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:[...]")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity)
				volumeAttachmentVolumePrototypeInstanceContextModel.Iops = core.Int64Ptr(int64(10000))
				volumeAttachmentVolumePrototypeInstanceContextModel.Name = core.StringPtr("my-data-volume")
				volumeAttachmentVolumePrototypeInstanceContextModel.Profile = volumeProfileIdentityModel
				volumeAttachmentVolumePrototypeInstanceContextModel.Capacity = core.Int64Ptr(int64(1000))
				volumeAttachmentVolumePrototypeInstanceContextModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-boot-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("9aaf3bcb-dcd7-4de7-bb60-24e39ff9d366")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceWithContext(ctx, createInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceWithContext(ctx, createInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstancePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"bandwidth": 1000, "boot_volume_attachment": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}], "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "status_reasons": [{"code": "cannot_start_storage", "message": "The virtual server instance is unusable because the encryption key for the boot volume has been deleted", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateInstance successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("0787-8c2a09be-ee18-4af2-8ef4-6a6060732221")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:[...]")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity)
				volumeAttachmentVolumePrototypeInstanceContextModel.Iops = core.Int64Ptr(int64(10000))
				volumeAttachmentVolumePrototypeInstanceContextModel.Name = core.StringPtr("my-data-volume")
				volumeAttachmentVolumePrototypeInstanceContextModel.Profile = volumeProfileIdentityModel
				volumeAttachmentVolumePrototypeInstanceContextModel.Capacity = core.Int64Ptr(int64(1000))
				volumeAttachmentVolumePrototypeInstanceContextModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-boot-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("9aaf3bcb-dcd7-4de7-bb60-24e39ff9d366")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstance with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("0787-8c2a09be-ee18-4af2-8ef4-6a6060732221")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:[...]")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity)
				volumeAttachmentVolumePrototypeInstanceContextModel.Iops = core.Int64Ptr(int64(10000))
				volumeAttachmentVolumePrototypeInstanceContextModel.Name = core.StringPtr("my-data-volume")
				volumeAttachmentVolumePrototypeInstanceContextModel.Profile = volumeProfileIdentityModel
				volumeAttachmentVolumePrototypeInstanceContextModel.Capacity = core.Int64Ptr(int64(1000))
				volumeAttachmentVolumePrototypeInstanceContextModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-boot-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("9aaf3bcb-dcd7-4de7-bb60-24e39ff9d366")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceOptions model with no property values
				createInstanceOptionsModelNew := new(vpcv1.CreateInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstance(createInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateInstance successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				keyIdentityModel.ID = core.StringPtr("363f6d70-0000-0001-0000-00000013b96c")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("0787-8c2a09be-ee18-4af2-8ef4-6a6060732221")

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				instanceProfileIdentityModel.Name = core.StringPtr("bx2-2x8")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:[...]")

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity)
				volumeAttachmentVolumePrototypeInstanceContextModel.Iops = core.Int64Ptr(int64(10000))
				volumeAttachmentVolumePrototypeInstanceContextModel.Name = core.StringPtr("my-data-volume")
				volumeAttachmentVolumePrototypeInstanceContextModel.Profile = volumeProfileIdentityModel
				volumeAttachmentVolumePrototypeInstanceContextModel.Capacity = core.Int64Ptr(int64(1000))
				volumeAttachmentVolumePrototypeInstanceContextModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-boot-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				imageIdentityModel.ID = core.StringPtr("9aaf3bcb-dcd7-4de7-bb60-24e39ff9d366")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateInstanceOptions model
				createInstanceOptionsModel := new(vpcv1.CreateInstanceOptions)
				createInstanceOptionsModel.InstancePrototype = instancePrototypeModel
				createInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstance(createInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstance(deleteInstanceOptions *DeleteInstanceOptions)`, func() {
		version := "testString"
		deleteInstancePath := "/instances/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstancePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstance successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceOptions model
				deleteInstanceOptionsModel := new(vpcv1.DeleteInstanceOptions)
				deleteInstanceOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstance(deleteInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstance with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceOptions model
				deleteInstanceOptionsModel := new(vpcv1.DeleteInstanceOptions)
				deleteInstanceOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstance(deleteInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceOptions model with no property values
				deleteInstanceOptionsModelNew := new(vpcv1.DeleteInstanceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstance(deleteInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstance(getInstanceOptions *GetInstanceOptions) - Operation response error`, func() {
		version := "testString"
		getInstancePath := "/instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstancePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstance with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstance(getInstanceOptions *GetInstanceOptions)`, func() {
		version := "testString"
		getInstancePath := "/instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstancePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"bandwidth": 1000, "boot_volume_attachment": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}], "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "status_reasons": [{"code": "cannot_start_storage", "message": "The virtual server instance is unusable because the encryption key for the boot volume has been deleted", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetInstance successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceWithContext(ctx, getInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceWithContext(ctx, getInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstancePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"bandwidth": 1000, "boot_volume_attachment": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}], "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "status_reasons": [{"code": "cannot_start_storage", "message": "The virtual server instance is unusable because the encryption key for the boot volume has been deleted", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetInstance successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstance with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceOptions model with no property values
				getInstanceOptionsModelNew := new(vpcv1.GetInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstance(getInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstance successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceOptions model
				getInstanceOptionsModel := new(vpcv1.GetInstanceOptions)
				getInstanceOptionsModel.ID = core.StringPtr("testString")
				getInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstance(getInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstance(updateInstanceOptions *UpdateInstanceOptions) - Operation response error`, func() {
		version := "testString"
		updateInstancePath := "/instances/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstancePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstance with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstancePatchProfileInstanceProfileIdentityByName model
				instancePatchProfileModel := new(vpcv1.InstancePatchProfileInstanceProfileIdentityByName)
				instancePatchProfileModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the InstancePatch model
				instancePatchModel := new(vpcv1.InstancePatch)
				instancePatchModel.Name = core.StringPtr("my-instance")
				instancePatchModel.Profile = instancePatchProfileModel
				instancePatchModelAsPatch, asPatchErr := instancePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.InstancePatch = instancePatchModelAsPatch
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstance(updateInstanceOptions *UpdateInstanceOptions)`, func() {
		version := "testString"
		updateInstancePath := "/instances/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstancePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"bandwidth": 1000, "boot_volume_attachment": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}], "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "status_reasons": [{"code": "cannot_start_storage", "message": "The virtual server instance is unusable because the encryption key for the boot volume has been deleted", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateInstance successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstancePatchProfileInstanceProfileIdentityByName model
				instancePatchProfileModel := new(vpcv1.InstancePatchProfileInstanceProfileIdentityByName)
				instancePatchProfileModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the InstancePatch model
				instancePatchModel := new(vpcv1.InstancePatch)
				instancePatchModel.Name = core.StringPtr("my-instance")
				instancePatchModel.Profile = instancePatchProfileModel
				instancePatchModelAsPatch, asPatchErr := instancePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.InstancePatch = instancePatchModelAsPatch
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceWithContext(ctx, updateInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceWithContext(ctx, updateInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstancePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"bandwidth": 1000, "boot_volume_attachment": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}], "gpu": {"count": 1, "manufacturer": "nvidia", "memory": 1, "model": "Tesla V100"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "image": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "id": "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8", "name": "my-image"}, "memory": 8, "name": "my-instance", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}], "primary_network_interface": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}}, "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "status_reasons": [{"code": "cannot_start_storage", "message": "The virtual server instance is unusable because the encryption key for the boot volume has been deleted", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "vcpu": {"architecture": "amd64", "count": 4}, "volume_attachments": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateInstance successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstance(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstancePatchProfileInstanceProfileIdentityByName model
				instancePatchProfileModel := new(vpcv1.InstancePatchProfileInstanceProfileIdentityByName)
				instancePatchProfileModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the InstancePatch model
				instancePatchModel := new(vpcv1.InstancePatch)
				instancePatchModel.Name = core.StringPtr("my-instance")
				instancePatchModel.Profile = instancePatchProfileModel
				instancePatchModelAsPatch, asPatchErr := instancePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.InstancePatch = instancePatchModelAsPatch
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstance with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstancePatchProfileInstanceProfileIdentityByName model
				instancePatchProfileModel := new(vpcv1.InstancePatchProfileInstanceProfileIdentityByName)
				instancePatchProfileModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the InstancePatch model
				instancePatchModel := new(vpcv1.InstancePatch)
				instancePatchModel.Name = core.StringPtr("my-instance")
				instancePatchModel.Profile = instancePatchProfileModel
				instancePatchModelAsPatch, asPatchErr := instancePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.InstancePatch = instancePatchModelAsPatch
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceOptions model with no property values
				updateInstanceOptionsModelNew := new(vpcv1.UpdateInstanceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstance(updateInstanceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstance successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstancePatchProfileInstanceProfileIdentityByName model
				instancePatchProfileModel := new(vpcv1.InstancePatchProfileInstanceProfileIdentityByName)
				instancePatchProfileModel.Name = core.StringPtr("bc1-4x16")

				// Construct an instance of the InstancePatch model
				instancePatchModel := new(vpcv1.InstancePatch)
				instancePatchModel.Name = core.StringPtr("my-instance")
				instancePatchModel.Profile = instancePatchProfileModel
				instancePatchModelAsPatch, asPatchErr := instancePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceOptions model
				updateInstanceOptionsModel := new(vpcv1.UpdateInstanceOptions)
				updateInstanceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceOptionsModel.InstancePatch = instancePatchModelAsPatch
				updateInstanceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstance(updateInstanceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceInitialization(getInstanceInitializationOptions *GetInstanceInitializationOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceInitializationPath := "/instances/testString/initialization"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceInitializationPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceInitialization with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceInitialization(getInstanceInitializationOptions *GetInstanceInitializationOptions)`, func() {
		version := "testString"
		getInstanceInitializationPath := "/instances/testString/initialization"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceInitializationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"keys": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}], "password": {"encrypted_password": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "encryption_key": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}}}`)
				}))
			})
			It(`Invoke GetInstanceInitialization successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceInitializationWithContext(ctx, getInstanceInitializationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceInitializationWithContext(ctx, getInstanceInitializationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceInitializationPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"keys": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}], "password": {"encrypted_password": "VGhpcyBpcyBhbiBlbmNvZGVkIGJ5dGUgYXJyYXku", "encryption_key": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "fingerprint": "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY", "href": "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-key"}}}`)
				}))
			})
			It(`Invoke GetInstanceInitialization successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceInitialization(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceInitialization with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceInitializationOptions model with no property values
				getInstanceInitializationOptionsModelNew := new(vpcv1.GetInstanceInitializationOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceInitialization(getInstanceInitializationOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceInitialization successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceInitializationOptions model
				getInstanceInitializationOptionsModel := new(vpcv1.GetInstanceInitializationOptions)
				getInstanceInitializationOptionsModel.ID = core.StringPtr("testString")
				getInstanceInitializationOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceInitialization(getInstanceInitializationOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceAction(createInstanceActionOptions *CreateInstanceActionOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceActionPath := "/instances/testString/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceAction with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Force = core.BoolPtr(true)
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceAction(createInstanceActionOptions *CreateInstanceActionOptions)`, func() {
		version := "testString"
		createInstanceActionPath := "/instances/testString/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"completed_at": "2019-01-01T12:00:00.000Z", "created_at": "2019-01-01T12:00:00.000Z", "force": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed", "id": "109a1b6e-1242-4de1-be44-38705e9474ed", "started_at": "2019-01-01T12:00:00.000Z", "status": "completed", "type": "reboot"}`)
				}))
			})
			It(`Invoke CreateInstanceAction successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Force = core.BoolPtr(true)
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceActionWithContext(ctx, createInstanceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceActionWithContext(ctx, createInstanceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"completed_at": "2019-01-01T12:00:00.000Z", "created_at": "2019-01-01T12:00:00.000Z", "force": false, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/actions/109a1b6e-1242-4de1-be44-38705e9474ed", "id": "109a1b6e-1242-4de1-be44-38705e9474ed", "started_at": "2019-01-01T12:00:00.000Z", "status": "completed", "type": "reboot"}`)
				}))
			})
			It(`Invoke CreateInstanceAction successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstanceAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Force = core.BoolPtr(true)
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstanceAction with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Force = core.BoolPtr(true)
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceActionOptions model with no property values
				createInstanceActionOptionsModelNew := new(vpcv1.CreateInstanceActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstanceAction(createInstanceActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateInstanceAction successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceActionOptions model
				createInstanceActionOptionsModel := new(vpcv1.CreateInstanceActionOptions)
				createInstanceActionOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceActionOptionsModel.Type = core.StringPtr("reboot")
				createInstanceActionOptionsModel.Force = core.BoolPtr(true)
				createInstanceActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstanceAction(createInstanceActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptions *CreateInstanceConsoleAccessTokenOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceConsoleAccessTokenPath := "/instances/testString/console_access_token"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceConsoleAccessTokenPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceConsoleAccessToken with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceConsoleAccessTokenOptions model
				createInstanceConsoleAccessTokenOptionsModel := new(vpcv1.CreateInstanceConsoleAccessTokenOptions)
				createInstanceConsoleAccessTokenOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceConsoleAccessTokenOptionsModel.ConsoleType = core.StringPtr("serial")
				createInstanceConsoleAccessTokenOptionsModel.Force = core.BoolPtr(false)
				createInstanceConsoleAccessTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptions *CreateInstanceConsoleAccessTokenOptions)`, func() {
		version := "testString"
		createInstanceConsoleAccessTokenPath := "/instances/testString/console_access_token"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceConsoleAccessTokenPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"access_token": "VGhpcyBJcyBhIHRva2Vu", "console_type": "serial", "created_at": "2020-07-27T21:50:14.000Z", "expires_at": "2020-07-27T21:51:14.000Z", "force": false, "href": "wss://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/console?access_token=VGhpcyBJcyBhIHRva2Vu"}`)
				}))
			})
			It(`Invoke CreateInstanceConsoleAccessToken successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the CreateInstanceConsoleAccessTokenOptions model
				createInstanceConsoleAccessTokenOptionsModel := new(vpcv1.CreateInstanceConsoleAccessTokenOptions)
				createInstanceConsoleAccessTokenOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceConsoleAccessTokenOptionsModel.ConsoleType = core.StringPtr("serial")
				createInstanceConsoleAccessTokenOptionsModel.Force = core.BoolPtr(false)
				createInstanceConsoleAccessTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceConsoleAccessTokenWithContext(ctx, createInstanceConsoleAccessTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceConsoleAccessTokenWithContext(ctx, createInstanceConsoleAccessTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceConsoleAccessTokenPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"access_token": "VGhpcyBJcyBhIHRva2Vu", "console_type": "serial", "created_at": "2020-07-27T21:50:14.000Z", "expires_at": "2020-07-27T21:51:14.000Z", "force": false, "href": "wss://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/console?access_token=VGhpcyBJcyBhIHRva2Vu"}`)
				}))
			})
			It(`Invoke CreateInstanceConsoleAccessToken successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstanceConsoleAccessToken(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateInstanceConsoleAccessTokenOptions model
				createInstanceConsoleAccessTokenOptionsModel := new(vpcv1.CreateInstanceConsoleAccessTokenOptions)
				createInstanceConsoleAccessTokenOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceConsoleAccessTokenOptionsModel.ConsoleType = core.StringPtr("serial")
				createInstanceConsoleAccessTokenOptionsModel.Force = core.BoolPtr(false)
				createInstanceConsoleAccessTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstanceConsoleAccessToken with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceConsoleAccessTokenOptions model
				createInstanceConsoleAccessTokenOptionsModel := new(vpcv1.CreateInstanceConsoleAccessTokenOptions)
				createInstanceConsoleAccessTokenOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceConsoleAccessTokenOptionsModel.ConsoleType = core.StringPtr("serial")
				createInstanceConsoleAccessTokenOptionsModel.Force = core.BoolPtr(false)
				createInstanceConsoleAccessTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceConsoleAccessTokenOptions model with no property values
				createInstanceConsoleAccessTokenOptionsModelNew := new(vpcv1.CreateInstanceConsoleAccessTokenOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke CreateInstanceConsoleAccessToken successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateInstanceConsoleAccessTokenOptions model
				createInstanceConsoleAccessTokenOptionsModel := new(vpcv1.CreateInstanceConsoleAccessTokenOptions)
				createInstanceConsoleAccessTokenOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceConsoleAccessTokenOptionsModel.ConsoleType = core.StringPtr("serial")
				createInstanceConsoleAccessTokenOptionsModel.Force = core.BoolPtr(false)
				createInstanceConsoleAccessTokenOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstanceConsoleAccessToken(createInstanceConsoleAccessTokenOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceDisks(listInstanceDisksOptions *ListInstanceDisksOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceDisksPath := "/instances/testString/disks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceDisksPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceDisks with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceDisksOptions model
				listInstanceDisksOptionsModel := new(vpcv1.ListInstanceDisksOptions)
				listInstanceDisksOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceDisks(listInstanceDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceDisks(listInstanceDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceDisks(listInstanceDisksOptions *ListInstanceDisksOptions)`, func() {
		version := "testString"
		listInstanceDisksPath := "/instances/testString/disks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceDisksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}]}`)
				}))
			})
			It(`Invoke ListInstanceDisks successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceDisksOptions model
				listInstanceDisksOptionsModel := new(vpcv1.ListInstanceDisksOptions)
				listInstanceDisksOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceDisksWithContext(ctx, listInstanceDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceDisks(listInstanceDisksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceDisksWithContext(ctx, listInstanceDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceDisksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"disks": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}]}`)
				}))
			})
			It(`Invoke ListInstanceDisks successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceDisks(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceDisksOptions model
				listInstanceDisksOptionsModel := new(vpcv1.ListInstanceDisksOptions)
				listInstanceDisksOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceDisks(listInstanceDisksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceDisks with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceDisksOptions model
				listInstanceDisksOptionsModel := new(vpcv1.ListInstanceDisksOptions)
				listInstanceDisksOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceDisks(listInstanceDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceDisksOptions model with no property values
				listInstanceDisksOptionsModelNew := new(vpcv1.ListInstanceDisksOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListInstanceDisks(listInstanceDisksOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceDisks successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceDisksOptions model
				listInstanceDisksOptionsModel := new(vpcv1.ListInstanceDisksOptions)
				listInstanceDisksOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceDisks(listInstanceDisksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceDisk(getInstanceDiskOptions *GetInstanceDiskOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceDiskPath := "/instances/testString/disks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceDiskPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceDisk with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceDiskOptions model
				getInstanceDiskOptionsModel := new(vpcv1.GetInstanceDiskOptions)
				getInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceDisk(getInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceDisk(getInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceDisk(getInstanceDiskOptions *GetInstanceDiskOptions)`, func() {
		version := "testString"
		getInstanceDiskPath := "/instances/testString/disks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceDiskPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}`)
				}))
			})
			It(`Invoke GetInstanceDisk successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceDiskOptions model
				getInstanceDiskOptionsModel := new(vpcv1.GetInstanceDiskOptions)
				getInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceDiskWithContext(ctx, getInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceDisk(getInstanceDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceDiskWithContext(ctx, getInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceDiskPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}`)
				}))
			})
			It(`Invoke GetInstanceDisk successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceDisk(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceDiskOptions model
				getInstanceDiskOptionsModel := new(vpcv1.GetInstanceDiskOptions)
				getInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceDisk(getInstanceDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceDisk with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceDiskOptions model
				getInstanceDiskOptionsModel := new(vpcv1.GetInstanceDiskOptions)
				getInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceDisk(getInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceDiskOptions model with no property values
				getInstanceDiskOptionsModelNew := new(vpcv1.GetInstanceDiskOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceDisk(getInstanceDiskOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceDisk successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceDiskOptions model
				getInstanceDiskOptionsModel := new(vpcv1.GetInstanceDiskOptions)
				getInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				getInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceDisk(getInstanceDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceDisk(updateInstanceDiskOptions *UpdateInstanceDiskOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceDiskPath := "/instances/testString/disks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceDiskPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceDisk with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceDiskPatch model
				instanceDiskPatchModel := new(vpcv1.InstanceDiskPatch)
				instanceDiskPatchModel.Name = core.StringPtr("my-instance-disk-updated")
				instanceDiskPatchModelAsPatch, asPatchErr := instanceDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceDiskOptions model
				updateInstanceDiskOptionsModel := new(vpcv1.UpdateInstanceDiskOptions)
				updateInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.InstanceDiskPatch = instanceDiskPatchModelAsPatch
				updateInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstanceDisk(updateInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstanceDisk(updateInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceDisk(updateInstanceDiskOptions *UpdateInstanceDiskOptions)`, func() {
		version := "testString"
		updateInstanceDiskPath := "/instances/testString/disks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceDiskPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}`)
				}))
			})
			It(`Invoke UpdateInstanceDisk successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceDiskPatch model
				instanceDiskPatchModel := new(vpcv1.InstanceDiskPatch)
				instanceDiskPatchModel.Name = core.StringPtr("my-instance-disk-updated")
				instanceDiskPatchModelAsPatch, asPatchErr := instanceDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceDiskOptions model
				updateInstanceDiskOptionsModel := new(vpcv1.UpdateInstanceDiskOptions)
				updateInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.InstanceDiskPatch = instanceDiskPatchModelAsPatch
				updateInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceDiskWithContext(ctx, updateInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstanceDisk(updateInstanceDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceDiskWithContext(ctx, updateInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceDiskPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "interface_type": "virtio_blk", "name": "my-instance-disk", "resource_type": "instance_disk", "size": 100}`)
				}))
			})
			It(`Invoke UpdateInstanceDisk successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstanceDisk(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceDiskPatch model
				instanceDiskPatchModel := new(vpcv1.InstanceDiskPatch)
				instanceDiskPatchModel.Name = core.StringPtr("my-instance-disk-updated")
				instanceDiskPatchModelAsPatch, asPatchErr := instanceDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceDiskOptions model
				updateInstanceDiskOptionsModel := new(vpcv1.UpdateInstanceDiskOptions)
				updateInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.InstanceDiskPatch = instanceDiskPatchModelAsPatch
				updateInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstanceDisk(updateInstanceDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstanceDisk with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceDiskPatch model
				instanceDiskPatchModel := new(vpcv1.InstanceDiskPatch)
				instanceDiskPatchModel.Name = core.StringPtr("my-instance-disk-updated")
				instanceDiskPatchModelAsPatch, asPatchErr := instanceDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceDiskOptions model
				updateInstanceDiskOptionsModel := new(vpcv1.UpdateInstanceDiskOptions)
				updateInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.InstanceDiskPatch = instanceDiskPatchModelAsPatch
				updateInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstanceDisk(updateInstanceDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceDiskOptions model with no property values
				updateInstanceDiskOptionsModelNew := new(vpcv1.UpdateInstanceDiskOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstanceDisk(updateInstanceDiskOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstanceDisk successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceDiskPatch model
				instanceDiskPatchModel := new(vpcv1.InstanceDiskPatch)
				instanceDiskPatchModel.Name = core.StringPtr("my-instance-disk-updated")
				instanceDiskPatchModelAsPatch, asPatchErr := instanceDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceDiskOptions model
				updateInstanceDiskOptionsModel := new(vpcv1.UpdateInstanceDiskOptions)
				updateInstanceDiskOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.ID = core.StringPtr("testString")
				updateInstanceDiskOptionsModel.InstanceDiskPatch = instanceDiskPatchModelAsPatch
				updateInstanceDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstanceDisk(updateInstanceDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptions *ListInstanceNetworkInterfacesOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceNetworkInterfacesPath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaces with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				listInstanceNetworkInterfacesOptionsModel := new(vpcv1.ListInstanceNetworkInterfacesOptions)
				listInstanceNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptions *ListInstanceNetworkInterfacesOptions)`, func() {
		version := "testString"
		listInstanceNetworkInterfacesPath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"network_interfaces": [{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaces successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				listInstanceNetworkInterfacesOptionsModel := new(vpcv1.ListInstanceNetworkInterfacesOptions)
				listInstanceNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceNetworkInterfacesWithContext(ctx, listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceNetworkInterfacesWithContext(ctx, listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"network_interfaces": [{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}]}`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaces successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				listInstanceNetworkInterfacesOptionsModel := new(vpcv1.ListInstanceNetworkInterfacesOptions)
				listInstanceNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceNetworkInterfaces with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				listInstanceNetworkInterfacesOptionsModel := new(vpcv1.ListInstanceNetworkInterfacesOptions)
				listInstanceNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceNetworkInterfacesOptions model with no property values
				listInstanceNetworkInterfacesOptionsModelNew := new(vpcv1.ListInstanceNetworkInterfacesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaces successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				listInstanceNetworkInterfacesOptionsModel := new(vpcv1.ListInstanceNetworkInterfacesOptions)
				listInstanceNetworkInterfacesOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaces(listInstanceNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceNetworkInterface(createInstanceNetworkInterfaceOptions *CreateInstanceNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceNetworkInterfacePath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceNetworkInterface with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateInstanceNetworkInterfaceOptions model
				createInstanceNetworkInterfaceOptionsModel := new(vpcv1.CreateInstanceNetworkInterfaceOptions)
				createInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceNetworkInterfaceOptionsModel.Subnet = subnetIdentityModel
				createInstanceNetworkInterfaceOptionsModel.AllowIPSpoofing = core.BoolPtr(true)
				createInstanceNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				createInstanceNetworkInterfaceOptionsModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				createInstanceNetworkInterfaceOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstanceNetworkInterface(createInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstanceNetworkInterface(createInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceNetworkInterface(createInstanceNetworkInterfaceOptions *CreateInstanceNetworkInterfaceOptions)`, func() {
		version := "testString"
		createInstanceNetworkInterfacePath := "/instances/testString/network_interfaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke CreateInstanceNetworkInterface successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateInstanceNetworkInterfaceOptions model
				createInstanceNetworkInterfaceOptionsModel := new(vpcv1.CreateInstanceNetworkInterfaceOptions)
				createInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceNetworkInterfaceOptionsModel.Subnet = subnetIdentityModel
				createInstanceNetworkInterfaceOptionsModel.AllowIPSpoofing = core.BoolPtr(true)
				createInstanceNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				createInstanceNetworkInterfaceOptionsModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				createInstanceNetworkInterfaceOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceNetworkInterfaceWithContext(ctx, createInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstanceNetworkInterface(createInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceNetworkInterfaceWithContext(ctx, createInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke CreateInstanceNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstanceNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateInstanceNetworkInterfaceOptions model
				createInstanceNetworkInterfaceOptionsModel := new(vpcv1.CreateInstanceNetworkInterfaceOptions)
				createInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceNetworkInterfaceOptionsModel.Subnet = subnetIdentityModel
				createInstanceNetworkInterfaceOptionsModel.AllowIPSpoofing = core.BoolPtr(true)
				createInstanceNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				createInstanceNetworkInterfaceOptionsModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				createInstanceNetworkInterfaceOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstanceNetworkInterface(createInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstanceNetworkInterface with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateInstanceNetworkInterfaceOptions model
				createInstanceNetworkInterfaceOptionsModel := new(vpcv1.CreateInstanceNetworkInterfaceOptions)
				createInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceNetworkInterfaceOptionsModel.Subnet = subnetIdentityModel
				createInstanceNetworkInterfaceOptionsModel.AllowIPSpoofing = core.BoolPtr(true)
				createInstanceNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				createInstanceNetworkInterfaceOptionsModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				createInstanceNetworkInterfaceOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstanceNetworkInterface(createInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceNetworkInterfaceOptions model with no property values
				createInstanceNetworkInterfaceOptionsModelNew := new(vpcv1.CreateInstanceNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstanceNetworkInterface(createInstanceNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateInstanceNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateInstanceNetworkInterfaceOptions model
				createInstanceNetworkInterfaceOptionsModel := new(vpcv1.CreateInstanceNetworkInterfaceOptions)
				createInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceNetworkInterfaceOptionsModel.Subnet = subnetIdentityModel
				createInstanceNetworkInterfaceOptionsModel.AllowIPSpoofing = core.BoolPtr(true)
				createInstanceNetworkInterfaceOptionsModel.Name = core.StringPtr("my-network-interface")
				createInstanceNetworkInterfaceOptionsModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				createInstanceNetworkInterfaceOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstanceNetworkInterface(createInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceNetworkInterface(deleteInstanceNetworkInterfaceOptions *DeleteInstanceNetworkInterfaceOptions)`, func() {
		version := "testString"
		deleteInstanceNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceNetworkInterfaceOptions model
				deleteInstanceNetworkInterfaceOptionsModel := new(vpcv1.DeleteInstanceNetworkInterfaceOptions)
				deleteInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				deleteInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceNetworkInterface(deleteInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceNetworkInterface with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceNetworkInterfaceOptions model
				deleteInstanceNetworkInterfaceOptionsModel := new(vpcv1.DeleteInstanceNetworkInterfaceOptions)
				deleteInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				deleteInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceNetworkInterface(deleteInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceNetworkInterfaceOptions model with no property values
				deleteInstanceNetworkInterfaceOptionsModelNew := new(vpcv1.DeleteInstanceNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceNetworkInterface(deleteInstanceNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptions *GetInstanceNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterface with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				getInstanceNetworkInterfaceOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceOptions)
				getInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptions *GetInstanceNetworkInterfaceOptions)`, func() {
		version := "testString"
		getInstanceNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterface successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				getInstanceNetworkInterfaceOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceOptions)
				getInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceNetworkInterfaceWithContext(ctx, getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceNetworkInterfaceWithContext(ctx, getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				getInstanceNetworkInterfaceOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceOptions)
				getInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceNetworkInterface with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				getInstanceNetworkInterfaceOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceOptions)
				getInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceNetworkInterfaceOptions model with no property values
				getInstanceNetworkInterfaceOptionsModelNew := new(vpcv1.GetInstanceNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				getInstanceNetworkInterfaceOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceOptions)
				getInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceNetworkInterface(getInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptions *UpdateInstanceNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceNetworkInterface with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkInterfacePatch model
				networkInterfacePatchModel := new(vpcv1.NetworkInterfacePatch)
				networkInterfacePatchModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePatchModel.Name = core.StringPtr("my-network-interface-1")
				networkInterfacePatchModelAsPatch, asPatchErr := networkInterfacePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceNetworkInterfaceOptions model
				updateInstanceNetworkInterfaceOptionsModel := new(vpcv1.UpdateInstanceNetworkInterfaceOptions)
				updateInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.NetworkInterfacePatch = networkInterfacePatchModelAsPatch
				updateInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptions *UpdateInstanceNetworkInterfaceOptions)`, func() {
		version := "testString"
		updateInstanceNetworkInterfacePath := "/instances/testString/network_interfaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke UpdateInstanceNetworkInterface successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the NetworkInterfacePatch model
				networkInterfacePatchModel := new(vpcv1.NetworkInterfacePatch)
				networkInterfacePatchModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePatchModel.Name = core.StringPtr("my-network-interface-1")
				networkInterfacePatchModelAsPatch, asPatchErr := networkInterfacePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceNetworkInterfaceOptions model
				updateInstanceNetworkInterfaceOptionsModel := new(vpcv1.UpdateInstanceNetworkInterfaceOptions)
				updateInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.NetworkInterfacePatch = networkInterfacePatchModelAsPatch
				updateInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceNetworkInterfaceWithContext(ctx, updateInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceNetworkInterfaceWithContext(ctx, updateInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceNetworkInterfacePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke UpdateInstanceNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstanceNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkInterfacePatch model
				networkInterfacePatchModel := new(vpcv1.NetworkInterfacePatch)
				networkInterfacePatchModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePatchModel.Name = core.StringPtr("my-network-interface-1")
				networkInterfacePatchModelAsPatch, asPatchErr := networkInterfacePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceNetworkInterfaceOptions model
				updateInstanceNetworkInterfaceOptionsModel := new(vpcv1.UpdateInstanceNetworkInterfaceOptions)
				updateInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.NetworkInterfacePatch = networkInterfacePatchModelAsPatch
				updateInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstanceNetworkInterface with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkInterfacePatch model
				networkInterfacePatchModel := new(vpcv1.NetworkInterfacePatch)
				networkInterfacePatchModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePatchModel.Name = core.StringPtr("my-network-interface-1")
				networkInterfacePatchModelAsPatch, asPatchErr := networkInterfacePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceNetworkInterfaceOptions model
				updateInstanceNetworkInterfaceOptionsModel := new(vpcv1.UpdateInstanceNetworkInterfaceOptions)
				updateInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.NetworkInterfacePatch = networkInterfacePatchModelAsPatch
				updateInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceNetworkInterfaceOptions model with no property values
				updateInstanceNetworkInterfaceOptionsModelNew := new(vpcv1.UpdateInstanceNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstanceNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkInterfacePatch model
				networkInterfacePatchModel := new(vpcv1.NetworkInterfacePatch)
				networkInterfacePatchModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePatchModel.Name = core.StringPtr("my-network-interface-1")
				networkInterfacePatchModelAsPatch, asPatchErr := networkInterfacePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceNetworkInterfaceOptions model
				updateInstanceNetworkInterfaceOptionsModel := new(vpcv1.UpdateInstanceNetworkInterfaceOptions)
				updateInstanceNetworkInterfaceOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				updateInstanceNetworkInterfaceOptionsModel.NetworkInterfacePatch = networkInterfacePatchModelAsPatch
				updateInstanceNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstanceNetworkInterface(updateInstanceNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptions *ListInstanceNetworkInterfaceFloatingIpsOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceNetworkInterfaceFloatingIpsPath := "/instances/testString/network_interfaces/testString/floating_ips"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceNetworkInterfaceFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaceFloatingIps with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := new(vpcv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptions *ListInstanceNetworkInterfaceFloatingIpsOptions)`, func() {
		version := "testString"
		listInstanceNetworkInterfaceFloatingIpsPath := "/instances/testString/network_interfaces/testString/floating_ips"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceNetworkInterfaceFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaceFloatingIps successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := new(vpcv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceNetworkInterfaceFloatingIpsWithContext(ctx, listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceNetworkInterfaceFloatingIpsWithContext(ctx, listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceNetworkInterfaceFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaceFloatingIps successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaceFloatingIps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := new(vpcv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceNetworkInterfaceFloatingIps with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := new(vpcv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model with no property values
				listInstanceNetworkInterfaceFloatingIpsOptionsModelNew := new(vpcv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceNetworkInterfaceFloatingIps successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := new(vpcv1.ListInstanceNetworkInterfaceFloatingIpsOptions)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceNetworkInterfaceFloatingIps(listInstanceNetworkInterfaceFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RemoveInstanceNetworkInterfaceFloatingIP(removeInstanceNetworkInterfaceFloatingIPOptions *RemoveInstanceNetworkInterfaceFloatingIPOptions)`, func() {
		version := "testString"
		removeInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveInstanceNetworkInterfaceFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.RemoveInstanceNetworkInterfaceFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveInstanceNetworkInterfaceFloatingIPOptions model
				removeInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.RemoveInstanceNetworkInterfaceFloatingIPOptions)
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.RemoveInstanceNetworkInterfaceFloatingIP(removeInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveInstanceNetworkInterfaceFloatingIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RemoveInstanceNetworkInterfaceFloatingIPOptions model
				removeInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.RemoveInstanceNetworkInterfaceFloatingIPOptions)
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.RemoveInstanceNetworkInterfaceFloatingIP(removeInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveInstanceNetworkInterfaceFloatingIPOptions model with no property values
				removeInstanceNetworkInterfaceFloatingIPOptionsModelNew := new(vpcv1.RemoveInstanceNetworkInterfaceFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.RemoveInstanceNetworkInterfaceFloatingIP(removeInstanceNetworkInterfaceFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptions *GetInstanceNetworkInterfaceFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterfaceFloatingIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				getInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptions *GetInstanceNetworkInterfaceFloatingIPOptions)`, func() {
		version := "testString"
		getInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterfaceFloatingIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				getInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceNetworkInterfaceFloatingIPWithContext(ctx, getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceNetworkInterfaceFloatingIPWithContext(ctx, getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetInstanceNetworkInterfaceFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceNetworkInterfaceFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				getInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceNetworkInterfaceFloatingIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				getInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceNetworkInterfaceFloatingIPOptions model with no property values
				getInstanceNetworkInterfaceFloatingIPOptionsModelNew := new(vpcv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceNetworkInterfaceFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				getInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.GetInstanceNetworkInterfaceFloatingIPOptions)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceNetworkInterfaceFloatingIP(getInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptions *AddInstanceNetworkInterfaceFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		addInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AddInstanceNetworkInterfaceFloatingIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				addInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptions *AddInstanceNetworkInterfaceFloatingIPOptions)`, func() {
		version := "testString"
		addInstanceNetworkInterfaceFloatingIPPath := "/instances/testString/network_interfaces/testString/floating_ips/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke AddInstanceNetworkInterfaceFloatingIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				addInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.AddInstanceNetworkInterfaceFloatingIPWithContext(ctx, addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.AddInstanceNetworkInterfaceFloatingIPWithContext(ctx, addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addInstanceNetworkInterfaceFloatingIPPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke AddInstanceNetworkInterfaceFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.AddInstanceNetworkInterfaceFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				addInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke AddInstanceNetworkInterfaceFloatingIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				addInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the AddInstanceNetworkInterfaceFloatingIPOptions model with no property values
				addInstanceNetworkInterfaceFloatingIPOptionsModelNew := new(vpcv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke AddInstanceNetworkInterfaceFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				addInstanceNetworkInterfaceFloatingIPOptionsModel := new(vpcv1.AddInstanceNetworkInterfaceFloatingIPOptions)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.ID = core.StringPtr("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.AddInstanceNetworkInterfaceFloatingIP(addInstanceNetworkInterfaceFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptions *ListInstanceVolumeAttachmentsOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceVolumeAttachmentsPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceVolumeAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceVolumeAttachments with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				listInstanceVolumeAttachmentsOptionsModel := new(vpcv1.ListInstanceVolumeAttachmentsOptions)
				listInstanceVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptions *ListInstanceVolumeAttachmentsOptions)`, func() {
		version := "testString"
		listInstanceVolumeAttachmentsPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceVolumeAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volume_attachments": [{"created_at": "2019-01-01T12:00:00.000Z", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}]}`)
				}))
			})
			It(`Invoke ListInstanceVolumeAttachments successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				listInstanceVolumeAttachmentsOptionsModel := new(vpcv1.ListInstanceVolumeAttachmentsOptions)
				listInstanceVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceVolumeAttachmentsWithContext(ctx, listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceVolumeAttachmentsWithContext(ctx, listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceVolumeAttachmentsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"volume_attachments": [{"created_at": "2019-01-01T12:00:00.000Z", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}]}`)
				}))
			})
			It(`Invoke ListInstanceVolumeAttachments successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceVolumeAttachments(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				listInstanceVolumeAttachmentsOptionsModel := new(vpcv1.ListInstanceVolumeAttachmentsOptions)
				listInstanceVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceVolumeAttachments with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				listInstanceVolumeAttachmentsOptionsModel := new(vpcv1.ListInstanceVolumeAttachmentsOptions)
				listInstanceVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceVolumeAttachmentsOptions model with no property values
				listInstanceVolumeAttachmentsOptionsModelNew := new(vpcv1.ListInstanceVolumeAttachmentsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceVolumeAttachments successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				listInstanceVolumeAttachmentsOptionsModel := new(vpcv1.ListInstanceVolumeAttachmentsOptions)
				listInstanceVolumeAttachmentsOptionsModel.InstanceID = core.StringPtr("testString")
				listInstanceVolumeAttachmentsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceVolumeAttachments(listInstanceVolumeAttachmentsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptions *CreateInstanceVolumeAttachmentOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceVolumeAttachment with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				createInstanceVolumeAttachmentOptionsModel := new(vpcv1.CreateInstanceVolumeAttachmentOptions)
				createInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptions *CreateInstanceVolumeAttachmentOptions)`, func() {
		version := "testString"
		createInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}`)
				}))
			})
			It(`Invoke CreateInstanceVolumeAttachment successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				createInstanceVolumeAttachmentOptionsModel := new(vpcv1.CreateInstanceVolumeAttachmentOptions)
				createInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceVolumeAttachmentWithContext(ctx, createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceVolumeAttachmentWithContext(ctx, createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}`)
				}))
			})
			It(`Invoke CreateInstanceVolumeAttachment successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstanceVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				createInstanceVolumeAttachmentOptionsModel := new(vpcv1.CreateInstanceVolumeAttachmentOptions)
				createInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstanceVolumeAttachment with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				createInstanceVolumeAttachmentOptionsModel := new(vpcv1.CreateInstanceVolumeAttachmentOptions)
				createInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceVolumeAttachmentOptions model with no property values
				createInstanceVolumeAttachmentOptionsModelNew := new(vpcv1.CreateInstanceVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateInstanceVolumeAttachment successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				createInstanceVolumeAttachmentOptionsModel := new(vpcv1.CreateInstanceVolumeAttachmentOptions)
				createInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				createInstanceVolumeAttachmentOptionsModel.Volume = volumeIdentityModel
				createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				createInstanceVolumeAttachmentOptionsModel.Name = core.StringPtr("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstanceVolumeAttachment(createInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptions *DeleteInstanceVolumeAttachmentOptions)`, func() {
		version := "testString"
		deleteInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceVolumeAttachment successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceVolumeAttachmentOptions model
				deleteInstanceVolumeAttachmentOptionsModel := new(vpcv1.DeleteInstanceVolumeAttachmentOptions)
				deleteInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				deleteInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceVolumeAttachment with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceVolumeAttachmentOptions model
				deleteInstanceVolumeAttachmentOptionsModel := new(vpcv1.DeleteInstanceVolumeAttachmentOptions)
				deleteInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				deleteInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceVolumeAttachmentOptions model with no property values
				deleteInstanceVolumeAttachmentOptionsModelNew := new(vpcv1.DeleteInstanceVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceVolumeAttachment(deleteInstanceVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptions *GetInstanceVolumeAttachmentOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceVolumeAttachment with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				getInstanceVolumeAttachmentOptionsModel := new(vpcv1.GetInstanceVolumeAttachmentOptions)
				getInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptions *GetInstanceVolumeAttachmentOptions)`, func() {
		version := "testString"
		getInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}`)
				}))
			})
			It(`Invoke GetInstanceVolumeAttachment successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				getInstanceVolumeAttachmentOptionsModel := new(vpcv1.GetInstanceVolumeAttachmentOptions)
				getInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceVolumeAttachmentWithContext(ctx, getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceVolumeAttachmentWithContext(ctx, getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}`)
				}))
			})
			It(`Invoke GetInstanceVolumeAttachment successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				getInstanceVolumeAttachmentOptionsModel := new(vpcv1.GetInstanceVolumeAttachmentOptions)
				getInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceVolumeAttachment with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				getInstanceVolumeAttachmentOptionsModel := new(vpcv1.GetInstanceVolumeAttachmentOptions)
				getInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceVolumeAttachmentOptions model with no property values
				getInstanceVolumeAttachmentOptionsModelNew := new(vpcv1.GetInstanceVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceVolumeAttachment successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				getInstanceVolumeAttachmentOptionsModel := new(vpcv1.GetInstanceVolumeAttachmentOptions)
				getInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				getInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceVolumeAttachment(getInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptions *UpdateInstanceVolumeAttachmentOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceVolumeAttachment with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumeAttachmentPatch model
				volumeAttachmentPatchModel := new(vpcv1.VolumeAttachmentPatch)
				volumeAttachmentPatchModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPatchModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPatchModelAsPatch, asPatchErr := volumeAttachmentPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				updateInstanceVolumeAttachmentOptionsModel := new(vpcv1.UpdateInstanceVolumeAttachmentOptions)
				updateInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.VolumeAttachmentPatch = volumeAttachmentPatchModelAsPatch
				updateInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptions *UpdateInstanceVolumeAttachmentOptions)`, func() {
		version := "testString"
		updateInstanceVolumeAttachmentPath := "/instances/testString/volume_attachments/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}`)
				}))
			})
			It(`Invoke UpdateInstanceVolumeAttachment successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VolumeAttachmentPatch model
				volumeAttachmentPatchModel := new(vpcv1.VolumeAttachmentPatch)
				volumeAttachmentPatchModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPatchModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPatchModelAsPatch, asPatchErr := volumeAttachmentPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				updateInstanceVolumeAttachmentOptionsModel := new(vpcv1.UpdateInstanceVolumeAttachmentOptions)
				updateInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.VolumeAttachmentPatch = volumeAttachmentPatchModelAsPatch
				updateInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceVolumeAttachmentWithContext(ctx, updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceVolumeAttachmentWithContext(ctx, updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceVolumeAttachmentPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_volume_on_instance_delete": true, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "name": "my-volume-attachment", "status": "attached", "type": "boot", "volume": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "name": "my-volume"}}`)
				}))
			})
			It(`Invoke UpdateInstanceVolumeAttachment successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstanceVolumeAttachment(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VolumeAttachmentPatch model
				volumeAttachmentPatchModel := new(vpcv1.VolumeAttachmentPatch)
				volumeAttachmentPatchModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPatchModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPatchModelAsPatch, asPatchErr := volumeAttachmentPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				updateInstanceVolumeAttachmentOptionsModel := new(vpcv1.UpdateInstanceVolumeAttachmentOptions)
				updateInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.VolumeAttachmentPatch = volumeAttachmentPatchModelAsPatch
				updateInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstanceVolumeAttachment with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumeAttachmentPatch model
				volumeAttachmentPatchModel := new(vpcv1.VolumeAttachmentPatch)
				volumeAttachmentPatchModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPatchModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPatchModelAsPatch, asPatchErr := volumeAttachmentPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				updateInstanceVolumeAttachmentOptionsModel := new(vpcv1.UpdateInstanceVolumeAttachmentOptions)
				updateInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.VolumeAttachmentPatch = volumeAttachmentPatchModelAsPatch
				updateInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceVolumeAttachmentOptions model with no property values
				updateInstanceVolumeAttachmentOptionsModelNew := new(vpcv1.UpdateInstanceVolumeAttachmentOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstanceVolumeAttachment successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumeAttachmentPatch model
				volumeAttachmentPatchModel := new(vpcv1.VolumeAttachmentPatch)
				volumeAttachmentPatchModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPatchModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPatchModelAsPatch, asPatchErr := volumeAttachmentPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				updateInstanceVolumeAttachmentOptionsModel := new(vpcv1.UpdateInstanceVolumeAttachmentOptions)
				updateInstanceVolumeAttachmentOptionsModel.InstanceID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.ID = core.StringPtr("testString")
				updateInstanceVolumeAttachmentOptionsModel.VolumeAttachmentPatch = volumeAttachmentPatchModelAsPatch
				updateInstanceVolumeAttachmentOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstanceVolumeAttachment(updateInstanceVolumeAttachmentOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroups(listInstanceGroupsOptions *ListInstanceGroupsOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceGroupsPath := "/instance_groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceGroups with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := new(vpcv1.ListInstanceGroupsOptions)
				listInstanceGroupsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceGroups(listInstanceGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceGroups(listInstanceGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroups(listInstanceGroupsOptions *ListInstanceGroupsOptions)`, func() {
		version := "testString"
		listInstanceGroupsPath := "/instance_groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?limit=20"}, "instance_groups": [{"application_port": 22, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "load_balancer_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "managers": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager"}], "membership_count": 10, "name": "my-instance-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "updated_at": "2019-01-01T12:00:00.000Z", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroups successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := new(vpcv1.ListInstanceGroupsOptions)
				listInstanceGroupsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceGroupsWithContext(ctx, listInstanceGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceGroups(listInstanceGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceGroupsWithContext(ctx, listInstanceGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?limit=20"}, "instance_groups": [{"application_port": 22, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "load_balancer_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "managers": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager"}], "membership_count": 10, "name": "my-instance-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "updated_at": "2019-01-01T12:00:00.000Z", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroups successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceGroups(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := new(vpcv1.ListInstanceGroupsOptions)
				listInstanceGroupsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceGroups(listInstanceGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceGroups with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := new(vpcv1.ListInstanceGroupsOptions)
				listInstanceGroupsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceGroups(listInstanceGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceGroups successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := new(vpcv1.ListInstanceGroupsOptions)
				listInstanceGroupsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceGroups(listInstanceGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroup(createInstanceGroupOptions *CreateInstanceGroupOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceGroupPath := "/instance_groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateInstanceGroupOptions model
				createInstanceGroupOptionsModel := new(vpcv1.CreateInstanceGroupOptions)
				createInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				createInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createInstanceGroupOptionsModel.ApplicationPort = core.Int64Ptr(int64(22))
				createInstanceGroupOptionsModel.LoadBalancer = loadBalancerIdentityModel
				createInstanceGroupOptionsModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				createInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				createInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				createInstanceGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstanceGroup(createInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstanceGroup(createInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroup(createInstanceGroupOptions *CreateInstanceGroupOptions)`, func() {
		version := "testString"
		createInstanceGroupPath := "/instance_groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"application_port": 22, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "load_balancer_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "managers": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager"}], "membership_count": 10, "name": "my-instance-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "updated_at": "2019-01-01T12:00:00.000Z", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateInstanceGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateInstanceGroupOptions model
				createInstanceGroupOptionsModel := new(vpcv1.CreateInstanceGroupOptions)
				createInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				createInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createInstanceGroupOptionsModel.ApplicationPort = core.Int64Ptr(int64(22))
				createInstanceGroupOptionsModel.LoadBalancer = loadBalancerIdentityModel
				createInstanceGroupOptionsModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				createInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				createInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				createInstanceGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceGroupWithContext(ctx, createInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstanceGroup(createInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceGroupWithContext(ctx, createInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"application_port": 22, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "load_balancer_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "managers": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager"}], "membership_count": 10, "name": "my-instance-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "updated_at": "2019-01-01T12:00:00.000Z", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateInstanceGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstanceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateInstanceGroupOptions model
				createInstanceGroupOptionsModel := new(vpcv1.CreateInstanceGroupOptions)
				createInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				createInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createInstanceGroupOptionsModel.ApplicationPort = core.Int64Ptr(int64(22))
				createInstanceGroupOptionsModel.LoadBalancer = loadBalancerIdentityModel
				createInstanceGroupOptionsModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				createInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				createInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				createInstanceGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstanceGroup(createInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstanceGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateInstanceGroupOptions model
				createInstanceGroupOptionsModel := new(vpcv1.CreateInstanceGroupOptions)
				createInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				createInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createInstanceGroupOptionsModel.ApplicationPort = core.Int64Ptr(int64(22))
				createInstanceGroupOptionsModel.LoadBalancer = loadBalancerIdentityModel
				createInstanceGroupOptionsModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				createInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				createInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				createInstanceGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstanceGroup(createInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceGroupOptions model with no property values
				createInstanceGroupOptionsModelNew := new(vpcv1.CreateInstanceGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstanceGroup(createInstanceGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateInstanceGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateInstanceGroupOptions model
				createInstanceGroupOptionsModel := new(vpcv1.CreateInstanceGroupOptions)
				createInstanceGroupOptionsModel.InstanceTemplate = instanceTemplateIdentityModel
				createInstanceGroupOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createInstanceGroupOptionsModel.ApplicationPort = core.Int64Ptr(int64(22))
				createInstanceGroupOptionsModel.LoadBalancer = loadBalancerIdentityModel
				createInstanceGroupOptionsModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				createInstanceGroupOptionsModel.MembershipCount = core.Int64Ptr(int64(10))
				createInstanceGroupOptionsModel.Name = core.StringPtr("my-instance-group")
				createInstanceGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstanceGroup(createInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceGroup(deleteInstanceGroupOptions *DeleteInstanceGroupOptions)`, func() {
		version := "testString"
		deleteInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceGroupPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupOptions model
				deleteInstanceGroupOptionsModel := new(vpcv1.DeleteInstanceGroupOptions)
				deleteInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceGroup(deleteInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupOptions model
				deleteInstanceGroupOptionsModel := new(vpcv1.DeleteInstanceGroupOptions)
				deleteInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceGroup(deleteInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupOptions model with no property values
				deleteInstanceGroupOptionsModelNew := new(vpcv1.DeleteInstanceGroupOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceGroup(deleteInstanceGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroup(getInstanceGroupOptions *GetInstanceGroupOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupOptions model
				getInstanceGroupOptionsModel := new(vpcv1.GetInstanceGroupOptions)
				getInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceGroup(getInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceGroup(getInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroup(getInstanceGroupOptions *GetInstanceGroupOptions)`, func() {
		version := "testString"
		getInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"application_port": 22, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "load_balancer_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "managers": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager"}], "membership_count": 10, "name": "my-instance-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "updated_at": "2019-01-01T12:00:00.000Z", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetInstanceGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceGroupOptions model
				getInstanceGroupOptionsModel := new(vpcv1.GetInstanceGroupOptions)
				getInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceGroupWithContext(ctx, getInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceGroup(getInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceGroupWithContext(ctx, getInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"application_port": 22, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "load_balancer_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "managers": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager"}], "membership_count": 10, "name": "my-instance-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "updated_at": "2019-01-01T12:00:00.000Z", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetInstanceGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceGroupOptions model
				getInstanceGroupOptionsModel := new(vpcv1.GetInstanceGroupOptions)
				getInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceGroup(getInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupOptions model
				getInstanceGroupOptionsModel := new(vpcv1.GetInstanceGroupOptions)
				getInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceGroup(getInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceGroupOptions model with no property values
				getInstanceGroupOptionsModelNew := new(vpcv1.GetInstanceGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceGroup(getInstanceGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupOptions model
				getInstanceGroupOptionsModel := new(vpcv1.GetInstanceGroupOptions)
				getInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceGroup(getInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroup(updateInstanceGroupOptions *UpdateInstanceGroupOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the InstanceGroupPatch model
				instanceGroupPatchModel := new(vpcv1.InstanceGroupPatch)
				instanceGroupPatchModel.ApplicationPort = core.Int64Ptr(int64(22))
				instanceGroupPatchModel.InstanceTemplate = instanceTemplateIdentityModel
				instanceGroupPatchModel.LoadBalancer = loadBalancerIdentityModel
				instanceGroupPatchModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				instanceGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))
				instanceGroupPatchModel.Name = core.StringPtr("my-instance-group")
				instanceGroupPatchModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				instanceGroupPatchModelAsPatch, asPatchErr := instanceGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupOptions model
				updateInstanceGroupOptionsModel := new(vpcv1.UpdateInstanceGroupOptions)
				updateInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupOptionsModel.InstanceGroupPatch = instanceGroupPatchModelAsPatch
				updateInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstanceGroup(updateInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstanceGroup(updateInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroup(updateInstanceGroupOptions *UpdateInstanceGroupOptions)`, func() {
		version := "testString"
		updateInstanceGroupPath := "/instance_groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"application_port": 22, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "load_balancer_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "managers": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager"}], "membership_count": 10, "name": "my-instance-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "updated_at": "2019-01-01T12:00:00.000Z", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateInstanceGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the InstanceGroupPatch model
				instanceGroupPatchModel := new(vpcv1.InstanceGroupPatch)
				instanceGroupPatchModel.ApplicationPort = core.Int64Ptr(int64(22))
				instanceGroupPatchModel.InstanceTemplate = instanceTemplateIdentityModel
				instanceGroupPatchModel.LoadBalancer = loadBalancerIdentityModel
				instanceGroupPatchModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				instanceGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))
				instanceGroupPatchModel.Name = core.StringPtr("my-instance-group")
				instanceGroupPatchModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				instanceGroupPatchModelAsPatch, asPatchErr := instanceGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupOptions model
				updateInstanceGroupOptionsModel := new(vpcv1.UpdateInstanceGroupOptions)
				updateInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupOptionsModel.InstanceGroupPatch = instanceGroupPatchModelAsPatch
				updateInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceGroupWithContext(ctx, updateInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstanceGroup(updateInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceGroupWithContext(ctx, updateInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"application_port": 22, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "load_balancer_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "managers": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager"}], "membership_count": 10, "name": "my-instance-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "deleting", "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "updated_at": "2019-01-01T12:00:00.000Z", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateInstanceGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstanceGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the InstanceGroupPatch model
				instanceGroupPatchModel := new(vpcv1.InstanceGroupPatch)
				instanceGroupPatchModel.ApplicationPort = core.Int64Ptr(int64(22))
				instanceGroupPatchModel.InstanceTemplate = instanceTemplateIdentityModel
				instanceGroupPatchModel.LoadBalancer = loadBalancerIdentityModel
				instanceGroupPatchModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				instanceGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))
				instanceGroupPatchModel.Name = core.StringPtr("my-instance-group")
				instanceGroupPatchModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				instanceGroupPatchModelAsPatch, asPatchErr := instanceGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupOptions model
				updateInstanceGroupOptionsModel := new(vpcv1.UpdateInstanceGroupOptions)
				updateInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupOptionsModel.InstanceGroupPatch = instanceGroupPatchModelAsPatch
				updateInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstanceGroup(updateInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstanceGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the InstanceGroupPatch model
				instanceGroupPatchModel := new(vpcv1.InstanceGroupPatch)
				instanceGroupPatchModel.ApplicationPort = core.Int64Ptr(int64(22))
				instanceGroupPatchModel.InstanceTemplate = instanceTemplateIdentityModel
				instanceGroupPatchModel.LoadBalancer = loadBalancerIdentityModel
				instanceGroupPatchModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				instanceGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))
				instanceGroupPatchModel.Name = core.StringPtr("my-instance-group")
				instanceGroupPatchModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				instanceGroupPatchModelAsPatch, asPatchErr := instanceGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupOptions model
				updateInstanceGroupOptionsModel := new(vpcv1.UpdateInstanceGroupOptions)
				updateInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupOptionsModel.InstanceGroupPatch = instanceGroupPatchModelAsPatch
				updateInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstanceGroup(updateInstanceGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceGroupOptions model with no property values
				updateInstanceGroupOptionsModelNew := new(vpcv1.UpdateInstanceGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstanceGroup(updateInstanceGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstanceGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the InstanceGroupPatch model
				instanceGroupPatchModel := new(vpcv1.InstanceGroupPatch)
				instanceGroupPatchModel.ApplicationPort = core.Int64Ptr(int64(22))
				instanceGroupPatchModel.InstanceTemplate = instanceTemplateIdentityModel
				instanceGroupPatchModel.LoadBalancer = loadBalancerIdentityModel
				instanceGroupPatchModel.LoadBalancerPool = loadBalancerPoolIdentityModel
				instanceGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))
				instanceGroupPatchModel.Name = core.StringPtr("my-instance-group")
				instanceGroupPatchModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				instanceGroupPatchModelAsPatch, asPatchErr := instanceGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupOptions model
				updateInstanceGroupOptionsModel := new(vpcv1.UpdateInstanceGroupOptions)
				updateInstanceGroupOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupOptionsModel.InstanceGroupPatch = instanceGroupPatchModelAsPatch
				updateInstanceGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstanceGroup(updateInstanceGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceGroupLoadBalancer(deleteInstanceGroupLoadBalancerOptions *DeleteInstanceGroupLoadBalancerOptions)`, func() {
		version := "testString"
		deleteInstanceGroupLoadBalancerPath := "/instance_groups/testString/load_balancer"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceGroupLoadBalancerPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroupLoadBalancer successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceGroupLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupLoadBalancerOptions model
				deleteInstanceGroupLoadBalancerOptionsModel := new(vpcv1.DeleteInstanceGroupLoadBalancerOptions)
				deleteInstanceGroupLoadBalancerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceGroupLoadBalancer(deleteInstanceGroupLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroupLoadBalancer with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupLoadBalancerOptions model
				deleteInstanceGroupLoadBalancerOptionsModel := new(vpcv1.DeleteInstanceGroupLoadBalancerOptions)
				deleteInstanceGroupLoadBalancerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceGroupLoadBalancer(deleteInstanceGroupLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupLoadBalancerOptions model with no property values
				deleteInstanceGroupLoadBalancerOptionsModelNew := new(vpcv1.DeleteInstanceGroupLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceGroupLoadBalancer(deleteInstanceGroupLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupManagers(listInstanceGroupManagersOptions *ListInstanceGroupManagersOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceGroupManagersPath := "/instance_groups/testString/managers"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupManagersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceGroupManagers with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagersOptions model
				listInstanceGroupManagersOptionsModel := new(vpcv1.ListInstanceGroupManagersOptions)
				listInstanceGroupManagersOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupManagers(listInstanceGroupManagersOptions *ListInstanceGroupManagersOptions)`, func() {
		version := "testString"
		listInstanceGroupManagersPath := "/instance_groups/testString/managers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupManagersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?limit=20"}, "limit": 20, "managers": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "management_enabled": false, "name": "my-instance-group-manager", "updated_at": "2019-01-01T12:00:00.000Z", "aggregation_window": 120, "cooldown": 210, "manager_type": "autoscale", "max_membership_count": 10, "min_membership_count": 10, "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroupManagers successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceGroupManagersOptions model
				listInstanceGroupManagersOptionsModel := new(vpcv1.ListInstanceGroupManagersOptions)
				listInstanceGroupManagersOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceGroupManagersWithContext(ctx, listInstanceGroupManagersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceGroupManagersWithContext(ctx, listInstanceGroupManagersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupManagersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?limit=20"}, "limit": 20, "managers": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "management_enabled": false, "name": "my-instance-group-manager", "updated_at": "2019-01-01T12:00:00.000Z", "aggregation_window": 120, "cooldown": 210, "manager_type": "autoscale", "max_membership_count": 10, "min_membership_count": 10, "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroupManagers successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceGroupManagers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceGroupManagersOptions model
				listInstanceGroupManagersOptionsModel := new(vpcv1.ListInstanceGroupManagersOptions)
				listInstanceGroupManagersOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceGroupManagers with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagersOptions model
				listInstanceGroupManagersOptionsModel := new(vpcv1.ListInstanceGroupManagersOptions)
				listInstanceGroupManagersOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceGroupManagersOptions model with no property values
				listInstanceGroupManagersOptionsModelNew := new(vpcv1.ListInstanceGroupManagersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceGroupManagers successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagersOptions model
				listInstanceGroupManagersOptionsModel := new(vpcv1.ListInstanceGroupManagersOptions)
				listInstanceGroupManagersOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagersOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceGroupManagers(listInstanceGroupManagersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroupManager(createInstanceGroupManagerOptions *CreateInstanceGroupManagerOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceGroupManagerPath := "/instance_groups/testString/managers"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceGroupManager with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				instanceGroupManagerPrototypeModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPrototypeModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the CreateInstanceGroupManagerOptions model
				createInstanceGroupManagerOptionsModel := new(vpcv1.CreateInstanceGroupManagerOptions)
				createInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype = instanceGroupManagerPrototypeModel
				createInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroupManager(createInstanceGroupManagerOptions *CreateInstanceGroupManagerOptions)`, func() {
		version := "testString"
		createInstanceGroupManagerPath := "/instance_groups/testString/managers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "management_enabled": false, "name": "my-instance-group-manager", "updated_at": "2019-01-01T12:00:00.000Z", "aggregation_window": 120, "cooldown": 210, "manager_type": "autoscale", "max_membership_count": 10, "min_membership_count": 10, "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}`)
				}))
			})
			It(`Invoke CreateInstanceGroupManager successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				instanceGroupManagerPrototypeModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPrototypeModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the CreateInstanceGroupManagerOptions model
				createInstanceGroupManagerOptionsModel := new(vpcv1.CreateInstanceGroupManagerOptions)
				createInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype = instanceGroupManagerPrototypeModel
				createInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceGroupManagerWithContext(ctx, createInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceGroupManagerWithContext(ctx, createInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "management_enabled": false, "name": "my-instance-group-manager", "updated_at": "2019-01-01T12:00:00.000Z", "aggregation_window": 120, "cooldown": 210, "manager_type": "autoscale", "max_membership_count": 10, "min_membership_count": 10, "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}`)
				}))
			})
			It(`Invoke CreateInstanceGroupManager successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstanceGroupManager(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				instanceGroupManagerPrototypeModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPrototypeModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the CreateInstanceGroupManagerOptions model
				createInstanceGroupManagerOptionsModel := new(vpcv1.CreateInstanceGroupManagerOptions)
				createInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype = instanceGroupManagerPrototypeModel
				createInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstanceGroupManager with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				instanceGroupManagerPrototypeModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPrototypeModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the CreateInstanceGroupManagerOptions model
				createInstanceGroupManagerOptionsModel := new(vpcv1.CreateInstanceGroupManagerOptions)
				createInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype = instanceGroupManagerPrototypeModel
				createInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceGroupManagerOptions model with no property values
				createInstanceGroupManagerOptionsModelNew := new(vpcv1.CreateInstanceGroupManagerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateInstanceGroupManager successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				instanceGroupManagerPrototypeModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPrototypeModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the CreateInstanceGroupManagerOptions model
				createInstanceGroupManagerOptionsModel := new(vpcv1.CreateInstanceGroupManagerOptions)
				createInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype = instanceGroupManagerPrototypeModel
				createInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstanceGroupManager(createInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceGroupManager(deleteInstanceGroupManagerOptions *DeleteInstanceGroupManagerOptions)`, func() {
		version := "testString"
		deleteInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroupManager successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceGroupManager(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerOptions model
				deleteInstanceGroupManagerOptionsModel := new(vpcv1.DeleteInstanceGroupManagerOptions)
				deleteInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceGroupManager(deleteInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroupManager with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerOptions model
				deleteInstanceGroupManagerOptionsModel := new(vpcv1.DeleteInstanceGroupManagerOptions)
				deleteInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceGroupManager(deleteInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupManagerOptions model with no property values
				deleteInstanceGroupManagerOptionsModelNew := new(vpcv1.DeleteInstanceGroupManagerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceGroupManager(deleteInstanceGroupManagerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupManager(getInstanceGroupManagerOptions *GetInstanceGroupManagerOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceGroupManager with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerOptions model
				getInstanceGroupManagerOptionsModel := new(vpcv1.GetInstanceGroupManagerOptions)
				getInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupManager(getInstanceGroupManagerOptions *GetInstanceGroupManagerOptions)`, func() {
		version := "testString"
		getInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "management_enabled": false, "name": "my-instance-group-manager", "updated_at": "2019-01-01T12:00:00.000Z", "aggregation_window": 120, "cooldown": 210, "manager_type": "autoscale", "max_membership_count": 10, "min_membership_count": 10, "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}`)
				}))
			})
			It(`Invoke GetInstanceGroupManager successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceGroupManagerOptions model
				getInstanceGroupManagerOptionsModel := new(vpcv1.GetInstanceGroupManagerOptions)
				getInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceGroupManagerWithContext(ctx, getInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceGroupManagerWithContext(ctx, getInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "management_enabled": false, "name": "my-instance-group-manager", "updated_at": "2019-01-01T12:00:00.000Z", "aggregation_window": 120, "cooldown": 210, "manager_type": "autoscale", "max_membership_count": 10, "min_membership_count": 10, "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}`)
				}))
			})
			It(`Invoke GetInstanceGroupManager successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceGroupManager(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceGroupManagerOptions model
				getInstanceGroupManagerOptionsModel := new(vpcv1.GetInstanceGroupManagerOptions)
				getInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceGroupManager with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerOptions model
				getInstanceGroupManagerOptionsModel := new(vpcv1.GetInstanceGroupManagerOptions)
				getInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceGroupManagerOptions model with no property values
				getInstanceGroupManagerOptionsModelNew := new(vpcv1.GetInstanceGroupManagerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceGroupManager successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerOptions model
				getInstanceGroupManagerOptionsModel := new(vpcv1.GetInstanceGroupManagerOptions)
				getInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceGroupManager(getInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupManager(updateInstanceGroupManagerOptions *UpdateInstanceGroupManagerOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManager with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPatch model
				instanceGroupManagerPatchModel := new(vpcv1.InstanceGroupManagerPatch)
				instanceGroupManagerPatchModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPatchModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPatchModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPatchModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.MinMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPatchModelAsPatch, asPatchErr := instanceGroupManagerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				updateInstanceGroupManagerOptionsModel := new(vpcv1.UpdateInstanceGroupManagerOptions)
				updateInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch = instanceGroupManagerPatchModelAsPatch
				updateInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupManager(updateInstanceGroupManagerOptions *UpdateInstanceGroupManagerOptions)`, func() {
		version := "testString"
		updateInstanceGroupManagerPath := "/instance_groups/testString/managers/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "management_enabled": false, "name": "my-instance-group-manager", "updated_at": "2019-01-01T12:00:00.000Z", "aggregation_window": 120, "cooldown": 210, "manager_type": "autoscale", "max_membership_count": 10, "min_membership_count": 10, "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManager successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceGroupManagerPatch model
				instanceGroupManagerPatchModel := new(vpcv1.InstanceGroupManagerPatch)
				instanceGroupManagerPatchModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPatchModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPatchModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPatchModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.MinMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPatchModelAsPatch, asPatchErr := instanceGroupManagerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				updateInstanceGroupManagerOptionsModel := new(vpcv1.UpdateInstanceGroupManagerOptions)
				updateInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch = instanceGroupManagerPatchModelAsPatch
				updateInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceGroupManagerWithContext(ctx, updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceGroupManagerWithContext(ctx, updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupManagerPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "management_enabled": false, "name": "my-instance-group-manager", "updated_at": "2019-01-01T12:00:00.000Z", "aggregation_window": 120, "cooldown": 210, "manager_type": "autoscale", "max_membership_count": 10, "min_membership_count": 10, "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy"}]}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManager successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstanceGroupManager(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerPatch model
				instanceGroupManagerPatchModel := new(vpcv1.InstanceGroupManagerPatch)
				instanceGroupManagerPatchModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPatchModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPatchModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPatchModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.MinMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPatchModelAsPatch, asPatchErr := instanceGroupManagerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				updateInstanceGroupManagerOptionsModel := new(vpcv1.UpdateInstanceGroupManagerOptions)
				updateInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch = instanceGroupManagerPatchModelAsPatch
				updateInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstanceGroupManager with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPatch model
				instanceGroupManagerPatchModel := new(vpcv1.InstanceGroupManagerPatch)
				instanceGroupManagerPatchModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPatchModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPatchModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPatchModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.MinMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPatchModelAsPatch, asPatchErr := instanceGroupManagerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				updateInstanceGroupManagerOptionsModel := new(vpcv1.UpdateInstanceGroupManagerOptions)
				updateInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch = instanceGroupManagerPatchModelAsPatch
				updateInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceGroupManagerOptions model with no property values
				updateInstanceGroupManagerOptionsModelNew := new(vpcv1.UpdateInstanceGroupManagerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstanceGroupManager successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPatch model
				instanceGroupManagerPatchModel := new(vpcv1.InstanceGroupManagerPatch)
				instanceGroupManagerPatchModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPatchModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPatchModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPatchModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.MinMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPatchModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPatchModelAsPatch, asPatchErr := instanceGroupManagerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				updateInstanceGroupManagerOptionsModel := new(vpcv1.UpdateInstanceGroupManagerOptions)
				updateInstanceGroupManagerOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch = instanceGroupManagerPatchModelAsPatch
				updateInstanceGroupManagerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstanceGroupManager(updateInstanceGroupManagerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupManagerActions(listInstanceGroupManagerActionsOptions *ListInstanceGroupManagerActionsOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceGroupManagerActionsPath := "/instance_groups/testString/managers/testString/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupManagerActionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceGroupManagerActions with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagerActionsOptions model
				listInstanceGroupManagerActionsOptionsModel := new(vpcv1.ListInstanceGroupManagerActionsOptions)
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceGroupManagerActions(listInstanceGroupManagerActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceGroupManagerActions(listInstanceGroupManagerActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupManagerActions(listInstanceGroupManagerActionsOptions *ListInstanceGroupManagerActionsOptions)`, func() {
		version := "testString"
		listInstanceGroupManagerActionsPath := "/instance_groups/testString/managers/testString/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupManagerActionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actions": [{"auto_delete": true, "auto_delete_timeout": 24, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-action", "resource_type": "instance_group_manager_action", "status": "active", "updated_at": "2019-01-01T12:00:00.000Z", "action_type": "scheduled", "cron_spec": "*/5 1,2,3 * * *", "last_applied_at": "2019-01-01T12:00:00.000Z", "next_run_at": "2019-01-01T12:00:00.000Z", "group": {"membership_count": 10}}], "first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroupManagerActions successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceGroupManagerActionsOptions model
				listInstanceGroupManagerActionsOptionsModel := new(vpcv1.ListInstanceGroupManagerActionsOptions)
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceGroupManagerActionsWithContext(ctx, listInstanceGroupManagerActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceGroupManagerActions(listInstanceGroupManagerActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceGroupManagerActionsWithContext(ctx, listInstanceGroupManagerActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupManagerActionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"actions": [{"auto_delete": true, "auto_delete_timeout": 24, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-action", "resource_type": "instance_group_manager_action", "status": "active", "updated_at": "2019-01-01T12:00:00.000Z", "action_type": "scheduled", "cron_spec": "*/5 1,2,3 * * *", "last_applied_at": "2019-01-01T12:00:00.000Z", "next_run_at": "2019-01-01T12:00:00.000Z", "group": {"membership_count": 10}}], "first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroupManagerActions successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceGroupManagerActions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceGroupManagerActionsOptions model
				listInstanceGroupManagerActionsOptionsModel := new(vpcv1.ListInstanceGroupManagerActionsOptions)
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceGroupManagerActions(listInstanceGroupManagerActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceGroupManagerActions with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagerActionsOptions model
				listInstanceGroupManagerActionsOptionsModel := new(vpcv1.ListInstanceGroupManagerActionsOptions)
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceGroupManagerActions(listInstanceGroupManagerActionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceGroupManagerActionsOptions model with no property values
				listInstanceGroupManagerActionsOptionsModelNew := new(vpcv1.ListInstanceGroupManagerActionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListInstanceGroupManagerActions(listInstanceGroupManagerActionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceGroupManagerActions successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagerActionsOptions model
				listInstanceGroupManagerActionsOptionsModel := new(vpcv1.ListInstanceGroupManagerActionsOptions)
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerActionsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerActionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceGroupManagerActions(listInstanceGroupManagerActionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroupManagerAction(createInstanceGroupManagerActionOptions *CreateInstanceGroupManagerActionOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceGroupManagerActionPath := "/instance_groups/testString/managers/testString/actions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerAction with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPrototype model
				instanceGroupManagerScheduledActionGroupPrototypeModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPrototype)
				instanceGroupManagerScheduledActionGroupPrototypeModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup model
				instanceGroupManagerActionPrototypeModel := new(vpcv1.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup)
				instanceGroupManagerActionPrototypeModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPrototypeModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPrototypeModel.Group = instanceGroupManagerScheduledActionGroupPrototypeModel

				// Construct an instance of the CreateInstanceGroupManagerActionOptions model
				createInstanceGroupManagerActionOptionsModel := new(vpcv1.CreateInstanceGroupManagerActionOptions)
				createInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPrototype = instanceGroupManagerActionPrototypeModel
				createInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstanceGroupManagerAction(createInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstanceGroupManagerAction(createInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroupManagerAction(createInstanceGroupManagerActionOptions *CreateInstanceGroupManagerActionOptions)`, func() {
		version := "testString"
		createInstanceGroupManagerActionPath := "/instance_groups/testString/managers/testString/actions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"auto_delete": true, "auto_delete_timeout": 24, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-action", "resource_type": "instance_group_manager_action", "status": "active", "updated_at": "2019-01-01T12:00:00.000Z", "action_type": "scheduled", "cron_spec": "*/5 1,2,3 * * *", "last_applied_at": "2019-01-01T12:00:00.000Z", "next_run_at": "2019-01-01T12:00:00.000Z", "group": {"membership_count": 10}}`)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerAction successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPrototype model
				instanceGroupManagerScheduledActionGroupPrototypeModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPrototype)
				instanceGroupManagerScheduledActionGroupPrototypeModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup model
				instanceGroupManagerActionPrototypeModel := new(vpcv1.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup)
				instanceGroupManagerActionPrototypeModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPrototypeModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPrototypeModel.Group = instanceGroupManagerScheduledActionGroupPrototypeModel

				// Construct an instance of the CreateInstanceGroupManagerActionOptions model
				createInstanceGroupManagerActionOptionsModel := new(vpcv1.CreateInstanceGroupManagerActionOptions)
				createInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPrototype = instanceGroupManagerActionPrototypeModel
				createInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceGroupManagerActionWithContext(ctx, createInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstanceGroupManagerAction(createInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceGroupManagerActionWithContext(ctx, createInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"auto_delete": true, "auto_delete_timeout": 24, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-action", "resource_type": "instance_group_manager_action", "status": "active", "updated_at": "2019-01-01T12:00:00.000Z", "action_type": "scheduled", "cron_spec": "*/5 1,2,3 * * *", "last_applied_at": "2019-01-01T12:00:00.000Z", "next_run_at": "2019-01-01T12:00:00.000Z", "group": {"membership_count": 10}}`)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerAction successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstanceGroupManagerAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPrototype model
				instanceGroupManagerScheduledActionGroupPrototypeModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPrototype)
				instanceGroupManagerScheduledActionGroupPrototypeModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup model
				instanceGroupManagerActionPrototypeModel := new(vpcv1.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup)
				instanceGroupManagerActionPrototypeModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPrototypeModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPrototypeModel.Group = instanceGroupManagerScheduledActionGroupPrototypeModel

				// Construct an instance of the CreateInstanceGroupManagerActionOptions model
				createInstanceGroupManagerActionOptionsModel := new(vpcv1.CreateInstanceGroupManagerActionOptions)
				createInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPrototype = instanceGroupManagerActionPrototypeModel
				createInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstanceGroupManagerAction(createInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstanceGroupManagerAction with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPrototype model
				instanceGroupManagerScheduledActionGroupPrototypeModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPrototype)
				instanceGroupManagerScheduledActionGroupPrototypeModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup model
				instanceGroupManagerActionPrototypeModel := new(vpcv1.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup)
				instanceGroupManagerActionPrototypeModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPrototypeModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPrototypeModel.Group = instanceGroupManagerScheduledActionGroupPrototypeModel

				// Construct an instance of the CreateInstanceGroupManagerActionOptions model
				createInstanceGroupManagerActionOptionsModel := new(vpcv1.CreateInstanceGroupManagerActionOptions)
				createInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPrototype = instanceGroupManagerActionPrototypeModel
				createInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstanceGroupManagerAction(createInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceGroupManagerActionOptions model with no property values
				createInstanceGroupManagerActionOptionsModelNew := new(vpcv1.CreateInstanceGroupManagerActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstanceGroupManagerAction(createInstanceGroupManagerActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerAction successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPrototype model
				instanceGroupManagerScheduledActionGroupPrototypeModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPrototype)
				instanceGroupManagerScheduledActionGroupPrototypeModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup model
				instanceGroupManagerActionPrototypeModel := new(vpcv1.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup)
				instanceGroupManagerActionPrototypeModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPrototypeModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPrototypeModel.Group = instanceGroupManagerScheduledActionGroupPrototypeModel

				// Construct an instance of the CreateInstanceGroupManagerActionOptions model
				createInstanceGroupManagerActionOptionsModel := new(vpcv1.CreateInstanceGroupManagerActionOptions)
				createInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPrototype = instanceGroupManagerActionPrototypeModel
				createInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstanceGroupManagerAction(createInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceGroupManagerAction(deleteInstanceGroupManagerActionOptions *DeleteInstanceGroupManagerActionOptions)`, func() {
		version := "testString"
		deleteInstanceGroupManagerActionPath := "/instance_groups/testString/managers/testString/actions/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroupManagerAction successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceGroupManagerAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerActionOptions model
				deleteInstanceGroupManagerActionOptionsModel := new(vpcv1.DeleteInstanceGroupManagerActionOptions)
				deleteInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				deleteInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceGroupManagerAction(deleteInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroupManagerAction with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerActionOptions model
				deleteInstanceGroupManagerActionOptionsModel := new(vpcv1.DeleteInstanceGroupManagerActionOptions)
				deleteInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				deleteInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceGroupManagerAction(deleteInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupManagerActionOptions model with no property values
				deleteInstanceGroupManagerActionOptionsModelNew := new(vpcv1.DeleteInstanceGroupManagerActionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceGroupManagerAction(deleteInstanceGroupManagerActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupManagerAction(getInstanceGroupManagerActionOptions *GetInstanceGroupManagerActionOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceGroupManagerActionPath := "/instance_groups/testString/managers/testString/actions/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceGroupManagerAction with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerActionOptions model
				getInstanceGroupManagerActionOptionsModel := new(vpcv1.GetInstanceGroupManagerActionOptions)
				getInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceGroupManagerAction(getInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceGroupManagerAction(getInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupManagerAction(getInstanceGroupManagerActionOptions *GetInstanceGroupManagerActionOptions)`, func() {
		version := "testString"
		getInstanceGroupManagerActionPath := "/instance_groups/testString/managers/testString/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auto_delete": true, "auto_delete_timeout": 24, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-action", "resource_type": "instance_group_manager_action", "status": "active", "updated_at": "2019-01-01T12:00:00.000Z", "action_type": "scheduled", "cron_spec": "*/5 1,2,3 * * *", "last_applied_at": "2019-01-01T12:00:00.000Z", "next_run_at": "2019-01-01T12:00:00.000Z", "group": {"membership_count": 10}}`)
				}))
			})
			It(`Invoke GetInstanceGroupManagerAction successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceGroupManagerActionOptions model
				getInstanceGroupManagerActionOptionsModel := new(vpcv1.GetInstanceGroupManagerActionOptions)
				getInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceGroupManagerActionWithContext(ctx, getInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceGroupManagerAction(getInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceGroupManagerActionWithContext(ctx, getInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auto_delete": true, "auto_delete_timeout": 24, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-action", "resource_type": "instance_group_manager_action", "status": "active", "updated_at": "2019-01-01T12:00:00.000Z", "action_type": "scheduled", "cron_spec": "*/5 1,2,3 * * *", "last_applied_at": "2019-01-01T12:00:00.000Z", "next_run_at": "2019-01-01T12:00:00.000Z", "group": {"membership_count": 10}}`)
				}))
			})
			It(`Invoke GetInstanceGroupManagerAction successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceGroupManagerAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceGroupManagerActionOptions model
				getInstanceGroupManagerActionOptionsModel := new(vpcv1.GetInstanceGroupManagerActionOptions)
				getInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceGroupManagerAction(getInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceGroupManagerAction with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerActionOptions model
				getInstanceGroupManagerActionOptionsModel := new(vpcv1.GetInstanceGroupManagerActionOptions)
				getInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceGroupManagerAction(getInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceGroupManagerActionOptions model with no property values
				getInstanceGroupManagerActionOptionsModelNew := new(vpcv1.GetInstanceGroupManagerActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceGroupManagerAction(getInstanceGroupManagerActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceGroupManagerAction successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerActionOptions model
				getInstanceGroupManagerActionOptionsModel := new(vpcv1.GetInstanceGroupManagerActionOptions)
				getInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceGroupManagerAction(getInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptions *UpdateInstanceGroupManagerActionOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceGroupManagerActionPath := "/instance_groups/testString/managers/testString/actions/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerAction with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPatch model
				instanceGroupManagerScheduledActionGroupPatchModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPatch)
				instanceGroupManagerScheduledActionGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch model
				instanceGroupManagerScheduledActionByManagerPatchManagerModel := new(vpcv1.InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch)
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPatchScheduledActionPatch model
				instanceGroupManagerActionPatchModel := new(vpcv1.InstanceGroupManagerActionPatch)
				instanceGroupManagerActionPatchModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPatchModel.CronSpec = core.StringPtr("*/5 1,2,3 * * *")
				instanceGroupManagerActionPatchModel.Group = instanceGroupManagerScheduledActionGroupPatchModel
				instanceGroupManagerActionPatchModel.Manager = instanceGroupManagerScheduledActionByManagerPatchManagerModel
				instanceGroupManagerActionPatchModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPatchModelAsPatch, asPatchErr := instanceGroupManagerActionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerActionOptions model
				updateInstanceGroupManagerActionOptionsModel := new(vpcv1.UpdateInstanceGroupManagerActionOptions)
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPatch = instanceGroupManagerActionPatchModelAsPatch
				updateInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptions *UpdateInstanceGroupManagerActionOptions)`, func() {
		version := "testString"
		updateInstanceGroupManagerActionPath := "/instance_groups/testString/managers/testString/actions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auto_delete": true, "auto_delete_timeout": 24, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-action", "resource_type": "instance_group_manager_action", "status": "active", "updated_at": "2019-01-01T12:00:00.000Z", "action_type": "scheduled", "cron_spec": "*/5 1,2,3 * * *", "last_applied_at": "2019-01-01T12:00:00.000Z", "next_run_at": "2019-01-01T12:00:00.000Z", "group": {"membership_count": 10}}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerAction successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPatch model
				instanceGroupManagerScheduledActionGroupPatchModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPatch)
				instanceGroupManagerScheduledActionGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch model
				instanceGroupManagerScheduledActionByManagerPatchManagerModel := new(vpcv1.InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch)
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPatchScheduledActionPatch model
				instanceGroupManagerActionPatchModel := new(vpcv1.InstanceGroupManagerActionPatch)
				instanceGroupManagerActionPatchModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPatchModel.CronSpec = core.StringPtr("*/5 1,2,3 * * *")
				instanceGroupManagerActionPatchModel.Group = instanceGroupManagerScheduledActionGroupPatchModel
				instanceGroupManagerActionPatchModel.Manager = instanceGroupManagerScheduledActionByManagerPatchManagerModel
				instanceGroupManagerActionPatchModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPatchModelAsPatch, asPatchErr := instanceGroupManagerActionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerActionOptions model
				updateInstanceGroupManagerActionOptionsModel := new(vpcv1.UpdateInstanceGroupManagerActionOptions)
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPatch = instanceGroupManagerActionPatchModelAsPatch
				updateInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceGroupManagerActionWithContext(ctx, updateInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceGroupManagerActionWithContext(ctx, updateInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupManagerActionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"auto_delete": true, "auto_delete_timeout": 24, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/actions/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-action", "resource_type": "instance_group_manager_action", "status": "active", "updated_at": "2019-01-01T12:00:00.000Z", "action_type": "scheduled", "cron_spec": "*/5 1,2,3 * * *", "last_applied_at": "2019-01-01T12:00:00.000Z", "next_run_at": "2019-01-01T12:00:00.000Z", "group": {"membership_count": 10}}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerAction successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerAction(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPatch model
				instanceGroupManagerScheduledActionGroupPatchModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPatch)
				instanceGroupManagerScheduledActionGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch model
				instanceGroupManagerScheduledActionByManagerPatchManagerModel := new(vpcv1.InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch)
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPatchScheduledActionPatch model
				instanceGroupManagerActionPatchModel := new(vpcv1.InstanceGroupManagerActionPatch)
				instanceGroupManagerActionPatchModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPatchModel.CronSpec = core.StringPtr("*/5 1,2,3 * * *")
				instanceGroupManagerActionPatchModel.Group = instanceGroupManagerScheduledActionGroupPatchModel
				instanceGroupManagerActionPatchModel.Manager = instanceGroupManagerScheduledActionByManagerPatchManagerModel
				instanceGroupManagerActionPatchModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPatchModelAsPatch, asPatchErr := instanceGroupManagerActionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerActionOptions model
				updateInstanceGroupManagerActionOptionsModel := new(vpcv1.UpdateInstanceGroupManagerActionOptions)
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPatch = instanceGroupManagerActionPatchModelAsPatch
				updateInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstanceGroupManagerAction with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPatch model
				instanceGroupManagerScheduledActionGroupPatchModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPatch)
				instanceGroupManagerScheduledActionGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch model
				instanceGroupManagerScheduledActionByManagerPatchManagerModel := new(vpcv1.InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch)
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPatchScheduledActionPatch model
				instanceGroupManagerActionPatchModel := new(vpcv1.InstanceGroupManagerActionPatch)
				instanceGroupManagerActionPatchModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPatchModel.CronSpec = core.StringPtr("*/5 1,2,3 * * *")
				instanceGroupManagerActionPatchModel.Group = instanceGroupManagerScheduledActionGroupPatchModel
				instanceGroupManagerActionPatchModel.Manager = instanceGroupManagerScheduledActionByManagerPatchManagerModel
				instanceGroupManagerActionPatchModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPatchModelAsPatch, asPatchErr := instanceGroupManagerActionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerActionOptions model
				updateInstanceGroupManagerActionOptionsModel := new(vpcv1.UpdateInstanceGroupManagerActionOptions)
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPatch = instanceGroupManagerActionPatchModelAsPatch
				updateInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceGroupManagerActionOptions model with no property values
				updateInstanceGroupManagerActionOptionsModelNew := new(vpcv1.UpdateInstanceGroupManagerActionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerAction successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPatch model
				instanceGroupManagerScheduledActionGroupPatchModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPatch)
				instanceGroupManagerScheduledActionGroupPatchModel.MembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch model
				instanceGroupManagerScheduledActionByManagerPatchManagerModel := new(vpcv1.InstanceGroupManagerScheduledActionByManagerPatchManagerAutoScalePatch)
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerScheduledActionByManagerPatchManagerModel.MinMembershipCount = core.Int64Ptr(int64(10))

				// Construct an instance of the InstanceGroupManagerActionPatchScheduledActionPatch model
				instanceGroupManagerActionPatchModel := new(vpcv1.InstanceGroupManagerActionPatch)
				instanceGroupManagerActionPatchModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPatchModel.CronSpec = core.StringPtr("*/5 1,2,3 * * *")
				instanceGroupManagerActionPatchModel.Group = instanceGroupManagerScheduledActionGroupPatchModel
				instanceGroupManagerActionPatchModel.Manager = instanceGroupManagerScheduledActionByManagerPatchManagerModel
				instanceGroupManagerActionPatchModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPatchModelAsPatch, asPatchErr := instanceGroupManagerActionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerActionOptions model
				updateInstanceGroupManagerActionOptionsModel := new(vpcv1.UpdateInstanceGroupManagerActionOptions)
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPatch = instanceGroupManagerActionPatchModelAsPatch
				updateInstanceGroupManagerActionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerAction(updateInstanceGroupManagerActionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptions *ListInstanceGroupManagerPoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceGroupManagerPoliciesPath := "/instance_groups/testString/managers/testString/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupManagerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceGroupManagerPolicies with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				listInstanceGroupManagerPoliciesOptionsModel := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptions *ListInstanceGroupManagerPoliciesOptions)`, func() {
		version := "testString"
		listInstanceGroupManagerPoliciesPath := "/instance_groups/testString/managers/testString/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupManagerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "policies": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "updated_at": "2019-01-01T12:00:00.000Z", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroupManagerPolicies successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				listInstanceGroupManagerPoliciesOptionsModel := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceGroupManagerPoliciesWithContext(ctx, listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceGroupManagerPoliciesWithContext(ctx, listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupManagerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "policies": [{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "updated_at": "2019-01-01T12:00:00.000Z", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroupManagerPolicies successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceGroupManagerPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				listInstanceGroupManagerPoliciesOptionsModel := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceGroupManagerPolicies with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				listInstanceGroupManagerPoliciesOptionsModel := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceGroupManagerPoliciesOptions model with no property values
				listInstanceGroupManagerPoliciesOptionsModelNew := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceGroupManagerPolicies successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				listInstanceGroupManagerPoliciesOptionsModel := new(vpcv1.ListInstanceGroupManagerPoliciesOptions)
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupManagerPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupManagerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceGroupManagerPolicies(listInstanceGroupManagerPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptions *CreateInstanceGroupManagerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		createInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerPolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				instanceGroupManagerPolicyPrototypeModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")

				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				createInstanceGroupManagerPolicyOptionsModel := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype = instanceGroupManagerPolicyPrototypeModel
				createInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptions *CreateInstanceGroupManagerPolicyOptions)`, func() {
		version := "testString"
		createInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "updated_at": "2019-01-01T12:00:00.000Z", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}`)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerPolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				instanceGroupManagerPolicyPrototypeModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")

				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				createInstanceGroupManagerPolicyOptionsModel := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype = instanceGroupManagerPolicyPrototypeModel
				createInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateInstanceGroupManagerPolicyWithContext(ctx, createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateInstanceGroupManagerPolicyWithContext(ctx, createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "updated_at": "2019-01-01T12:00:00.000Z", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}`)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateInstanceGroupManagerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				instanceGroupManagerPolicyPrototypeModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")

				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				createInstanceGroupManagerPolicyOptionsModel := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype = instanceGroupManagerPolicyPrototypeModel
				createInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateInstanceGroupManagerPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				instanceGroupManagerPolicyPrototypeModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")

				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				createInstanceGroupManagerPolicyOptionsModel := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype = instanceGroupManagerPolicyPrototypeModel
				createInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateInstanceGroupManagerPolicyOptions model with no property values
				createInstanceGroupManagerPolicyOptionsModelNew := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateInstanceGroupManagerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				instanceGroupManagerPolicyPrototypeModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")

				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				createInstanceGroupManagerPolicyOptionsModel := new(vpcv1.CreateInstanceGroupManagerPolicyOptions)
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype = instanceGroupManagerPolicyPrototypeModel
				createInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateInstanceGroupManagerPolicy(createInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptions *DeleteInstanceGroupManagerPolicyOptions)`, func() {
		version := "testString"
		deleteInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroupManagerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceGroupManagerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerPolicyOptions model
				deleteInstanceGroupManagerPolicyOptionsModel := new(vpcv1.DeleteInstanceGroupManagerPolicyOptions)
				deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroupManagerPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupManagerPolicyOptions model
				deleteInstanceGroupManagerPolicyOptionsModel := new(vpcv1.DeleteInstanceGroupManagerPolicyOptions)
				deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupManagerPolicyOptions model with no property values
				deleteInstanceGroupManagerPolicyOptionsModelNew := new(vpcv1.DeleteInstanceGroupManagerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceGroupManagerPolicy(deleteInstanceGroupManagerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptions *GetInstanceGroupManagerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceGroupManagerPolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				getInstanceGroupManagerPolicyOptionsModel := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptions *GetInstanceGroupManagerPolicyOptions)`, func() {
		version := "testString"
		getInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "updated_at": "2019-01-01T12:00:00.000Z", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}`)
				}))
			})
			It(`Invoke GetInstanceGroupManagerPolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				getInstanceGroupManagerPolicyOptionsModel := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceGroupManagerPolicyWithContext(ctx, getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceGroupManagerPolicyWithContext(ctx, getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "updated_at": "2019-01-01T12:00:00.000Z", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}`)
				}))
			})
			It(`Invoke GetInstanceGroupManagerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceGroupManagerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				getInstanceGroupManagerPolicyOptionsModel := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceGroupManagerPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				getInstanceGroupManagerPolicyOptionsModel := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceGroupManagerPolicyOptions model with no property values
				getInstanceGroupManagerPolicyOptionsModelNew := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceGroupManagerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				getInstanceGroupManagerPolicyOptionsModel := new(vpcv1.GetInstanceGroupManagerPolicyOptions)
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceGroupManagerPolicy(getInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptions *UpdateInstanceGroupManagerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerPolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPatch model
				instanceGroupManagerPolicyPatchModel := new(vpcv1.InstanceGroupManagerPolicyPatch)
				instanceGroupManagerPolicyPatchModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPatchModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPatchModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPatchModelAsPatch, asPatchErr := instanceGroupManagerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				updateInstanceGroupManagerPolicyOptionsModel := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch = instanceGroupManagerPolicyPatchModelAsPatch
				updateInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptions *UpdateInstanceGroupManagerPolicyOptions)`, func() {
		version := "testString"
		updateInstanceGroupManagerPolicyPath := "/instance_groups/testString/managers/testString/policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "updated_at": "2019-01-01T12:00:00.000Z", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerPolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceGroupManagerPolicyPatch model
				instanceGroupManagerPolicyPatchModel := new(vpcv1.InstanceGroupManagerPolicyPatch)
				instanceGroupManagerPolicyPatchModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPatchModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPatchModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPatchModelAsPatch, asPatchErr := instanceGroupManagerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				updateInstanceGroupManagerPolicyOptionsModel := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch = instanceGroupManagerPolicyPatchModelAsPatch
				updateInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceGroupManagerPolicyWithContext(ctx, updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceGroupManagerPolicyWithContext(ctx, updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupManagerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/managers/4c939b00-601f-11ea-bca2-000c29475bed/policies/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group-manager-policy", "updated_at": "2019-01-01T12:00:00.000Z", "metric_type": "cpu", "metric_value": 11, "policy_type": "target"}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPatch model
				instanceGroupManagerPolicyPatchModel := new(vpcv1.InstanceGroupManagerPolicyPatch)
				instanceGroupManagerPolicyPatchModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPatchModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPatchModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPatchModelAsPatch, asPatchErr := instanceGroupManagerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				updateInstanceGroupManagerPolicyOptionsModel := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch = instanceGroupManagerPolicyPatchModelAsPatch
				updateInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstanceGroupManagerPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPatch model
				instanceGroupManagerPolicyPatchModel := new(vpcv1.InstanceGroupManagerPolicyPatch)
				instanceGroupManagerPolicyPatchModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPatchModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPatchModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPatchModelAsPatch, asPatchErr := instanceGroupManagerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				updateInstanceGroupManagerPolicyOptionsModel := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch = instanceGroupManagerPolicyPatchModelAsPatch
				updateInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceGroupManagerPolicyOptions model with no property values
				updateInstanceGroupManagerPolicyOptionsModelNew := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstanceGroupManagerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupManagerPolicyPatch model
				instanceGroupManagerPolicyPatchModel := new(vpcv1.InstanceGroupManagerPolicyPatch)
				instanceGroupManagerPolicyPatchModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPatchModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPatchModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPatchModelAsPatch, asPatchErr := instanceGroupManagerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				updateInstanceGroupManagerPolicyOptionsModel := new(vpcv1.UpdateInstanceGroupManagerPolicyOptions)
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch = instanceGroupManagerPolicyPatchModelAsPatch
				updateInstanceGroupManagerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstanceGroupManagerPolicy(updateInstanceGroupManagerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceGroupMemberships(deleteInstanceGroupMembershipsOptions *DeleteInstanceGroupMembershipsOptions)`, func() {
		version := "testString"
		deleteInstanceGroupMembershipsPath := "/instance_groups/testString/memberships"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceGroupMembershipsPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroupMemberships successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceGroupMemberships(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupMembershipsOptions model
				deleteInstanceGroupMembershipsOptionsModel := new(vpcv1.DeleteInstanceGroupMembershipsOptions)
				deleteInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceGroupMemberships(deleteInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroupMemberships with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupMembershipsOptions model
				deleteInstanceGroupMembershipsOptionsModel := new(vpcv1.DeleteInstanceGroupMembershipsOptions)
				deleteInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceGroupMemberships(deleteInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupMembershipsOptions model with no property values
				deleteInstanceGroupMembershipsOptionsModelNew := new(vpcv1.DeleteInstanceGroupMembershipsOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceGroupMemberships(deleteInstanceGroupMembershipsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupMemberships(listInstanceGroupMembershipsOptions *ListInstanceGroupMembershipsOptions) - Operation response error`, func() {
		version := "testString"
		listInstanceGroupMembershipsPath := "/instance_groups/testString/memberships"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupMembershipsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListInstanceGroupMemberships with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				listInstanceGroupMembershipsOptionsModel := new(vpcv1.ListInstanceGroupMembershipsOptions)
				listInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListInstanceGroupMemberships(listInstanceGroupMembershipsOptions *ListInstanceGroupMembershipsOptions)`, func() {
		version := "testString"
		listInstanceGroupMembershipsPath := "/instance_groups/testString/memberships"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupMembershipsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?limit=20"}, "limit": 20, "memberships": [{"created_at": "2019-01-01T12:00:00.000Z", "delete_instance_on_membership_delete": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "name": "my-instance-group-membership", "pool_member": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting", "updated_at": "2019-01-01T12:00:00.000Z"}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroupMemberships successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				listInstanceGroupMembershipsOptionsModel := new(vpcv1.ListInstanceGroupMembershipsOptions)
				listInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListInstanceGroupMembershipsWithContext(ctx, listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListInstanceGroupMembershipsWithContext(ctx, listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listInstanceGroupMembershipsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?limit=20"}, "limit": 20, "memberships": [{"created_at": "2019-01-01T12:00:00.000Z", "delete_instance_on_membership_delete": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "name": "my-instance-group-membership", "pool_member": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting", "updated_at": "2019-01-01T12:00:00.000Z"}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/7241e2a8-601f-11ea-8503-000c29475bed/memberships?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListInstanceGroupMemberships successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListInstanceGroupMemberships(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				listInstanceGroupMembershipsOptionsModel := new(vpcv1.ListInstanceGroupMembershipsOptions)
				listInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListInstanceGroupMemberships with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				listInstanceGroupMembershipsOptionsModel := new(vpcv1.ListInstanceGroupMembershipsOptions)
				listInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListInstanceGroupMembershipsOptions model with no property values
				listInstanceGroupMembershipsOptionsModelNew := new(vpcv1.ListInstanceGroupMembershipsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListInstanceGroupMemberships successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				listInstanceGroupMembershipsOptionsModel := new(vpcv1.ListInstanceGroupMembershipsOptions)
				listInstanceGroupMembershipsOptionsModel.InstanceGroupID = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Start = core.StringPtr("testString")
				listInstanceGroupMembershipsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listInstanceGroupMembershipsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListInstanceGroupMemberships(listInstanceGroupMembershipsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteInstanceGroupMembership(deleteInstanceGroupMembershipOptions *DeleteInstanceGroupMembershipOptions)`, func() {
		version := "testString"
		deleteInstanceGroupMembershipPath := "/instance_groups/testString/memberships/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteInstanceGroupMembership successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteInstanceGroupMembership(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteInstanceGroupMembershipOptions model
				deleteInstanceGroupMembershipOptionsModel := new(vpcv1.DeleteInstanceGroupMembershipOptions)
				deleteInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteInstanceGroupMembership(deleteInstanceGroupMembershipOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteInstanceGroupMembership with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteInstanceGroupMembershipOptions model
				deleteInstanceGroupMembershipOptionsModel := new(vpcv1.DeleteInstanceGroupMembershipOptions)
				deleteInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				deleteInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				deleteInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteInstanceGroupMembership(deleteInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteInstanceGroupMembershipOptions model with no property values
				deleteInstanceGroupMembershipOptionsModelNew := new(vpcv1.DeleteInstanceGroupMembershipOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteInstanceGroupMembership(deleteInstanceGroupMembershipOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupMembership(getInstanceGroupMembershipOptions *GetInstanceGroupMembershipOptions) - Operation response error`, func() {
		version := "testString"
		getInstanceGroupMembershipPath := "/instance_groups/testString/memberships/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetInstanceGroupMembership with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupMembershipOptions model
				getInstanceGroupMembershipOptionsModel := new(vpcv1.GetInstanceGroupMembershipOptions)
				getInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetInstanceGroupMembership(getInstanceGroupMembershipOptions *GetInstanceGroupMembershipOptions)`, func() {
		version := "testString"
		getInstanceGroupMembershipPath := "/instance_groups/testString/memberships/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_instance_on_membership_delete": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "name": "my-instance-group-membership", "pool_member": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetInstanceGroupMembership successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetInstanceGroupMembershipOptions model
				getInstanceGroupMembershipOptionsModel := new(vpcv1.GetInstanceGroupMembershipOptions)
				getInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetInstanceGroupMembershipWithContext(ctx, getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetInstanceGroupMembershipWithContext(ctx, getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_instance_on_membership_delete": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "name": "my-instance-group-membership", "pool_member": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke GetInstanceGroupMembership successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetInstanceGroupMembership(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetInstanceGroupMembershipOptions model
				getInstanceGroupMembershipOptionsModel := new(vpcv1.GetInstanceGroupMembershipOptions)
				getInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetInstanceGroupMembership with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupMembershipOptions model
				getInstanceGroupMembershipOptionsModel := new(vpcv1.GetInstanceGroupMembershipOptions)
				getInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetInstanceGroupMembershipOptions model with no property values
				getInstanceGroupMembershipOptionsModelNew := new(vpcv1.GetInstanceGroupMembershipOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetInstanceGroupMembership successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetInstanceGroupMembershipOptions model
				getInstanceGroupMembershipOptionsModel := new(vpcv1.GetInstanceGroupMembershipOptions)
				getInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				getInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetInstanceGroupMembership(getInstanceGroupMembershipOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupMembership(updateInstanceGroupMembershipOptions *UpdateInstanceGroupMembershipOptions) - Operation response error`, func() {
		version := "testString"
		updateInstanceGroupMembershipPath := "/instance_groups/testString/memberships/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateInstanceGroupMembership with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupMembershipPatch model
				instanceGroupMembershipPatchModel := new(vpcv1.InstanceGroupMembershipPatch)
				instanceGroupMembershipPatchModel.Name = core.StringPtr("my-instance-group-membership")
				instanceGroupMembershipPatchModelAsPatch, asPatchErr := instanceGroupMembershipPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupMembershipOptions model
				updateInstanceGroupMembershipOptionsModel := new(vpcv1.UpdateInstanceGroupMembershipOptions)
				updateInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.InstanceGroupMembershipPatch = instanceGroupMembershipPatchModelAsPatch
				updateInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateInstanceGroupMembership(updateInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateInstanceGroupMembership(updateInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateInstanceGroupMembership(updateInstanceGroupMembershipOptions *UpdateInstanceGroupMembershipOptions)`, func() {
		version := "testString"
		updateInstanceGroupMembershipPath := "/instance_groups/testString/memberships/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_instance_on_membership_delete": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "name": "my-instance-group-membership", "pool_member": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupMembership successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the InstanceGroupMembershipPatch model
				instanceGroupMembershipPatchModel := new(vpcv1.InstanceGroupMembershipPatch)
				instanceGroupMembershipPatchModel.Name = core.StringPtr("my-instance-group-membership")
				instanceGroupMembershipPatchModelAsPatch, asPatchErr := instanceGroupMembershipPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupMembershipOptions model
				updateInstanceGroupMembershipOptionsModel := new(vpcv1.UpdateInstanceGroupMembershipOptions)
				updateInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.InstanceGroupMembershipPatch = instanceGroupMembershipPatchModelAsPatch
				updateInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateInstanceGroupMembershipWithContext(ctx, updateInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateInstanceGroupMembership(updateInstanceGroupMembershipOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateInstanceGroupMembershipWithContext(ctx, updateInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateInstanceGroupMembershipPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "delete_instance_on_membership_delete": true, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/memberships/8b002d86-601f-11ea-898b-000c29475bed", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "instance_template": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "a6b1a881-2ce8-41a3-80fc-36316a73f803", "name": "my-instance-template"}, "name": "my-instance-group-membership", "pool_member": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}, "status": "deleting", "updated_at": "2019-01-01T12:00:00.000Z"}`)
				}))
			})
			It(`Invoke UpdateInstanceGroupMembership successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateInstanceGroupMembership(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the InstanceGroupMembershipPatch model
				instanceGroupMembershipPatchModel := new(vpcv1.InstanceGroupMembershipPatch)
				instanceGroupMembershipPatchModel.Name = core.StringPtr("my-instance-group-membership")
				instanceGroupMembershipPatchModelAsPatch, asPatchErr := instanceGroupMembershipPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupMembershipOptions model
				updateInstanceGroupMembershipOptionsModel := new(vpcv1.UpdateInstanceGroupMembershipOptions)
				updateInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.InstanceGroupMembershipPatch = instanceGroupMembershipPatchModelAsPatch
				updateInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateInstanceGroupMembership(updateInstanceGroupMembershipOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateInstanceGroupMembership with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupMembershipPatch model
				instanceGroupMembershipPatchModel := new(vpcv1.InstanceGroupMembershipPatch)
				instanceGroupMembershipPatchModel.Name = core.StringPtr("my-instance-group-membership")
				instanceGroupMembershipPatchModelAsPatch, asPatchErr := instanceGroupMembershipPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupMembershipOptions model
				updateInstanceGroupMembershipOptionsModel := new(vpcv1.UpdateInstanceGroupMembershipOptions)
				updateInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.InstanceGroupMembershipPatch = instanceGroupMembershipPatchModelAsPatch
				updateInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateInstanceGroupMembership(updateInstanceGroupMembershipOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateInstanceGroupMembershipOptions model with no property values
				updateInstanceGroupMembershipOptionsModelNew := new(vpcv1.UpdateInstanceGroupMembershipOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateInstanceGroupMembership(updateInstanceGroupMembershipOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateInstanceGroupMembership successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the InstanceGroupMembershipPatch model
				instanceGroupMembershipPatchModel := new(vpcv1.InstanceGroupMembershipPatch)
				instanceGroupMembershipPatchModel.Name = core.StringPtr("my-instance-group-membership")
				instanceGroupMembershipPatchModelAsPatch, asPatchErr := instanceGroupMembershipPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateInstanceGroupMembershipOptions model
				updateInstanceGroupMembershipOptionsModel := new(vpcv1.UpdateInstanceGroupMembershipOptions)
				updateInstanceGroupMembershipOptionsModel.InstanceGroupID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.ID = core.StringPtr("testString")
				updateInstanceGroupMembershipOptionsModel.InstanceGroupMembershipPatch = instanceGroupMembershipPatchModelAsPatch
				updateInstanceGroupMembershipOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateInstanceGroupMembership(updateInstanceGroupMembershipOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHostGroups(listDedicatedHostGroupsOptions *ListDedicatedHostGroupsOptions) - Operation response error`, func() {
		version := "testString"
		listDedicatedHostGroupsPath := "/dedicated_host/groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDedicatedHostGroups with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := new(vpcv1.ListDedicatedHostGroupsOptions)
				listDedicatedHostGroupsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListDedicatedHostGroups(listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListDedicatedHostGroups(listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHostGroups(listDedicatedHostGroupsOptions *ListDedicatedHostGroupsOptions)`, func() {
		version := "testString"
		listDedicatedHostGroupsPath := "/dedicated_host/groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups?limit=20"}, "groups": [{"class": "mx2", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "dedicated_hosts": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host", "resource_type": "dedicated_host"}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host_group", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListDedicatedHostGroups successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := new(vpcv1.ListDedicatedHostGroupsOptions)
				listDedicatedHostGroupsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListDedicatedHostGroupsWithContext(ctx, listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListDedicatedHostGroups(listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListDedicatedHostGroupsWithContext(ctx, listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups?limit=20"}, "groups": [{"class": "mx2", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "dedicated_hosts": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host", "resource_type": "dedicated_host"}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host_group", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListDedicatedHostGroups successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListDedicatedHostGroups(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := new(vpcv1.ListDedicatedHostGroupsOptions)
				listDedicatedHostGroupsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListDedicatedHostGroups(listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListDedicatedHostGroups with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := new(vpcv1.ListDedicatedHostGroupsOptions)
				listDedicatedHostGroupsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListDedicatedHostGroups(listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListDedicatedHostGroups successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := new(vpcv1.ListDedicatedHostGroupsOptions)
				listDedicatedHostGroupsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListDedicatedHostGroups(listDedicatedHostGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDedicatedHostGroup(createDedicatedHostGroupOptions *CreateDedicatedHostGroupOptions) - Operation response error`, func() {
		version := "testString"
		createDedicatedHostGroupPath := "/dedicated_host/groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDedicatedHostGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := new(vpcv1.CreateDedicatedHostGroupOptions)
				createDedicatedHostGroupOptionsModel.Class = core.StringPtr("mx2")
				createDedicatedHostGroupOptionsModel.Family = core.StringPtr("balanced")
				createDedicatedHostGroupOptionsModel.Name = core.StringPtr("testString")
				createDedicatedHostGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostGroupOptionsModel.Zone = zoneIdentityModel
				createDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateDedicatedHostGroup(createDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateDedicatedHostGroup(createDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDedicatedHostGroup(createDedicatedHostGroupOptions *CreateDedicatedHostGroupOptions)`, func() {
		version := "testString"
		createDedicatedHostGroupPath := "/dedicated_host/groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"class": "mx2", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "dedicated_hosts": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host", "resource_type": "dedicated_host"}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host_group", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateDedicatedHostGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := new(vpcv1.CreateDedicatedHostGroupOptions)
				createDedicatedHostGroupOptionsModel.Class = core.StringPtr("mx2")
				createDedicatedHostGroupOptionsModel.Family = core.StringPtr("balanced")
				createDedicatedHostGroupOptionsModel.Name = core.StringPtr("testString")
				createDedicatedHostGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostGroupOptionsModel.Zone = zoneIdentityModel
				createDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateDedicatedHostGroupWithContext(ctx, createDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateDedicatedHostGroup(createDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateDedicatedHostGroupWithContext(ctx, createDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"class": "mx2", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "dedicated_hosts": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host", "resource_type": "dedicated_host"}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host_group", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateDedicatedHostGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateDedicatedHostGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := new(vpcv1.CreateDedicatedHostGroupOptions)
				createDedicatedHostGroupOptionsModel.Class = core.StringPtr("mx2")
				createDedicatedHostGroupOptionsModel.Family = core.StringPtr("balanced")
				createDedicatedHostGroupOptionsModel.Name = core.StringPtr("testString")
				createDedicatedHostGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostGroupOptionsModel.Zone = zoneIdentityModel
				createDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateDedicatedHostGroup(createDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateDedicatedHostGroup with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := new(vpcv1.CreateDedicatedHostGroupOptions)
				createDedicatedHostGroupOptionsModel.Class = core.StringPtr("mx2")
				createDedicatedHostGroupOptionsModel.Family = core.StringPtr("balanced")
				createDedicatedHostGroupOptionsModel.Name = core.StringPtr("testString")
				createDedicatedHostGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostGroupOptionsModel.Zone = zoneIdentityModel
				createDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateDedicatedHostGroup(createDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateDedicatedHostGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := new(vpcv1.CreateDedicatedHostGroupOptions)
				createDedicatedHostGroupOptionsModel.Class = core.StringPtr("mx2")
				createDedicatedHostGroupOptionsModel.Family = core.StringPtr("balanced")
				createDedicatedHostGroupOptionsModel.Name = core.StringPtr("testString")
				createDedicatedHostGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createDedicatedHostGroupOptionsModel.Zone = zoneIdentityModel
				createDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateDedicatedHostGroup(createDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteDedicatedHostGroup(deleteDedicatedHostGroupOptions *DeleteDedicatedHostGroupOptions)`, func() {
		version := "testString"
		deleteDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDedicatedHostGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteDedicatedHostGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDedicatedHostGroupOptions model
				deleteDedicatedHostGroupOptionsModel := new(vpcv1.DeleteDedicatedHostGroupOptions)
				deleteDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				deleteDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteDedicatedHostGroup(deleteDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDedicatedHostGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteDedicatedHostGroupOptions model
				deleteDedicatedHostGroupOptionsModel := new(vpcv1.DeleteDedicatedHostGroupOptions)
				deleteDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				deleteDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteDedicatedHostGroup(deleteDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDedicatedHostGroupOptions model with no property values
				deleteDedicatedHostGroupOptionsModelNew := new(vpcv1.DeleteDedicatedHostGroupOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteDedicatedHostGroup(deleteDedicatedHostGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHostGroup(getDedicatedHostGroupOptions *GetDedicatedHostGroupOptions) - Operation response error`, func() {
		version := "testString"
		getDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDedicatedHostGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostGroupOptions model
				getDedicatedHostGroupOptionsModel := new(vpcv1.GetDedicatedHostGroupOptions)
				getDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHostGroup(getDedicatedHostGroupOptions *GetDedicatedHostGroupOptions)`, func() {
		version := "testString"
		getDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"class": "mx2", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "dedicated_hosts": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host", "resource_type": "dedicated_host"}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host_group", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetDedicatedHostGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetDedicatedHostGroupOptions model
				getDedicatedHostGroupOptionsModel := new(vpcv1.GetDedicatedHostGroupOptions)
				getDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetDedicatedHostGroupWithContext(ctx, getDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetDedicatedHostGroupWithContext(ctx, getDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"class": "mx2", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "dedicated_hosts": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host", "resource_type": "dedicated_host"}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host_group", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetDedicatedHostGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetDedicatedHostGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDedicatedHostGroupOptions model
				getDedicatedHostGroupOptionsModel := new(vpcv1.GetDedicatedHostGroupOptions)
				getDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDedicatedHostGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostGroupOptions model
				getDedicatedHostGroupOptionsModel := new(vpcv1.GetDedicatedHostGroupOptions)
				getDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDedicatedHostGroupOptions model with no property values
				getDedicatedHostGroupOptionsModelNew := new(vpcv1.GetDedicatedHostGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetDedicatedHostGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostGroupOptions model
				getDedicatedHostGroupOptionsModel := new(vpcv1.GetDedicatedHostGroupOptions)
				getDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetDedicatedHostGroup(getDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDedicatedHostGroup(updateDedicatedHostGroupOptions *UpdateDedicatedHostGroupOptions) - Operation response error`, func() {
		version := "testString"
		updateDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateDedicatedHostGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostGroupPatch model
				dedicatedHostGroupPatchModel := new(vpcv1.DedicatedHostGroupPatch)
				dedicatedHostGroupPatchModel.Name = core.StringPtr("my-host-group-modified")
				dedicatedHostGroupPatchModelAsPatch, asPatchErr := dedicatedHostGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				updateDedicatedHostGroupOptionsModel := new(vpcv1.UpdateDedicatedHostGroupOptions)
				updateDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostGroupOptionsModel.DedicatedHostGroupPatch = dedicatedHostGroupPatchModelAsPatch
				updateDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDedicatedHostGroup(updateDedicatedHostGroupOptions *UpdateDedicatedHostGroupOptions)`, func() {
		version := "testString"
		updateDedicatedHostGroupPath := "/dedicated_host/groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"class": "mx2", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "dedicated_hosts": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host", "resource_type": "dedicated_host"}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host_group", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateDedicatedHostGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the DedicatedHostGroupPatch model
				dedicatedHostGroupPatchModel := new(vpcv1.DedicatedHostGroupPatch)
				dedicatedHostGroupPatchModel.Name = core.StringPtr("my-host-group-modified")
				dedicatedHostGroupPatchModelAsPatch, asPatchErr := dedicatedHostGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				updateDedicatedHostGroupOptionsModel := new(vpcv1.UpdateDedicatedHostGroupOptions)
				updateDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostGroupOptionsModel.DedicatedHostGroupPatch = dedicatedHostGroupPatchModelAsPatch
				updateDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateDedicatedHostGroupWithContext(ctx, updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateDedicatedHostGroupWithContext(ctx, updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDedicatedHostGroupPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"class": "mx2", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "dedicated_hosts": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-host", "resource_type": "dedicated_host"}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host_group", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateDedicatedHostGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateDedicatedHostGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DedicatedHostGroupPatch model
				dedicatedHostGroupPatchModel := new(vpcv1.DedicatedHostGroupPatch)
				dedicatedHostGroupPatchModel.Name = core.StringPtr("my-host-group-modified")
				dedicatedHostGroupPatchModelAsPatch, asPatchErr := dedicatedHostGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				updateDedicatedHostGroupOptionsModel := new(vpcv1.UpdateDedicatedHostGroupOptions)
				updateDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostGroupOptionsModel.DedicatedHostGroupPatch = dedicatedHostGroupPatchModelAsPatch
				updateDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateDedicatedHostGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostGroupPatch model
				dedicatedHostGroupPatchModel := new(vpcv1.DedicatedHostGroupPatch)
				dedicatedHostGroupPatchModel.Name = core.StringPtr("my-host-group-modified")
				dedicatedHostGroupPatchModelAsPatch, asPatchErr := dedicatedHostGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				updateDedicatedHostGroupOptionsModel := new(vpcv1.UpdateDedicatedHostGroupOptions)
				updateDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostGroupOptionsModel.DedicatedHostGroupPatch = dedicatedHostGroupPatchModelAsPatch
				updateDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateDedicatedHostGroupOptions model with no property values
				updateDedicatedHostGroupOptionsModelNew := new(vpcv1.UpdateDedicatedHostGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateDedicatedHostGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostGroupPatch model
				dedicatedHostGroupPatchModel := new(vpcv1.DedicatedHostGroupPatch)
				dedicatedHostGroupPatchModel.Name = core.StringPtr("my-host-group-modified")
				dedicatedHostGroupPatchModelAsPatch, asPatchErr := dedicatedHostGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				updateDedicatedHostGroupOptionsModel := new(vpcv1.UpdateDedicatedHostGroupOptions)
				updateDedicatedHostGroupOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostGroupOptionsModel.DedicatedHostGroupPatch = dedicatedHostGroupPatchModelAsPatch
				updateDedicatedHostGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateDedicatedHostGroup(updateDedicatedHostGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHostProfiles(listDedicatedHostProfilesOptions *ListDedicatedHostProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listDedicatedHostProfilesPath := "/dedicated_host/profiles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDedicatedHostProfiles with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := new(vpcv1.ListDedicatedHostProfilesOptions)
				listDedicatedHostProfilesOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHostProfiles(listDedicatedHostProfilesOptions *ListDedicatedHostProfilesOptions)`, func() {
		version := "testString"
		listDedicatedHostProfilesPath := "/dedicated_host/profiles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles?start=9da91&limit=20"}, "profiles": [{"class": "mx2", "disks": [{"interface_type": {"type": "fixed", "value": "nvme"}, "quantity": {"type": "fixed", "value": 4}, "size": {"type": "fixed", "value": 3200}, "supported_instance_interface_types": {"type": "fixed", "value": ["virtio_blk"]}}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "memory": {"type": "fixed", "value": 16}, "name": "mx2-host-152x1216", "socket_count": {"type": "fixed", "value": 2}, "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu_architecture": {"type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListDedicatedHostProfiles successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := new(vpcv1.ListDedicatedHostProfilesOptions)
				listDedicatedHostProfilesOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListDedicatedHostProfilesWithContext(ctx, listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListDedicatedHostProfilesWithContext(ctx, listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles?start=9da91&limit=20"}, "profiles": [{"class": "mx2", "disks": [{"interface_type": {"type": "fixed", "value": "nvme"}, "quantity": {"type": "fixed", "value": 4}, "size": {"type": "fixed", "value": 3200}, "supported_instance_interface_types": {"type": "fixed", "value": ["virtio_blk"]}}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "memory": {"type": "fixed", "value": 16}, "name": "mx2-host-152x1216", "socket_count": {"type": "fixed", "value": 2}, "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu_architecture": {"type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListDedicatedHostProfiles successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListDedicatedHostProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := new(vpcv1.ListDedicatedHostProfilesOptions)
				listDedicatedHostProfilesOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListDedicatedHostProfiles with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := new(vpcv1.ListDedicatedHostProfilesOptions)
				listDedicatedHostProfilesOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListDedicatedHostProfiles successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := new(vpcv1.ListDedicatedHostProfilesOptions)
				listDedicatedHostProfilesOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListDedicatedHostProfiles(listDedicatedHostProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHostProfile(getDedicatedHostProfileOptions *GetDedicatedHostProfileOptions) - Operation response error`, func() {
		version := "testString"
		getDedicatedHostProfilePath := "/dedicated_host/profiles/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDedicatedHostProfile with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostProfileOptions model
				getDedicatedHostProfileOptionsModel := new(vpcv1.GetDedicatedHostProfileOptions)
				getDedicatedHostProfileOptionsModel.Name = core.StringPtr("testString")
				getDedicatedHostProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHostProfile(getDedicatedHostProfileOptions *GetDedicatedHostProfileOptions)`, func() {
		version := "testString"
		getDedicatedHostProfilePath := "/dedicated_host/profiles/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"class": "mx2", "disks": [{"interface_type": {"type": "fixed", "value": "nvme"}, "quantity": {"type": "fixed", "value": 4}, "size": {"type": "fixed", "value": 3200}, "supported_instance_interface_types": {"type": "fixed", "value": ["virtio_blk"]}}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "memory": {"type": "fixed", "value": 16}, "name": "mx2-host-152x1216", "socket_count": {"type": "fixed", "value": 2}, "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu_architecture": {"type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}`)
				}))
			})
			It(`Invoke GetDedicatedHostProfile successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetDedicatedHostProfileOptions model
				getDedicatedHostProfileOptionsModel := new(vpcv1.GetDedicatedHostProfileOptions)
				getDedicatedHostProfileOptionsModel.Name = core.StringPtr("testString")
				getDedicatedHostProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetDedicatedHostProfileWithContext(ctx, getDedicatedHostProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetDedicatedHostProfileWithContext(ctx, getDedicatedHostProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"class": "mx2", "disks": [{"interface_type": {"type": "fixed", "value": "nvme"}, "quantity": {"type": "fixed", "value": 4}, "size": {"type": "fixed", "value": 3200}, "supported_instance_interface_types": {"type": "fixed", "value": ["virtio_blk"]}}], "family": "balanced", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "memory": {"type": "fixed", "value": 16}, "name": "mx2-host-152x1216", "socket_count": {"type": "fixed", "value": 2}, "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu_architecture": {"type": "fixed", "value": "amd64"}, "vcpu_count": {"type": "fixed", "value": 16}}`)
				}))
			})
			It(`Invoke GetDedicatedHostProfile successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetDedicatedHostProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDedicatedHostProfileOptions model
				getDedicatedHostProfileOptionsModel := new(vpcv1.GetDedicatedHostProfileOptions)
				getDedicatedHostProfileOptionsModel.Name = core.StringPtr("testString")
				getDedicatedHostProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDedicatedHostProfile with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostProfileOptions model
				getDedicatedHostProfileOptionsModel := new(vpcv1.GetDedicatedHostProfileOptions)
				getDedicatedHostProfileOptionsModel.Name = core.StringPtr("testString")
				getDedicatedHostProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDedicatedHostProfileOptions model with no property values
				getDedicatedHostProfileOptionsModelNew := new(vpcv1.GetDedicatedHostProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetDedicatedHostProfile successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostProfileOptions model
				getDedicatedHostProfileOptionsModel := new(vpcv1.GetDedicatedHostProfileOptions)
				getDedicatedHostProfileOptionsModel.Name = core.StringPtr("testString")
				getDedicatedHostProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetDedicatedHostProfile(getDedicatedHostProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHosts(listDedicatedHostsOptions *ListDedicatedHostsOptions) - Operation response error`, func() {
		version := "testString"
		listDedicatedHostsPath := "/dedicated_hosts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["dedicated_host_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDedicatedHosts with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := new(vpcv1.ListDedicatedHostsOptions)
				listDedicatedHostsOptionsModel.DedicatedHostGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListDedicatedHosts(listDedicatedHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListDedicatedHosts(listDedicatedHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHosts(listDedicatedHostsOptions *ListDedicatedHostsOptions)`, func() {
		version := "testString"
		listDedicatedHostsPath := "/dedicated_hosts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["dedicated_host_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"dedicated_hosts": [{"available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}], "group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_type": "dedicated_host_group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_placement_enabled": true, "instances": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "stable", "memory": 128, "name": "my-host", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "mx2-host-152x1216"}, "provisionable": false, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host", "socket_count": 4, "state": "available", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu": {"architecture": "amd64", "count": 4}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListDedicatedHosts successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := new(vpcv1.ListDedicatedHostsOptions)
				listDedicatedHostsOptionsModel.DedicatedHostGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListDedicatedHostsWithContext(ctx, listDedicatedHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListDedicatedHosts(listDedicatedHostsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListDedicatedHostsWithContext(ctx, listDedicatedHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["dedicated_host_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"dedicated_hosts": [{"available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}], "group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_type": "dedicated_host_group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_placement_enabled": true, "instances": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "stable", "memory": 128, "name": "my-host", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "mx2-host-152x1216"}, "provisionable": false, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host", "socket_count": 4, "state": "available", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu": {"architecture": "amd64", "count": 4}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListDedicatedHosts successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListDedicatedHosts(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := new(vpcv1.ListDedicatedHostsOptions)
				listDedicatedHostsOptionsModel.DedicatedHostGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListDedicatedHosts(listDedicatedHostsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListDedicatedHosts with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := new(vpcv1.ListDedicatedHostsOptions)
				listDedicatedHostsOptionsModel.DedicatedHostGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListDedicatedHosts(listDedicatedHostsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListDedicatedHosts successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := new(vpcv1.ListDedicatedHostsOptions)
				listDedicatedHostsOptionsModel.DedicatedHostGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Start = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listDedicatedHostsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.ZoneName = core.StringPtr("testString")
				listDedicatedHostsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListDedicatedHosts(listDedicatedHostsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDedicatedHost(createDedicatedHostOptions *CreateDedicatedHostOptions) - Operation response error`, func() {
		version := "testString"
		createDedicatedHostPath := "/dedicated_hosts"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDedicatedHostPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateDedicatedHost with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostProfileIdentityByName model
				dedicatedHostProfileIdentityModel := new(vpcv1.DedicatedHostProfileIdentityByName)
				dedicatedHostProfileIdentityModel.Name = core.StringPtr("m-62x496")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the DedicatedHostGroupIdentityByID model
				dedicatedHostGroupIdentityModel := new(vpcv1.DedicatedHostGroupIdentityByID)
				dedicatedHostGroupIdentityModel.ID = core.StringPtr("0c8eccb4-271c-4518-956c-32bfce5cf83b")

				// Construct an instance of the DedicatedHostPrototypeDedicatedHostByGroup model
				dedicatedHostPrototypeModel := new(vpcv1.DedicatedHostPrototypeDedicatedHostByGroup)
				dedicatedHostPrototypeModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPrototypeModel.Name = core.StringPtr("my-host")
				dedicatedHostPrototypeModel.Profile = dedicatedHostProfileIdentityModel
				dedicatedHostPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				dedicatedHostPrototypeModel.Group = dedicatedHostGroupIdentityModel

				// Construct an instance of the CreateDedicatedHostOptions model
				createDedicatedHostOptionsModel := new(vpcv1.CreateDedicatedHostOptions)
				createDedicatedHostOptionsModel.DedicatedHostPrototype = dedicatedHostPrototypeModel
				createDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateDedicatedHost(createDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateDedicatedHost(createDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateDedicatedHost(createDedicatedHostOptions *CreateDedicatedHostOptions)`, func() {
		version := "testString"
		createDedicatedHostPath := "/dedicated_hosts"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDedicatedHostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}], "group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_type": "dedicated_host_group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_placement_enabled": true, "instances": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "stable", "memory": 128, "name": "my-host", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "mx2-host-152x1216"}, "provisionable": false, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host", "socket_count": 4, "state": "available", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu": {"architecture": "amd64", "count": 4}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateDedicatedHost successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the DedicatedHostProfileIdentityByName model
				dedicatedHostProfileIdentityModel := new(vpcv1.DedicatedHostProfileIdentityByName)
				dedicatedHostProfileIdentityModel.Name = core.StringPtr("m-62x496")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the DedicatedHostGroupIdentityByID model
				dedicatedHostGroupIdentityModel := new(vpcv1.DedicatedHostGroupIdentityByID)
				dedicatedHostGroupIdentityModel.ID = core.StringPtr("0c8eccb4-271c-4518-956c-32bfce5cf83b")

				// Construct an instance of the DedicatedHostPrototypeDedicatedHostByGroup model
				dedicatedHostPrototypeModel := new(vpcv1.DedicatedHostPrototypeDedicatedHostByGroup)
				dedicatedHostPrototypeModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPrototypeModel.Name = core.StringPtr("my-host")
				dedicatedHostPrototypeModel.Profile = dedicatedHostProfileIdentityModel
				dedicatedHostPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				dedicatedHostPrototypeModel.Group = dedicatedHostGroupIdentityModel

				// Construct an instance of the CreateDedicatedHostOptions model
				createDedicatedHostOptionsModel := new(vpcv1.CreateDedicatedHostOptions)
				createDedicatedHostOptionsModel.DedicatedHostPrototype = dedicatedHostPrototypeModel
				createDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateDedicatedHostWithContext(ctx, createDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateDedicatedHost(createDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateDedicatedHostWithContext(ctx, createDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createDedicatedHostPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}], "group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_type": "dedicated_host_group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_placement_enabled": true, "instances": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "stable", "memory": 128, "name": "my-host", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "mx2-host-152x1216"}, "provisionable": false, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host", "socket_count": 4, "state": "available", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu": {"architecture": "amd64", "count": 4}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateDedicatedHost successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateDedicatedHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DedicatedHostProfileIdentityByName model
				dedicatedHostProfileIdentityModel := new(vpcv1.DedicatedHostProfileIdentityByName)
				dedicatedHostProfileIdentityModel.Name = core.StringPtr("m-62x496")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the DedicatedHostGroupIdentityByID model
				dedicatedHostGroupIdentityModel := new(vpcv1.DedicatedHostGroupIdentityByID)
				dedicatedHostGroupIdentityModel.ID = core.StringPtr("0c8eccb4-271c-4518-956c-32bfce5cf83b")

				// Construct an instance of the DedicatedHostPrototypeDedicatedHostByGroup model
				dedicatedHostPrototypeModel := new(vpcv1.DedicatedHostPrototypeDedicatedHostByGroup)
				dedicatedHostPrototypeModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPrototypeModel.Name = core.StringPtr("my-host")
				dedicatedHostPrototypeModel.Profile = dedicatedHostProfileIdentityModel
				dedicatedHostPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				dedicatedHostPrototypeModel.Group = dedicatedHostGroupIdentityModel

				// Construct an instance of the CreateDedicatedHostOptions model
				createDedicatedHostOptionsModel := new(vpcv1.CreateDedicatedHostOptions)
				createDedicatedHostOptionsModel.DedicatedHostPrototype = dedicatedHostPrototypeModel
				createDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateDedicatedHost(createDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateDedicatedHost with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostProfileIdentityByName model
				dedicatedHostProfileIdentityModel := new(vpcv1.DedicatedHostProfileIdentityByName)
				dedicatedHostProfileIdentityModel.Name = core.StringPtr("m-62x496")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the DedicatedHostGroupIdentityByID model
				dedicatedHostGroupIdentityModel := new(vpcv1.DedicatedHostGroupIdentityByID)
				dedicatedHostGroupIdentityModel.ID = core.StringPtr("0c8eccb4-271c-4518-956c-32bfce5cf83b")

				// Construct an instance of the DedicatedHostPrototypeDedicatedHostByGroup model
				dedicatedHostPrototypeModel := new(vpcv1.DedicatedHostPrototypeDedicatedHostByGroup)
				dedicatedHostPrototypeModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPrototypeModel.Name = core.StringPtr("my-host")
				dedicatedHostPrototypeModel.Profile = dedicatedHostProfileIdentityModel
				dedicatedHostPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				dedicatedHostPrototypeModel.Group = dedicatedHostGroupIdentityModel

				// Construct an instance of the CreateDedicatedHostOptions model
				createDedicatedHostOptionsModel := new(vpcv1.CreateDedicatedHostOptions)
				createDedicatedHostOptionsModel.DedicatedHostPrototype = dedicatedHostPrototypeModel
				createDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateDedicatedHost(createDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateDedicatedHostOptions model with no property values
				createDedicatedHostOptionsModelNew := new(vpcv1.CreateDedicatedHostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateDedicatedHost(createDedicatedHostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateDedicatedHost successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostProfileIdentityByName model
				dedicatedHostProfileIdentityModel := new(vpcv1.DedicatedHostProfileIdentityByName)
				dedicatedHostProfileIdentityModel.Name = core.StringPtr("m-62x496")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the DedicatedHostGroupIdentityByID model
				dedicatedHostGroupIdentityModel := new(vpcv1.DedicatedHostGroupIdentityByID)
				dedicatedHostGroupIdentityModel.ID = core.StringPtr("0c8eccb4-271c-4518-956c-32bfce5cf83b")

				// Construct an instance of the DedicatedHostPrototypeDedicatedHostByGroup model
				dedicatedHostPrototypeModel := new(vpcv1.DedicatedHostPrototypeDedicatedHostByGroup)
				dedicatedHostPrototypeModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPrototypeModel.Name = core.StringPtr("my-host")
				dedicatedHostPrototypeModel.Profile = dedicatedHostProfileIdentityModel
				dedicatedHostPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				dedicatedHostPrototypeModel.Group = dedicatedHostGroupIdentityModel

				// Construct an instance of the CreateDedicatedHostOptions model
				createDedicatedHostOptionsModel := new(vpcv1.CreateDedicatedHostOptions)
				createDedicatedHostOptionsModel.DedicatedHostPrototype = dedicatedHostPrototypeModel
				createDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateDedicatedHost(createDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHostDisks(listDedicatedHostDisksOptions *ListDedicatedHostDisksOptions) - Operation response error`, func() {
		version := "testString"
		listDedicatedHostDisksPath := "/dedicated_hosts/testString/disks"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostDisksPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListDedicatedHostDisks with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostDisksOptions model
				listDedicatedHostDisksOptionsModel := new(vpcv1.ListDedicatedHostDisksOptions)
				listDedicatedHostDisksOptionsModel.DedicatedHostID = core.StringPtr("testString")
				listDedicatedHostDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListDedicatedHostDisks(listDedicatedHostDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListDedicatedHostDisks(listDedicatedHostDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListDedicatedHostDisks(listDedicatedHostDisksOptions *ListDedicatedHostDisksOptions)`, func() {
		version := "testString"
		listDedicatedHostDisksPath := "/dedicated_hosts/testString/disks"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostDisksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}]}`)
				}))
			})
			It(`Invoke ListDedicatedHostDisks successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListDedicatedHostDisksOptions model
				listDedicatedHostDisksOptionsModel := new(vpcv1.ListDedicatedHostDisksOptions)
				listDedicatedHostDisksOptionsModel.DedicatedHostID = core.StringPtr("testString")
				listDedicatedHostDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListDedicatedHostDisksWithContext(ctx, listDedicatedHostDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListDedicatedHostDisks(listDedicatedHostDisksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListDedicatedHostDisksWithContext(ctx, listDedicatedHostDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listDedicatedHostDisksPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}]}`)
				}))
			})
			It(`Invoke ListDedicatedHostDisks successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListDedicatedHostDisks(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListDedicatedHostDisksOptions model
				listDedicatedHostDisksOptionsModel := new(vpcv1.ListDedicatedHostDisksOptions)
				listDedicatedHostDisksOptionsModel.DedicatedHostID = core.StringPtr("testString")
				listDedicatedHostDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListDedicatedHostDisks(listDedicatedHostDisksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListDedicatedHostDisks with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostDisksOptions model
				listDedicatedHostDisksOptionsModel := new(vpcv1.ListDedicatedHostDisksOptions)
				listDedicatedHostDisksOptionsModel.DedicatedHostID = core.StringPtr("testString")
				listDedicatedHostDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListDedicatedHostDisks(listDedicatedHostDisksOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListDedicatedHostDisksOptions model with no property values
				listDedicatedHostDisksOptionsModelNew := new(vpcv1.ListDedicatedHostDisksOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListDedicatedHostDisks(listDedicatedHostDisksOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListDedicatedHostDisks successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListDedicatedHostDisksOptions model
				listDedicatedHostDisksOptionsModel := new(vpcv1.ListDedicatedHostDisksOptions)
				listDedicatedHostDisksOptionsModel.DedicatedHostID = core.StringPtr("testString")
				listDedicatedHostDisksOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListDedicatedHostDisks(listDedicatedHostDisksOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHostDisk(getDedicatedHostDiskOptions *GetDedicatedHostDiskOptions) - Operation response error`, func() {
		version := "testString"
		getDedicatedHostDiskPath := "/dedicated_hosts/testString/disks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostDiskPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDedicatedHostDisk with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostDiskOptions model
				getDedicatedHostDiskOptionsModel := new(vpcv1.GetDedicatedHostDiskOptions)
				getDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetDedicatedHostDisk(getDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetDedicatedHostDisk(getDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHostDisk(getDedicatedHostDiskOptions *GetDedicatedHostDiskOptions)`, func() {
		version := "testString"
		getDedicatedHostDiskPath := "/dedicated_hosts/testString/disks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostDiskPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}`)
				}))
			})
			It(`Invoke GetDedicatedHostDisk successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetDedicatedHostDiskOptions model
				getDedicatedHostDiskOptionsModel := new(vpcv1.GetDedicatedHostDiskOptions)
				getDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetDedicatedHostDiskWithContext(ctx, getDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetDedicatedHostDisk(getDedicatedHostDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetDedicatedHostDiskWithContext(ctx, getDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostDiskPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}`)
				}))
			})
			It(`Invoke GetDedicatedHostDisk successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetDedicatedHostDisk(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDedicatedHostDiskOptions model
				getDedicatedHostDiskOptionsModel := new(vpcv1.GetDedicatedHostDiskOptions)
				getDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetDedicatedHostDisk(getDedicatedHostDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDedicatedHostDisk with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostDiskOptions model
				getDedicatedHostDiskOptionsModel := new(vpcv1.GetDedicatedHostDiskOptions)
				getDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetDedicatedHostDisk(getDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDedicatedHostDiskOptions model with no property values
				getDedicatedHostDiskOptionsModelNew := new(vpcv1.GetDedicatedHostDiskOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetDedicatedHostDisk(getDedicatedHostDiskOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetDedicatedHostDisk successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostDiskOptions model
				getDedicatedHostDiskOptionsModel := new(vpcv1.GetDedicatedHostDiskOptions)
				getDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetDedicatedHostDisk(getDedicatedHostDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDedicatedHostDisk(updateDedicatedHostDiskOptions *UpdateDedicatedHostDiskOptions) - Operation response error`, func() {
		version := "testString"
		updateDedicatedHostDiskPath := "/dedicated_hosts/testString/disks/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDedicatedHostDiskPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateDedicatedHostDisk with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostDiskPatch model
				dedicatedHostDiskPatchModel := new(vpcv1.DedicatedHostDiskPatch)
				dedicatedHostDiskPatchModel.Name = core.StringPtr("my-disk-updated")
				dedicatedHostDiskPatchModelAsPatch, asPatchErr := dedicatedHostDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostDiskOptions model
				updateDedicatedHostDiskOptionsModel := new(vpcv1.UpdateDedicatedHostDiskOptions)
				updateDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.DedicatedHostDiskPatch = dedicatedHostDiskPatchModelAsPatch
				updateDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateDedicatedHostDisk(updateDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateDedicatedHostDisk(updateDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDedicatedHostDisk(updateDedicatedHostDiskOptions *UpdateDedicatedHostDiskOptions)`, func() {
		version := "testString"
		updateDedicatedHostDiskPath := "/dedicated_hosts/testString/disks/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDedicatedHostDiskPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}`)
				}))
			})
			It(`Invoke UpdateDedicatedHostDisk successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the DedicatedHostDiskPatch model
				dedicatedHostDiskPatchModel := new(vpcv1.DedicatedHostDiskPatch)
				dedicatedHostDiskPatchModel.Name = core.StringPtr("my-disk-updated")
				dedicatedHostDiskPatchModelAsPatch, asPatchErr := dedicatedHostDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostDiskOptions model
				updateDedicatedHostDiskOptionsModel := new(vpcv1.UpdateDedicatedHostDiskOptions)
				updateDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.DedicatedHostDiskPatch = dedicatedHostDiskPatchModelAsPatch
				updateDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateDedicatedHostDiskWithContext(ctx, updateDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateDedicatedHostDisk(updateDedicatedHostDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateDedicatedHostDiskWithContext(ctx, updateDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDedicatedHostDiskPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}`)
				}))
			})
			It(`Invoke UpdateDedicatedHostDisk successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateDedicatedHostDisk(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DedicatedHostDiskPatch model
				dedicatedHostDiskPatchModel := new(vpcv1.DedicatedHostDiskPatch)
				dedicatedHostDiskPatchModel.Name = core.StringPtr("my-disk-updated")
				dedicatedHostDiskPatchModelAsPatch, asPatchErr := dedicatedHostDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostDiskOptions model
				updateDedicatedHostDiskOptionsModel := new(vpcv1.UpdateDedicatedHostDiskOptions)
				updateDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.DedicatedHostDiskPatch = dedicatedHostDiskPatchModelAsPatch
				updateDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateDedicatedHostDisk(updateDedicatedHostDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateDedicatedHostDisk with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostDiskPatch model
				dedicatedHostDiskPatchModel := new(vpcv1.DedicatedHostDiskPatch)
				dedicatedHostDiskPatchModel.Name = core.StringPtr("my-disk-updated")
				dedicatedHostDiskPatchModelAsPatch, asPatchErr := dedicatedHostDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostDiskOptions model
				updateDedicatedHostDiskOptionsModel := new(vpcv1.UpdateDedicatedHostDiskOptions)
				updateDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.DedicatedHostDiskPatch = dedicatedHostDiskPatchModelAsPatch
				updateDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateDedicatedHostDisk(updateDedicatedHostDiskOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateDedicatedHostDiskOptions model with no property values
				updateDedicatedHostDiskOptionsModelNew := new(vpcv1.UpdateDedicatedHostDiskOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateDedicatedHostDisk(updateDedicatedHostDiskOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateDedicatedHostDisk successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostDiskPatch model
				dedicatedHostDiskPatchModel := new(vpcv1.DedicatedHostDiskPatch)
				dedicatedHostDiskPatchModel.Name = core.StringPtr("my-disk-updated")
				dedicatedHostDiskPatchModelAsPatch, asPatchErr := dedicatedHostDiskPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostDiskOptions model
				updateDedicatedHostDiskOptionsModel := new(vpcv1.UpdateDedicatedHostDiskOptions)
				updateDedicatedHostDiskOptionsModel.DedicatedHostID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostDiskOptionsModel.DedicatedHostDiskPatch = dedicatedHostDiskPatchModelAsPatch
				updateDedicatedHostDiskOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateDedicatedHostDisk(updateDedicatedHostDiskOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteDedicatedHost(deleteDedicatedHostOptions *DeleteDedicatedHostOptions)`, func() {
		version := "testString"
		deleteDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteDedicatedHostPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteDedicatedHost successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteDedicatedHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteDedicatedHostOptions model
				deleteDedicatedHostOptionsModel := new(vpcv1.DeleteDedicatedHostOptions)
				deleteDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				deleteDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteDedicatedHost(deleteDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteDedicatedHost with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteDedicatedHostOptions model
				deleteDedicatedHostOptionsModel := new(vpcv1.DeleteDedicatedHostOptions)
				deleteDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				deleteDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteDedicatedHost(deleteDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteDedicatedHostOptions model with no property values
				deleteDedicatedHostOptionsModelNew := new(vpcv1.DeleteDedicatedHostOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteDedicatedHost(deleteDedicatedHostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHost(getDedicatedHostOptions *GetDedicatedHostOptions) - Operation response error`, func() {
		version := "testString"
		getDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetDedicatedHost with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostOptions model
				getDedicatedHostOptionsModel := new(vpcv1.GetDedicatedHostOptions)
				getDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetDedicatedHost(getDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetDedicatedHost(getDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetDedicatedHost(getDedicatedHostOptions *GetDedicatedHostOptions)`, func() {
		version := "testString"
		getDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}], "group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_type": "dedicated_host_group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_placement_enabled": true, "instances": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "stable", "memory": 128, "name": "my-host", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "mx2-host-152x1216"}, "provisionable": false, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host", "socket_count": 4, "state": "available", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu": {"architecture": "amd64", "count": 4}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetDedicatedHost successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetDedicatedHostOptions model
				getDedicatedHostOptionsModel := new(vpcv1.GetDedicatedHostOptions)
				getDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetDedicatedHostWithContext(ctx, getDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetDedicatedHost(getDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetDedicatedHostWithContext(ctx, getDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getDedicatedHostPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}], "group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_type": "dedicated_host_group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_placement_enabled": true, "instances": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "stable", "memory": 128, "name": "my-host", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "mx2-host-152x1216"}, "provisionable": false, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host", "socket_count": 4, "state": "available", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu": {"architecture": "amd64", "count": 4}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetDedicatedHost successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetDedicatedHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetDedicatedHostOptions model
				getDedicatedHostOptionsModel := new(vpcv1.GetDedicatedHostOptions)
				getDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetDedicatedHost(getDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetDedicatedHost with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostOptions model
				getDedicatedHostOptionsModel := new(vpcv1.GetDedicatedHostOptions)
				getDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetDedicatedHost(getDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetDedicatedHostOptions model with no property values
				getDedicatedHostOptionsModelNew := new(vpcv1.GetDedicatedHostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetDedicatedHost(getDedicatedHostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetDedicatedHost successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetDedicatedHostOptions model
				getDedicatedHostOptionsModel := new(vpcv1.GetDedicatedHostOptions)
				getDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				getDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetDedicatedHost(getDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDedicatedHost(updateDedicatedHostOptions *UpdateDedicatedHostOptions) - Operation response error`, func() {
		version := "testString"
		updateDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDedicatedHostPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateDedicatedHost with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostPatch model
				dedicatedHostPatchModel := new(vpcv1.DedicatedHostPatch)
				dedicatedHostPatchModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPatchModel.Name = core.StringPtr("my-host")
				dedicatedHostPatchModelAsPatch, asPatchErr := dedicatedHostPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostOptions model
				updateDedicatedHostOptionsModel := new(vpcv1.UpdateDedicatedHostOptions)
				updateDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostOptionsModel.DedicatedHostPatch = dedicatedHostPatchModelAsPatch
				updateDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateDedicatedHost(updateDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateDedicatedHost(updateDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateDedicatedHost(updateDedicatedHostOptions *UpdateDedicatedHostOptions)`, func() {
		version := "testString"
		updateDedicatedHostPath := "/dedicated_hosts/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDedicatedHostPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}], "group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_type": "dedicated_host_group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_placement_enabled": true, "instances": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "stable", "memory": 128, "name": "my-host", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "mx2-host-152x1216"}, "provisionable": false, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host", "socket_count": 4, "state": "available", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu": {"architecture": "amd64", "count": 4}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateDedicatedHost successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the DedicatedHostPatch model
				dedicatedHostPatchModel := new(vpcv1.DedicatedHostPatch)
				dedicatedHostPatchModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPatchModel.Name = core.StringPtr("my-host")
				dedicatedHostPatchModelAsPatch, asPatchErr := dedicatedHostPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostOptions model
				updateDedicatedHostOptionsModel := new(vpcv1.UpdateDedicatedHostOptions)
				updateDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostOptionsModel.DedicatedHostPatch = dedicatedHostPatchModelAsPatch
				updateDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateDedicatedHostWithContext(ctx, updateDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateDedicatedHost(updateDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateDedicatedHostWithContext(ctx, updateDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateDedicatedHostPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"available_memory": 128, "available_vcpu": {"architecture": "amd64", "count": 4}, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a", "disks": [{"available": 9, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "instance_disks": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/disks/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-instance-disk", "resource_type": "instance_disk"}], "interface_type": "nvme", "lifecycle_state": "stable", "name": "my-dedicated-host-disk", "provisionable": false, "resource_type": "dedicated_host_disk", "size": 4, "supported_instance_interface_types": ["virtio_blk"]}], "group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "id": "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0", "name": "my-host-group", "resource_type": "dedicated_host_group"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "instance_placement_enabled": true, "instances": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}], "lifecycle_state": "stable", "memory": 128, "name": "my-host", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "mx2-host-152x1216"}, "provisionable": false, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "dedicated_host", "socket_count": 4, "state": "available", "supported_instance_profiles": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16", "name": "bc1-4x16"}], "vcpu": {"architecture": "amd64", "count": 4}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateDedicatedHost successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateDedicatedHost(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the DedicatedHostPatch model
				dedicatedHostPatchModel := new(vpcv1.DedicatedHostPatch)
				dedicatedHostPatchModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPatchModel.Name = core.StringPtr("my-host")
				dedicatedHostPatchModelAsPatch, asPatchErr := dedicatedHostPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostOptions model
				updateDedicatedHostOptionsModel := new(vpcv1.UpdateDedicatedHostOptions)
				updateDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostOptionsModel.DedicatedHostPatch = dedicatedHostPatchModelAsPatch
				updateDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateDedicatedHost(updateDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateDedicatedHost with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostPatch model
				dedicatedHostPatchModel := new(vpcv1.DedicatedHostPatch)
				dedicatedHostPatchModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPatchModel.Name = core.StringPtr("my-host")
				dedicatedHostPatchModelAsPatch, asPatchErr := dedicatedHostPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostOptions model
				updateDedicatedHostOptionsModel := new(vpcv1.UpdateDedicatedHostOptions)
				updateDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostOptionsModel.DedicatedHostPatch = dedicatedHostPatchModelAsPatch
				updateDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateDedicatedHost(updateDedicatedHostOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateDedicatedHostOptions model with no property values
				updateDedicatedHostOptionsModelNew := new(vpcv1.UpdateDedicatedHostOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateDedicatedHost(updateDedicatedHostOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateDedicatedHost successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DedicatedHostPatch model
				dedicatedHostPatchModel := new(vpcv1.DedicatedHostPatch)
				dedicatedHostPatchModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPatchModel.Name = core.StringPtr("my-host")
				dedicatedHostPatchModelAsPatch, asPatchErr := dedicatedHostPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateDedicatedHostOptions model
				updateDedicatedHostOptionsModel := new(vpcv1.UpdateDedicatedHostOptions)
				updateDedicatedHostOptionsModel.ID = core.StringPtr("testString")
				updateDedicatedHostOptionsModel.DedicatedHostPatch = dedicatedHostPatchModelAsPatch
				updateDedicatedHostOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateDedicatedHost(updateDedicatedHostOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVolumeProfiles(listVolumeProfilesOptions *ListVolumeProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listVolumeProfilesPath := "/volume/profiles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVolumeProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVolumeProfiles with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVolumeProfiles(listVolumeProfilesOptions *ListVolumeProfilesOptions)`, func() {
		version := "testString"
		listVolumeProfilesPath := "/volume/profiles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVolumeProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "profiles": [{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListVolumeProfiles successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVolumeProfilesWithContext(ctx, listVolumeProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVolumeProfilesWithContext(ctx, listVolumeProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVolumeProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "profiles": [{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListVolumeProfiles successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVolumeProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVolumeProfiles with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVolumeProfiles successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := new(vpcv1.ListVolumeProfilesOptions)
				listVolumeProfilesOptionsModel.Start = core.StringPtr("testString")
				listVolumeProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumeProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVolumeProfiles(listVolumeProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolumeProfile(getVolumeProfileOptions *GetVolumeProfileOptions) - Operation response error`, func() {
		version := "testString"
		getVolumeProfilePath := "/volume/profiles/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumeProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVolumeProfile with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolumeProfile(getVolumeProfileOptions *GetVolumeProfileOptions)`, func() {
		version := "testString"
		getVolumeProfilePath := "/volume/profiles/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumeProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}`)
				}))
			})
			It(`Invoke GetVolumeProfile successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVolumeProfileWithContext(ctx, getVolumeProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVolumeProfileWithContext(ctx, getVolumeProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumeProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"family": "tiered", "href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}`)
				}))
			})
			It(`Invoke GetVolumeProfile successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVolumeProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVolumeProfile with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVolumeProfileOptions model with no property values
				getVolumeProfileOptionsModelNew := new(vpcv1.GetVolumeProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVolumeProfile(getVolumeProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVolumeProfile successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVolumeProfileOptions model
				getVolumeProfileOptionsModel := new(vpcv1.GetVolumeProfileOptions)
				getVolumeProfileOptionsModel.Name = core.StringPtr("testString")
				getVolumeProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVolumeProfile(getVolumeProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVolumes(listVolumesOptions *ListVolumesOptions) - Operation response error`, func() {
		version := "testString"
		listVolumesPath := "/volumes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVolumesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVolumes with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVolumes(listVolumesOptions *ListVolumesOptions)`, func() {
		version := "testString"
		listVolumesPath := "/volumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVolumesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"capacity": 100, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "volume_attachments": [{"delete_volume_on_instance_delete": true, "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListVolumes successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVolumesWithContext(ctx, listVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVolumesWithContext(ctx, listVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVolumesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["zone.name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volumes?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "volumes": [{"capacity": 100, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "volume_attachments": [{"delete_volume_on_instance_delete": true, "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}]}`)
				}))
			})
			It(`Invoke ListVolumes successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVolumes(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVolumes with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVolumes successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := new(vpcv1.ListVolumesOptions)
				listVolumesOptionsModel.Start = core.StringPtr("testString")
				listVolumesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVolumesOptionsModel.Name = core.StringPtr("testString")
				listVolumesOptionsModel.ZoneName = core.StringPtr("testString")
				listVolumesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVolumes(listVolumesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVolume(createVolumeOptions *CreateVolumeOptions) - Operation response error`, func() {
		version := "testString"
		createVolumePath := "/volumes"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVolumePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVolume with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVolume(createVolumeOptions *CreateVolumeOptions)`, func() {
		version := "testString"
		createVolumePath := "/volumes"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVolumePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"capacity": 100, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "volume_attachments": [{"delete_volume_on_instance_delete": true, "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVolume successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateVolumeWithContext(ctx, createVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateVolumeWithContext(ctx, createVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVolumePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"capacity": 100, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "volume_attachments": [{"delete_volume_on_instance_delete": true, "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateVolume successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateVolume with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVolumeOptions model with no property values
				createVolumeOptionsModelNew := new(vpcv1.CreateVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateVolume(createVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateVolume successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				volumeProfileIdentityModel.Name = core.StringPtr("5iops-tier")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel

				// Construct an instance of the CreateVolumeOptions model
				createVolumeOptionsModel := new(vpcv1.CreateVolumeOptions)
				createVolumeOptionsModel.VolumePrototype = volumePrototypeModel
				createVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateVolume(createVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteVolume(deleteVolumeOptions *DeleteVolumeOptions)`, func() {
		version := "testString"
		deleteVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVolumePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteVolume successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVolumeOptions model
				deleteVolumeOptionsModel := new(vpcv1.DeleteVolumeOptions)
				deleteVolumeOptionsModel.ID = core.StringPtr("testString")
				deleteVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteVolume(deleteVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVolume with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteVolumeOptions model
				deleteVolumeOptionsModel := new(vpcv1.DeleteVolumeOptions)
				deleteVolumeOptionsModel.ID = core.StringPtr("testString")
				deleteVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteVolume(deleteVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVolumeOptions model with no property values
				deleteVolumeOptionsModelNew := new(vpcv1.DeleteVolumeOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteVolume(deleteVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolume(getVolumeOptions *GetVolumeOptions) - Operation response error`, func() {
		version := "testString"
		getVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVolume with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVolume(getVolumeOptions *GetVolumeOptions)`, func() {
		version := "testString"
		getVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": 100, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "volume_attachments": [{"delete_volume_on_instance_delete": true, "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVolume successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVolumeWithContext(ctx, getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVolumeWithContext(ctx, getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVolumePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": 100, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "volume_attachments": [{"delete_volume_on_instance_delete": true, "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetVolume successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVolume with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVolumeOptions model with no property values
				getVolumeOptionsModelNew := new(vpcv1.GetVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVolume(getVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVolume successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVolumeOptions model
				getVolumeOptionsModel := new(vpcv1.GetVolumeOptions)
				getVolumeOptionsModel.ID = core.StringPtr("testString")
				getVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVolume(getVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVolume(updateVolumeOptions *UpdateVolumeOptions) - Operation response error`, func() {
		version := "testString"
		updateVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVolumePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVolume with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumePatch model
				volumePatchModel := new(vpcv1.VolumePatch)
				volumePatchModel.Name = core.StringPtr("my-volume")
				volumePatchModelAsPatch, asPatchErr := volumePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.VolumePatch = volumePatchModelAsPatch
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVolume(updateVolumeOptions *UpdateVolumeOptions)`, func() {
		version := "testString"
		updateVolumePath := "/volumes/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVolumePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": 100, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "volume_attachments": [{"delete_volume_on_instance_delete": true, "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVolume successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VolumePatch model
				volumePatchModel := new(vpcv1.VolumePatch)
				volumePatchModel.Name = core.StringPtr("my-volume")
				volumePatchModelAsPatch, asPatchErr := volumePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.VolumePatch = volumePatchModelAsPatch
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateVolumeWithContext(ctx, updateVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateVolumeWithContext(ctx, updateVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVolumePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"capacity": 100, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "encryption": "provider_managed", "encryption_key": {"crn": "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "id": "1a6b7274-678d-4dfb-8981-c71dd9d4daa5", "iops": 10000, "name": "my-volume", "profile": {"href": "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose", "name": "general-purpose"}, "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "status_reasons": [{"code": "encryption_key_deleted", "message": "Message", "more_info": "https://cloud.ibm.com/docs/key-protect?topic=key-protect-restore-keys"}], "volume_attachments": [{"delete_volume_on_instance_delete": true, "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "device": {"id": "80b3e36e-41f4-40e9-bd56-beae81792a68"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/volume_attachments/82cbf856-9cbb-45fb-b62f-d7bcef32399a", "id": "82cbf856-9cbb-45fb-b62f-d7bcef32399a", "instance": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "name": "my-volume-attachment", "type": "boot"}], "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateVolume successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateVolume(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VolumePatch model
				volumePatchModel := new(vpcv1.VolumePatch)
				volumePatchModel.Name = core.StringPtr("my-volume")
				volumePatchModelAsPatch, asPatchErr := volumePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.VolumePatch = volumePatchModelAsPatch
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateVolume with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumePatch model
				volumePatchModel := new(vpcv1.VolumePatch)
				volumePatchModel.Name = core.StringPtr("my-volume")
				volumePatchModelAsPatch, asPatchErr := volumePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.VolumePatch = volumePatchModelAsPatch
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVolumeOptions model with no property values
				updateVolumeOptionsModelNew := new(vpcv1.UpdateVolumeOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateVolume(updateVolumeOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateVolume successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VolumePatch model
				volumePatchModel := new(vpcv1.VolumePatch)
				volumePatchModel.Name = core.StringPtr("my-volume")
				volumePatchModelAsPatch, asPatchErr := volumePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVolumeOptions model
				updateVolumeOptionsModel := new(vpcv1.UpdateVolumeOptions)
				updateVolumeOptionsModel.ID = core.StringPtr("testString")
				updateVolumeOptionsModel.VolumePatch = volumePatchModelAsPatch
				updateVolumeOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateVolume(updateVolumeOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRegions(listRegionsOptions *ListRegionsOptions) - Operation response error`, func() {
		version := "testString"
		listRegionsPath := "/regions"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRegionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListRegions with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRegions(listRegionsOptions *ListRegionsOptions)`, func() {
		version := "testString"
		listRegionsPath := "/regions"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRegionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"regions": [{"endpoint": "Endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}]}`)
				}))
			})
			It(`Invoke ListRegions successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListRegionsWithContext(ctx, listRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListRegionsWithContext(ctx, listRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRegionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"regions": [{"endpoint": "Endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}]}`)
				}))
			})
			It(`Invoke ListRegions successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListRegions(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListRegions with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListRegions successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := new(vpcv1.ListRegionsOptions)
				listRegionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListRegions(listRegionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRegion(getRegionOptions *GetRegionOptions) - Operation response error`, func() {
		version := "testString"
		getRegionPath := "/regions/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRegionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRegion with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRegion(getRegionOptions *GetRegionOptions)`, func() {
		version := "testString"
		getRegionPath := "/regions/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRegionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"endpoint": "Endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}`)
				}))
			})
			It(`Invoke GetRegion successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetRegionWithContext(ctx, getRegionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetRegionWithContext(ctx, getRegionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRegionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"endpoint": "Endpoint", "href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south", "status": "available"}`)
				}))
			})
			It(`Invoke GetRegion successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetRegion(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetRegion with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRegionOptions model with no property values
				getRegionOptionsModelNew := new(vpcv1.GetRegionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetRegion(getRegionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetRegion successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetRegionOptions model
				getRegionOptionsModel := new(vpcv1.GetRegionOptions)
				getRegionOptionsModel.Name = core.StringPtr("testString")
				getRegionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetRegion(getRegionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRegionZones(listRegionZonesOptions *ListRegionZonesOptions) - Operation response error`, func() {
		version := "testString"
		listRegionZonesPath := "/regions/testString/zones"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRegionZonesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListRegionZones with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListRegionZonesOptions model
				listRegionZonesOptionsModel := new(vpcv1.ListRegionZonesOptions)
				listRegionZonesOptionsModel.RegionName = core.StringPtr("testString")
				listRegionZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListRegionZones(listRegionZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListRegionZones(listRegionZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListRegionZones(listRegionZonesOptions *ListRegionZonesOptions)`, func() {
		version := "testString"
		listRegionZonesPath := "/regions/testString/zones"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRegionZonesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"zones": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}]}`)
				}))
			})
			It(`Invoke ListRegionZones successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListRegionZonesOptions model
				listRegionZonesOptionsModel := new(vpcv1.ListRegionZonesOptions)
				listRegionZonesOptionsModel.RegionName = core.StringPtr("testString")
				listRegionZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListRegionZonesWithContext(ctx, listRegionZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListRegionZones(listRegionZonesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListRegionZonesWithContext(ctx, listRegionZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listRegionZonesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"zones": [{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}]}`)
				}))
			})
			It(`Invoke ListRegionZones successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListRegionZones(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListRegionZonesOptions model
				listRegionZonesOptionsModel := new(vpcv1.ListRegionZonesOptions)
				listRegionZonesOptionsModel.RegionName = core.StringPtr("testString")
				listRegionZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListRegionZones(listRegionZonesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListRegionZones with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListRegionZonesOptions model
				listRegionZonesOptionsModel := new(vpcv1.ListRegionZonesOptions)
				listRegionZonesOptionsModel.RegionName = core.StringPtr("testString")
				listRegionZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListRegionZones(listRegionZonesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListRegionZonesOptions model with no property values
				listRegionZonesOptionsModelNew := new(vpcv1.ListRegionZonesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListRegionZones(listRegionZonesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListRegionZones successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListRegionZonesOptions model
				listRegionZonesOptionsModel := new(vpcv1.ListRegionZonesOptions)
				listRegionZonesOptionsModel.RegionName = core.StringPtr("testString")
				listRegionZonesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListRegionZones(listRegionZonesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRegionZone(getRegionZoneOptions *GetRegionZoneOptions) - Operation response error`, func() {
		version := "testString"
		getRegionZonePath := "/regions/testString/zones/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRegionZonePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetRegionZone with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetRegionZoneOptions model
				getRegionZoneOptionsModel := new(vpcv1.GetRegionZoneOptions)
				getRegionZoneOptionsModel.RegionName = core.StringPtr("testString")
				getRegionZoneOptionsModel.Name = core.StringPtr("testString")
				getRegionZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetRegionZone(getRegionZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetRegionZone(getRegionZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetRegionZone(getRegionZoneOptions *GetRegionZoneOptions)`, func() {
		version := "testString"
		getRegionZonePath := "/regions/testString/zones/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRegionZonePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}`)
				}))
			})
			It(`Invoke GetRegionZone successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetRegionZoneOptions model
				getRegionZoneOptionsModel := new(vpcv1.GetRegionZoneOptions)
				getRegionZoneOptionsModel.RegionName = core.StringPtr("testString")
				getRegionZoneOptionsModel.Name = core.StringPtr("testString")
				getRegionZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetRegionZoneWithContext(ctx, getRegionZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetRegionZone(getRegionZoneOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetRegionZoneWithContext(ctx, getRegionZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getRegionZonePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1", "region": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south", "name": "us-south"}, "status": "available"}`)
				}))
			})
			It(`Invoke GetRegionZone successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetRegionZone(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetRegionZoneOptions model
				getRegionZoneOptionsModel := new(vpcv1.GetRegionZoneOptions)
				getRegionZoneOptionsModel.RegionName = core.StringPtr("testString")
				getRegionZoneOptionsModel.Name = core.StringPtr("testString")
				getRegionZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetRegionZone(getRegionZoneOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetRegionZone with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetRegionZoneOptions model
				getRegionZoneOptionsModel := new(vpcv1.GetRegionZoneOptions)
				getRegionZoneOptionsModel.RegionName = core.StringPtr("testString")
				getRegionZoneOptionsModel.Name = core.StringPtr("testString")
				getRegionZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetRegionZone(getRegionZoneOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetRegionZoneOptions model with no property values
				getRegionZoneOptionsModelNew := new(vpcv1.GetRegionZoneOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetRegionZone(getRegionZoneOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetRegionZone successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetRegionZoneOptions model
				getRegionZoneOptionsModel := new(vpcv1.GetRegionZoneOptions)
				getRegionZoneOptionsModel.RegionName = core.StringPtr("testString")
				getRegionZoneOptionsModel.Name = core.StringPtr("testString")
				getRegionZoneOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetRegionZone(getRegionZoneOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListPublicGateways(listPublicGatewaysOptions *ListPublicGatewaysOptions) - Operation response error`, func() {
		version := "testString"
		listPublicGatewaysPath := "/public_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listPublicGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListPublicGateways with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listPublicGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListPublicGateways(listPublicGatewaysOptions *ListPublicGatewaysOptions)`, func() {
		version := "testString"
		listPublicGatewaysPath := "/public_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listPublicGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "public_gateways": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListPublicGateways successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listPublicGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListPublicGatewaysWithContext(ctx, listPublicGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListPublicGatewaysWithContext(ctx, listPublicGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listPublicGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "public_gateways": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListPublicGateways successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListPublicGateways(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listPublicGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListPublicGateways with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listPublicGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListPublicGateways successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := new(vpcv1.ListPublicGatewaysOptions)
				listPublicGatewaysOptionsModel.Start = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listPublicGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listPublicGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListPublicGateways(listPublicGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreatePublicGateway(createPublicGatewayOptions *CreatePublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		createPublicGatewayPath := "/public_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPublicGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreatePublicGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayFloatingIPPrototypeModel := new(vpcv1.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayFloatingIPPrototypeModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.VPC = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.FloatingIP = publicGatewayFloatingIPPrototypeModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreatePublicGateway(createPublicGatewayOptions *CreatePublicGatewayOptions)`, func() {
		version := "testString"
		createPublicGatewayPath := "/public_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPublicGatewayPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreatePublicGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayFloatingIPPrototypeModel := new(vpcv1.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayFloatingIPPrototypeModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.VPC = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.FloatingIP = publicGatewayFloatingIPPrototypeModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreatePublicGatewayWithContext(ctx, createPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreatePublicGatewayWithContext(ctx, createPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createPublicGatewayPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreatePublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreatePublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayFloatingIPPrototypeModel := new(vpcv1.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayFloatingIPPrototypeModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.VPC = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.FloatingIP = publicGatewayFloatingIPPrototypeModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreatePublicGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayFloatingIPPrototypeModel := new(vpcv1.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayFloatingIPPrototypeModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.VPC = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.FloatingIP = publicGatewayFloatingIPPrototypeModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreatePublicGatewayOptions model with no property values
				createPublicGatewayOptionsModelNew := new(vpcv1.CreatePublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreatePublicGateway(createPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreatePublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayFloatingIPPrototypeModel := new(vpcv1.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID)
				publicGatewayFloatingIPPrototypeModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreatePublicGatewayOptions model
				createPublicGatewayOptionsModel := new(vpcv1.CreatePublicGatewayOptions)
				createPublicGatewayOptionsModel.VPC = vpcIdentityModel
				createPublicGatewayOptionsModel.Zone = zoneIdentityModel
				createPublicGatewayOptionsModel.FloatingIP = publicGatewayFloatingIPPrototypeModel
				createPublicGatewayOptionsModel.Name = core.StringPtr("my-public-gateway")
				createPublicGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreatePublicGateway(createPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeletePublicGateway(deletePublicGatewayOptions *DeletePublicGatewayOptions)`, func() {
		version := "testString"
		deletePublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deletePublicGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeletePublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeletePublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeletePublicGatewayOptions model
				deletePublicGatewayOptionsModel := new(vpcv1.DeletePublicGatewayOptions)
				deletePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				deletePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeletePublicGateway(deletePublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeletePublicGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeletePublicGatewayOptions model
				deletePublicGatewayOptionsModel := new(vpcv1.DeletePublicGatewayOptions)
				deletePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				deletePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeletePublicGateway(deletePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeletePublicGatewayOptions model with no property values
				deletePublicGatewayOptionsModelNew := new(vpcv1.DeletePublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeletePublicGateway(deletePublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetPublicGateway(getPublicGatewayOptions *GetPublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getPublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetPublicGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetPublicGateway(getPublicGatewayOptions *GetPublicGatewayOptions)`, func() {
		version := "testString"
		getPublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetPublicGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetPublicGatewayWithContext(ctx, getPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetPublicGatewayWithContext(ctx, getPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getPublicGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetPublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetPublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetPublicGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetPublicGatewayOptions model with no property values
				getPublicGatewayOptionsModelNew := new(vpcv1.GetPublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetPublicGateway(getPublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetPublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetPublicGatewayOptions model
				getPublicGatewayOptionsModel := new(vpcv1.GetPublicGatewayOptions)
				getPublicGatewayOptionsModel.ID = core.StringPtr("testString")
				getPublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetPublicGateway(getPublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdatePublicGateway(updatePublicGatewayOptions *UpdatePublicGatewayOptions) - Operation response error`, func() {
		version := "testString"
		updatePublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updatePublicGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdatePublicGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayPatch model
				publicGatewayPatchModel := new(vpcv1.PublicGatewayPatch)
				publicGatewayPatchModel.Name = core.StringPtr("my-public-gateway")
				publicGatewayPatchModelAsPatch, asPatchErr := publicGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.PublicGatewayPatch = publicGatewayPatchModelAsPatch
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdatePublicGateway(updatePublicGatewayOptions *UpdatePublicGatewayOptions)`, func() {
		version := "testString"
		updatePublicGatewayPath := "/public_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updatePublicGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdatePublicGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the PublicGatewayPatch model
				publicGatewayPatchModel := new(vpcv1.PublicGatewayPatch)
				publicGatewayPatchModel.Name = core.StringPtr("my-public-gateway")
				publicGatewayPatchModelAsPatch, asPatchErr := publicGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.PublicGatewayPatch = publicGatewayPatchModelAsPatch
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdatePublicGatewayWithContext(ctx, updatePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdatePublicGatewayWithContext(ctx, updatePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updatePublicGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241", "floating_ip": {"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241", "id": "dc5431ef-1fc6-4861-adc9-a59d077d1241", "name": "my-public-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "public_gateway", "status": "available", "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdatePublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdatePublicGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the PublicGatewayPatch model
				publicGatewayPatchModel := new(vpcv1.PublicGatewayPatch)
				publicGatewayPatchModel.Name = core.StringPtr("my-public-gateway")
				publicGatewayPatchModelAsPatch, asPatchErr := publicGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.PublicGatewayPatch = publicGatewayPatchModelAsPatch
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdatePublicGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayPatch model
				publicGatewayPatchModel := new(vpcv1.PublicGatewayPatch)
				publicGatewayPatchModel.Name = core.StringPtr("my-public-gateway")
				publicGatewayPatchModelAsPatch, asPatchErr := publicGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.PublicGatewayPatch = publicGatewayPatchModelAsPatch
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdatePublicGatewayOptions model with no property values
				updatePublicGatewayOptionsModelNew := new(vpcv1.UpdatePublicGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdatePublicGateway(updatePublicGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdatePublicGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the PublicGatewayPatch model
				publicGatewayPatchModel := new(vpcv1.PublicGatewayPatch)
				publicGatewayPatchModel.Name = core.StringPtr("my-public-gateway")
				publicGatewayPatchModelAsPatch, asPatchErr := publicGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdatePublicGatewayOptions model
				updatePublicGatewayOptionsModel := new(vpcv1.UpdatePublicGatewayOptions)
				updatePublicGatewayOptionsModel.ID = core.StringPtr("testString")
				updatePublicGatewayOptionsModel.PublicGatewayPatch = publicGatewayPatchModelAsPatch
				updatePublicGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdatePublicGateway(updatePublicGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListFloatingIps(listFloatingIpsOptions *ListFloatingIpsOptions) - Operation response error`, func() {
		version := "testString"
		listFloatingIpsPath := "/floating_ips"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListFloatingIps with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFloatingIpsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListFloatingIps(listFloatingIpsOptions *ListFloatingIpsOptions)`, func() {
		version := "testString"
		listFloatingIpsPath := "/floating_ips"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListFloatingIps successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFloatingIpsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListFloatingIpsWithContext(ctx, listFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListFloatingIpsWithContext(ctx, listFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFloatingIpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?limit=20"}, "floating_ips": [{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListFloatingIps successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListFloatingIps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFloatingIpsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListFloatingIps with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFloatingIpsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListFloatingIps successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := new(vpcv1.ListFloatingIpsOptions)
				listFloatingIpsOptionsModel.Start = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFloatingIpsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFloatingIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListFloatingIps(listFloatingIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateFloatingIP(createFloatingIPOptions *CreateFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		createFloatingIPPath := "/floating_ips"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFloatingIPPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateFloatingIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIPPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIPPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIPPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateFloatingIPOptions model
				createFloatingIPOptionsModel := new(vpcv1.CreateFloatingIPOptions)
				createFloatingIPOptionsModel.FloatingIPPrototype = floatingIPPrototypeModel
				createFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateFloatingIP(createFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateFloatingIP(createFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateFloatingIP(createFloatingIPOptions *CreateFloatingIPOptions)`, func() {
		version := "testString"
		createFloatingIPPath := "/floating_ips"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFloatingIPPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateFloatingIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIPPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIPPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIPPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateFloatingIPOptions model
				createFloatingIPOptionsModel := new(vpcv1.CreateFloatingIPOptions)
				createFloatingIPOptionsModel.FloatingIPPrototype = floatingIPPrototypeModel
				createFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateFloatingIPWithContext(ctx, createFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateFloatingIP(createFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateFloatingIPWithContext(ctx, createFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFloatingIPPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke CreateFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIPPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIPPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIPPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateFloatingIPOptions model
				createFloatingIPOptionsModel := new(vpcv1.CreateFloatingIPOptions)
				createFloatingIPOptionsModel.FloatingIPPrototype = floatingIPPrototypeModel
				createFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateFloatingIP(createFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateFloatingIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIPPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIPPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIPPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateFloatingIPOptions model
				createFloatingIPOptionsModel := new(vpcv1.CreateFloatingIPOptions)
				createFloatingIPOptionsModel.FloatingIPPrototype = floatingIPPrototypeModel
				createFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateFloatingIP(createFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateFloatingIPOptions model with no property values
				createFloatingIPOptionsModelNew := new(vpcv1.CreateFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateFloatingIP(createFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				zoneIdentityModel.Name = core.StringPtr("us-south-1")

				// Construct an instance of the FloatingIPPrototypeFloatingIPByZone model
				floatingIPPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByZone)
				floatingIPPrototypeModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIPPrototypeModel.Zone = zoneIdentityModel

				// Construct an instance of the CreateFloatingIPOptions model
				createFloatingIPOptionsModel := new(vpcv1.CreateFloatingIPOptions)
				createFloatingIPOptionsModel.FloatingIPPrototype = floatingIPPrototypeModel
				createFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateFloatingIP(createFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteFloatingIP(deleteFloatingIPOptions *DeleteFloatingIPOptions)`, func() {
		version := "testString"
		deleteFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteFloatingIPPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFloatingIPOptions model
				deleteFloatingIPOptionsModel := new(vpcv1.DeleteFloatingIPOptions)
				deleteFloatingIPOptionsModel.ID = core.StringPtr("testString")
				deleteFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteFloatingIP(deleteFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFloatingIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteFloatingIPOptions model
				deleteFloatingIPOptionsModel := new(vpcv1.DeleteFloatingIPOptions)
				deleteFloatingIPOptionsModel.ID = core.StringPtr("testString")
				deleteFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteFloatingIP(deleteFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFloatingIPOptions model with no property values
				deleteFloatingIPOptionsModelNew := new(vpcv1.DeleteFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteFloatingIP(deleteFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFloatingIP(getFloatingIPOptions *GetFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		getFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFloatingIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetFloatingIPOptions model
				getFloatingIPOptionsModel := new(vpcv1.GetFloatingIPOptions)
				getFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetFloatingIP(getFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetFloatingIP(getFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFloatingIP(getFloatingIPOptions *GetFloatingIPOptions)`, func() {
		version := "testString"
		getFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetFloatingIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetFloatingIPOptions model
				getFloatingIPOptionsModel := new(vpcv1.GetFloatingIPOptions)
				getFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetFloatingIPWithContext(ctx, getFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetFloatingIP(getFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetFloatingIPWithContext(ctx, getFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFloatingIPPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke GetFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFloatingIPOptions model
				getFloatingIPOptionsModel := new(vpcv1.GetFloatingIPOptions)
				getFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetFloatingIP(getFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetFloatingIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetFloatingIPOptions model
				getFloatingIPOptionsModel := new(vpcv1.GetFloatingIPOptions)
				getFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetFloatingIP(getFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFloatingIPOptions model with no property values
				getFloatingIPOptionsModelNew := new(vpcv1.GetFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetFloatingIP(getFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetFloatingIPOptions model
				getFloatingIPOptionsModel := new(vpcv1.GetFloatingIPOptions)
				getFloatingIPOptionsModel.ID = core.StringPtr("testString")
				getFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetFloatingIP(getFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFloatingIP(updateFloatingIPOptions *UpdateFloatingIPOptions) - Operation response error`, func() {
		version := "testString"
		updateFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFloatingIPPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateFloatingIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPPatchTargetNetworkInterfaceIdentityModel := new(vpcv1.FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				floatingIPPatchTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("69e55145-cc7d-4d8e-9e1f-cc3fb60b1793")

				// Construct an instance of the FloatingIPPatch model
				floatingIPPatchModel := new(vpcv1.FloatingIPPatch)
				floatingIPPatchModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPatchModel.Target = floatingIPPatchTargetNetworkInterfaceIdentityModel
				floatingIPPatchModelAsPatch, asPatchErr := floatingIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFloatingIPOptions model
				updateFloatingIPOptionsModel := new(vpcv1.UpdateFloatingIPOptions)
				updateFloatingIPOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIPOptionsModel.FloatingIPPatch = floatingIPPatchModelAsPatch
				updateFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateFloatingIP(updateFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateFloatingIP(updateFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFloatingIP(updateFloatingIPOptions *UpdateFloatingIPOptions)`, func() {
		version := "testString"
		updateFloatingIPPath := "/floating_ips/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFloatingIPPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateFloatingIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPPatchTargetNetworkInterfaceIdentityModel := new(vpcv1.FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				floatingIPPatchTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("69e55145-cc7d-4d8e-9e1f-cc3fb60b1793")

				// Construct an instance of the FloatingIPPatch model
				floatingIPPatchModel := new(vpcv1.FloatingIPPatch)
				floatingIPPatchModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPatchModel.Target = floatingIPPatchTargetNetworkInterfaceIdentityModel
				floatingIPPatchModelAsPatch, asPatchErr := floatingIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFloatingIPOptions model
				updateFloatingIPOptionsModel := new(vpcv1.UpdateFloatingIPOptions)
				updateFloatingIPOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIPOptionsModel.FloatingIPPatch = floatingIPPatchModelAsPatch
				updateFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateFloatingIPWithContext(ctx, updateFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateFloatingIP(updateFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateFloatingIPWithContext(ctx, updateFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFloatingIPPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "203.0.113.1", "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "status": "available", "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}, "zone": {"href": "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1", "name": "us-south-1"}}`)
				}))
			})
			It(`Invoke UpdateFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateFloatingIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPPatchTargetNetworkInterfaceIdentityModel := new(vpcv1.FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				floatingIPPatchTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("69e55145-cc7d-4d8e-9e1f-cc3fb60b1793")

				// Construct an instance of the FloatingIPPatch model
				floatingIPPatchModel := new(vpcv1.FloatingIPPatch)
				floatingIPPatchModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPatchModel.Target = floatingIPPatchTargetNetworkInterfaceIdentityModel
				floatingIPPatchModelAsPatch, asPatchErr := floatingIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFloatingIPOptions model
				updateFloatingIPOptionsModel := new(vpcv1.UpdateFloatingIPOptions)
				updateFloatingIPOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIPOptionsModel.FloatingIPPatch = floatingIPPatchModelAsPatch
				updateFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateFloatingIP(updateFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateFloatingIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPPatchTargetNetworkInterfaceIdentityModel := new(vpcv1.FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				floatingIPPatchTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("69e55145-cc7d-4d8e-9e1f-cc3fb60b1793")

				// Construct an instance of the FloatingIPPatch model
				floatingIPPatchModel := new(vpcv1.FloatingIPPatch)
				floatingIPPatchModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPatchModel.Target = floatingIPPatchTargetNetworkInterfaceIdentityModel
				floatingIPPatchModelAsPatch, asPatchErr := floatingIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFloatingIPOptions model
				updateFloatingIPOptionsModel := new(vpcv1.UpdateFloatingIPOptions)
				updateFloatingIPOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIPOptionsModel.FloatingIPPatch = floatingIPPatchModelAsPatch
				updateFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateFloatingIP(updateFloatingIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateFloatingIPOptions model with no property values
				updateFloatingIPOptionsModelNew := new(vpcv1.UpdateFloatingIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateFloatingIP(updateFloatingIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateFloatingIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPPatchTargetNetworkInterfaceIdentityModel := new(vpcv1.FloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				floatingIPPatchTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("69e55145-cc7d-4d8e-9e1f-cc3fb60b1793")

				// Construct an instance of the FloatingIPPatch model
				floatingIPPatchModel := new(vpcv1.FloatingIPPatch)
				floatingIPPatchModel.Name = core.StringPtr("my-floating-ip")
				floatingIPPatchModel.Target = floatingIPPatchTargetNetworkInterfaceIdentityModel
				floatingIPPatchModelAsPatch, asPatchErr := floatingIPPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFloatingIPOptions model
				updateFloatingIPOptionsModel := new(vpcv1.UpdateFloatingIPOptions)
				updateFloatingIPOptionsModel.ID = core.StringPtr("testString")
				updateFloatingIPOptionsModel.FloatingIPPatch = floatingIPPatchModelAsPatch
				updateFloatingIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateFloatingIP(updateFloatingIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNetworkAcls(listNetworkAclsOptions *ListNetworkAclsOptions) - Operation response error`, func() {
		version := "testString"
		listNetworkAclsPath := "/network_acls"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNetworkAclsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNetworkAcls with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkAclsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNetworkAcls(listNetworkAclsOptions *ListNetworkAclsOptions)`, func() {
		version := "testString"
		listNetworkAclsPath := "/network_acls"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNetworkAclsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "network_acls": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListNetworkAcls successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkAclsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListNetworkAclsWithContext(ctx, listNetworkAclsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListNetworkAclsWithContext(ctx, listNetworkAclsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNetworkAclsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?limit=20"}, "limit": 20, "network_acls": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListNetworkAcls successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListNetworkAcls(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkAclsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListNetworkAcls with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkAclsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListNetworkAcls successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := new(vpcv1.ListNetworkAclsOptions)
				listNetworkAclsOptionsModel.Start = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkAclsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listNetworkAclsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListNetworkAcls(listNetworkAclsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkACL(createNetworkACLOptions *CreateNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		createNetworkACLPath := "/network_acls"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createNetworkACLPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateNetworkACL with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp)
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("icmp")
				networkACLRulePrototypeNetworkACLContextModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkACLPrototypeModel.VPC = vpcIdentityModel
				networkACLPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := new(vpcv1.CreateNetworkACLOptions)
				createNetworkACLOptionsModel.NetworkACLPrototype = networkACLPrototypeModel
				createNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateNetworkACL(createNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateNetworkACL(createNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkACL(createNetworkACLOptions *CreateNetworkACLOptions)`, func() {
		version := "testString"
		createNetworkACLPath := "/network_acls"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createNetworkACLPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateNetworkACL successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp)
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("icmp")
				networkACLRulePrototypeNetworkACLContextModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkACLPrototypeModel.VPC = vpcIdentityModel
				networkACLPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := new(vpcv1.CreateNetworkACLOptions)
				createNetworkACLOptionsModel.NetworkACLPrototype = networkACLPrototypeModel
				createNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateNetworkACLWithContext(ctx, createNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateNetworkACL(createNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateNetworkACLWithContext(ctx, createNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createNetworkACLPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp)
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("icmp")
				networkACLRulePrototypeNetworkACLContextModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkACLPrototypeModel.VPC = vpcIdentityModel
				networkACLPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := new(vpcv1.CreateNetworkACLOptions)
				createNetworkACLOptionsModel.NetworkACLPrototype = networkACLPrototypeModel
				createNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateNetworkACL(createNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateNetworkACL with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp)
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("icmp")
				networkACLRulePrototypeNetworkACLContextModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkACLPrototypeModel.VPC = vpcIdentityModel
				networkACLPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := new(vpcv1.CreateNetworkACLOptions)
				createNetworkACLOptionsModel.NetworkACLPrototype = networkACLPrototypeModel
				createNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateNetworkACL(createNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f0aae929-7047-46d1-92e1-9102b07a7f6f")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp)
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("icmp")
				networkACLRulePrototypeNetworkACLContextModel.Type = core.Int64Ptr(int64(8))

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkACLPrototypeModel.VPC = vpcIdentityModel
				networkACLPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := new(vpcv1.CreateNetworkACLOptions)
				createNetworkACLOptionsModel.NetworkACLPrototype = networkACLPrototypeModel
				createNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateNetworkACL(createNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteNetworkACL(deleteNetworkACLOptions *DeleteNetworkACLOptions)`, func() {
		version := "testString"
		deleteNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteNetworkACLPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteNetworkACLOptions model
				deleteNetworkACLOptionsModel := new(vpcv1.DeleteNetworkACLOptions)
				deleteNetworkACLOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteNetworkACL(deleteNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteNetworkACL with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteNetworkACLOptions model
				deleteNetworkACLOptionsModel := new(vpcv1.DeleteNetworkACLOptions)
				deleteNetworkACLOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteNetworkACL(deleteNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteNetworkACLOptions model with no property values
				deleteNetworkACLOptionsModelNew := new(vpcv1.DeleteNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteNetworkACL(deleteNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkACL(getNetworkACLOptions *GetNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		getNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNetworkACL with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLOptions model
				getNetworkACLOptionsModel := new(vpcv1.GetNetworkACLOptions)
				getNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetNetworkACL(getNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetNetworkACL(getNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkACL(getNetworkACLOptions *GetNetworkACLOptions)`, func() {
		version := "testString"
		getNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetNetworkACL successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetNetworkACLOptions model
				getNetworkACLOptionsModel := new(vpcv1.GetNetworkACLOptions)
				getNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetNetworkACLWithContext(ctx, getNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetNetworkACL(getNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetNetworkACLWithContext(ctx, getNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNetworkACLPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNetworkACLOptions model
				getNetworkACLOptionsModel := new(vpcv1.GetNetworkACLOptions)
				getNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetNetworkACL(getNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetNetworkACL with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLOptions model
				getNetworkACLOptionsModel := new(vpcv1.GetNetworkACLOptions)
				getNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetNetworkACL(getNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNetworkACLOptions model with no property values
				getNetworkACLOptionsModelNew := new(vpcv1.GetNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetNetworkACL(getNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLOptions model
				getNetworkACLOptionsModel := new(vpcv1.GetNetworkACLOptions)
				getNetworkACLOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetNetworkACL(getNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateNetworkACL(updateNetworkACLOptions *UpdateNetworkACLOptions) - Operation response error`, func() {
		version := "testString"
		updateNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateNetworkACLPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateNetworkACL with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLPatch model
				networkACLPatchModel := new(vpcv1.NetworkACLPatch)
				networkACLPatchModel.Name = core.StringPtr("my-network-acl")
				networkACLPatchModelAsPatch, asPatchErr := networkACLPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLOptions model
				updateNetworkACLOptionsModel := new(vpcv1.UpdateNetworkACLOptions)
				updateNetworkACLOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLOptionsModel.NetworkACLPatch = networkACLPatchModelAsPatch
				updateNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateNetworkACL(updateNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateNetworkACL(updateNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateNetworkACL(updateNetworkACLOptions *UpdateNetworkACLOptions)`, func() {
		version := "testString"
		updateNetworkACLPath := "/network_acls/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateNetworkACLPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateNetworkACL successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the NetworkACLPatch model
				networkACLPatchModel := new(vpcv1.NetworkACLPatch)
				networkACLPatchModel.Name = core.StringPtr("my-network-acl")
				networkACLPatchModelAsPatch, asPatchErr := networkACLPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLOptions model
				updateNetworkACLOptionsModel := new(vpcv1.UpdateNetworkACLOptions)
				updateNetworkACLOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLOptionsModel.NetworkACLPatch = networkACLPatchModelAsPatch
				updateNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateNetworkACLWithContext(ctx, updateNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateNetworkACL(updateNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateNetworkACLWithContext(ctx, updateNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateNetworkACLPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf", "id": "a4e28308-8ee7-46ab-8108-9f881f22bdbf", "name": "my-network-acl", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateNetworkACL(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLPatch model
				networkACLPatchModel := new(vpcv1.NetworkACLPatch)
				networkACLPatchModel.Name = core.StringPtr("my-network-acl")
				networkACLPatchModelAsPatch, asPatchErr := networkACLPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLOptions model
				updateNetworkACLOptionsModel := new(vpcv1.UpdateNetworkACLOptions)
				updateNetworkACLOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLOptionsModel.NetworkACLPatch = networkACLPatchModelAsPatch
				updateNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateNetworkACL(updateNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateNetworkACL with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLPatch model
				networkACLPatchModel := new(vpcv1.NetworkACLPatch)
				networkACLPatchModel.Name = core.StringPtr("my-network-acl")
				networkACLPatchModelAsPatch, asPatchErr := networkACLPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLOptions model
				updateNetworkACLOptionsModel := new(vpcv1.UpdateNetworkACLOptions)
				updateNetworkACLOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLOptionsModel.NetworkACLPatch = networkACLPatchModelAsPatch
				updateNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateNetworkACL(updateNetworkACLOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateNetworkACLOptions model with no property values
				updateNetworkACLOptionsModelNew := new(vpcv1.UpdateNetworkACLOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateNetworkACL(updateNetworkACLOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateNetworkACL successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLPatch model
				networkACLPatchModel := new(vpcv1.NetworkACLPatch)
				networkACLPatchModel.Name = core.StringPtr("my-network-acl")
				networkACLPatchModelAsPatch, asPatchErr := networkACLPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLOptions model
				updateNetworkACLOptionsModel := new(vpcv1.UpdateNetworkACLOptions)
				updateNetworkACLOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLOptionsModel.NetworkACLPatch = networkACLPatchModelAsPatch
				updateNetworkACLOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateNetworkACL(updateNetworkACLOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNetworkACLRules(listNetworkACLRulesOptions *ListNetworkACLRulesOptions) - Operation response error`, func() {
		version := "testString"
		listNetworkACLRulesPath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNetworkACLRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["direction"]).To(Equal([]string{"inbound"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListNetworkACLRules with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListNetworkACLRulesOptions model
				listNetworkACLRulesOptionsModel := new(vpcv1.ListNetworkACLRulesOptions)
				listNetworkACLRulesOptionsModel.NetworkACLID = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkACLRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkACLRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListNetworkACLRules(listNetworkACLRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListNetworkACLRules(listNetworkACLRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListNetworkACLRules(listNetworkACLRulesOptions *ListNetworkACLRulesOptions)`, func() {
		version := "testString"
		listNetworkACLRulesPath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNetworkACLRulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["direction"]).To(Equal([]string{"inbound"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListNetworkACLRules successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListNetworkACLRulesOptions model
				listNetworkACLRulesOptionsModel := new(vpcv1.ListNetworkACLRulesOptions)
				listNetworkACLRulesOptionsModel.NetworkACLID = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkACLRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkACLRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListNetworkACLRulesWithContext(ctx, listNetworkACLRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListNetworkACLRules(listNetworkACLRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListNetworkACLRulesWithContext(ctx, listNetworkACLRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listNetworkACLRulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["direction"]).To(Equal([]string{"inbound"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "rules": [{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListNetworkACLRules successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListNetworkACLRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListNetworkACLRulesOptions model
				listNetworkACLRulesOptionsModel := new(vpcv1.ListNetworkACLRulesOptions)
				listNetworkACLRulesOptionsModel.NetworkACLID = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkACLRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkACLRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListNetworkACLRules(listNetworkACLRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListNetworkACLRules with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListNetworkACLRulesOptions model
				listNetworkACLRulesOptionsModel := new(vpcv1.ListNetworkACLRulesOptions)
				listNetworkACLRulesOptionsModel.NetworkACLID = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkACLRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkACLRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListNetworkACLRules(listNetworkACLRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListNetworkACLRulesOptions model with no property values
				listNetworkACLRulesOptionsModelNew := new(vpcv1.ListNetworkACLRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListNetworkACLRules(listNetworkACLRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListNetworkACLRules successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListNetworkACLRulesOptions model
				listNetworkACLRulesOptionsModel := new(vpcv1.ListNetworkACLRulesOptions)
				listNetworkACLRulesOptionsModel.NetworkACLID = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Start = core.StringPtr("testString")
				listNetworkACLRulesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listNetworkACLRulesOptionsModel.Direction = core.StringPtr("inbound")
				listNetworkACLRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListNetworkACLRules(listNetworkACLRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkACLRule(createNetworkACLRuleOptions *CreateNetworkACLRuleOptions) - Operation response error`, func() {
		version := "testString"
		createNetworkACLRulePath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createNetworkACLRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateNetworkACLRule with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID model
				networkACLRuleBeforePrototypeModel := new(vpcv1.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID)
				networkACLRuleBeforePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleBeforePrototypeModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")

				// Construct an instance of the CreateNetworkACLRuleOptions model
				createNetworkACLRuleOptionsModel := new(vpcv1.CreateNetworkACLRuleOptions)
				createNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				createNetworkACLRuleOptionsModel.NetworkACLRulePrototype = networkACLRulePrototypeModel
				createNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateNetworkACLRule(createNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateNetworkACLRule(createNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateNetworkACLRule(createNetworkACLRuleOptions *CreateNetworkACLRuleOptions)`, func() {
		version := "testString"
		createNetworkACLRulePath := "/network_acls/testString/rules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createNetworkACLRulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}`)
				}))
			})
			It(`Invoke CreateNetworkACLRule successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID model
				networkACLRuleBeforePrototypeModel := new(vpcv1.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID)
				networkACLRuleBeforePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleBeforePrototypeModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")

				// Construct an instance of the CreateNetworkACLRuleOptions model
				createNetworkACLRuleOptionsModel := new(vpcv1.CreateNetworkACLRuleOptions)
				createNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				createNetworkACLRuleOptionsModel.NetworkACLRulePrototype = networkACLRulePrototypeModel
				createNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateNetworkACLRuleWithContext(ctx, createNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateNetworkACLRule(createNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateNetworkACLRuleWithContext(ctx, createNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createNetworkACLRulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}`)
				}))
			})
			It(`Invoke CreateNetworkACLRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateNetworkACLRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID model
				networkACLRuleBeforePrototypeModel := new(vpcv1.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID)
				networkACLRuleBeforePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleBeforePrototypeModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")

				// Construct an instance of the CreateNetworkACLRuleOptions model
				createNetworkACLRuleOptionsModel := new(vpcv1.CreateNetworkACLRuleOptions)
				createNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				createNetworkACLRuleOptionsModel.NetworkACLRulePrototype = networkACLRulePrototypeModel
				createNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateNetworkACLRule(createNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateNetworkACLRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID model
				networkACLRuleBeforePrototypeModel := new(vpcv1.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID)
				networkACLRuleBeforePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleBeforePrototypeModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")

				// Construct an instance of the CreateNetworkACLRuleOptions model
				createNetworkACLRuleOptionsModel := new(vpcv1.CreateNetworkACLRuleOptions)
				createNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				createNetworkACLRuleOptionsModel.NetworkACLRulePrototype = networkACLRulePrototypeModel
				createNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateNetworkACLRule(createNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateNetworkACLRuleOptions model with no property values
				createNetworkACLRuleOptionsModelNew := new(vpcv1.CreateNetworkACLRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateNetworkACLRule(createNetworkACLRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateNetworkACLRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID model
				networkACLRuleBeforePrototypeModel := new(vpcv1.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID)
				networkACLRuleBeforePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleBeforePrototypeModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")

				// Construct an instance of the CreateNetworkACLRuleOptions model
				createNetworkACLRuleOptionsModel := new(vpcv1.CreateNetworkACLRuleOptions)
				createNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				createNetworkACLRuleOptionsModel.NetworkACLRulePrototype = networkACLRulePrototypeModel
				createNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateNetworkACLRule(createNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteNetworkACLRule(deleteNetworkACLRuleOptions *DeleteNetworkACLRuleOptions)`, func() {
		version := "testString"
		deleteNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteNetworkACLRulePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteNetworkACLRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteNetworkACLRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteNetworkACLRuleOptions model
				deleteNetworkACLRuleOptionsModel := new(vpcv1.DeleteNetworkACLRuleOptions)
				deleteNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				deleteNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteNetworkACLRule(deleteNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteNetworkACLRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteNetworkACLRuleOptions model
				deleteNetworkACLRuleOptionsModel := new(vpcv1.DeleteNetworkACLRuleOptions)
				deleteNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				deleteNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				deleteNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteNetworkACLRule(deleteNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteNetworkACLRuleOptions model with no property values
				deleteNetworkACLRuleOptionsModelNew := new(vpcv1.DeleteNetworkACLRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteNetworkACLRule(deleteNetworkACLRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkACLRule(getNetworkACLRuleOptions *GetNetworkACLRuleOptions) - Operation response error`, func() {
		version := "testString"
		getNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNetworkACLRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetNetworkACLRule with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLRuleOptions model
				getNetworkACLRuleOptionsModel := new(vpcv1.GetNetworkACLRuleOptions)
				getNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetNetworkACLRule(getNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetNetworkACLRule(getNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetNetworkACLRule(getNetworkACLRuleOptions *GetNetworkACLRuleOptions)`, func() {
		version := "testString"
		getNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNetworkACLRulePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}`)
				}))
			})
			It(`Invoke GetNetworkACLRule successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetNetworkACLRuleOptions model
				getNetworkACLRuleOptionsModel := new(vpcv1.GetNetworkACLRuleOptions)
				getNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetNetworkACLRuleWithContext(ctx, getNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetNetworkACLRule(getNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetNetworkACLRuleWithContext(ctx, getNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getNetworkACLRulePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}`)
				}))
			})
			It(`Invoke GetNetworkACLRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetNetworkACLRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetNetworkACLRuleOptions model
				getNetworkACLRuleOptionsModel := new(vpcv1.GetNetworkACLRuleOptions)
				getNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetNetworkACLRule(getNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetNetworkACLRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLRuleOptions model
				getNetworkACLRuleOptionsModel := new(vpcv1.GetNetworkACLRuleOptions)
				getNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetNetworkACLRule(getNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetNetworkACLRuleOptions model with no property values
				getNetworkACLRuleOptionsModelNew := new(vpcv1.GetNetworkACLRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetNetworkACLRule(getNetworkACLRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetNetworkACLRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetNetworkACLRuleOptions model
				getNetworkACLRuleOptionsModel := new(vpcv1.GetNetworkACLRuleOptions)
				getNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				getNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetNetworkACLRule(getNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateNetworkACLRule(updateNetworkACLRuleOptions *UpdateNetworkACLRuleOptions) - Operation response error`, func() {
		version := "testString"
		updateNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateNetworkACLRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateNetworkACLRule with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID model
				networkACLRuleBeforePatchModel := new(vpcv1.NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID)
				networkACLRuleBeforePatchModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePatch model
				networkACLRulePatchModel := new(vpcv1.NetworkACLRulePatch)
				networkACLRulePatchModel.Action = core.StringPtr("allow")
				networkACLRulePatchModel.Before = networkACLRuleBeforePatchModel
				networkACLRulePatchModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePatchModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.DestinationPortMax = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.DestinationPortMin = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.Direction = core.StringPtr("inbound")
				networkACLRulePatchModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePatchModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.SourcePortMax = core.Int64Ptr(int64(65535))
				networkACLRulePatchModel.SourcePortMin = core.Int64Ptr(int64(49152))
				networkACLRulePatchModel.Type = core.Int64Ptr(int64(8))
				networkACLRulePatchModelAsPatch, asPatchErr := networkACLRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLRuleOptions model
				updateNetworkACLRuleOptionsModel := new(vpcv1.UpdateNetworkACLRuleOptions)
				updateNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.NetworkACLRulePatch = networkACLRulePatchModelAsPatch
				updateNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateNetworkACLRule(updateNetworkACLRuleOptions *UpdateNetworkACLRuleOptions)`, func() {
		version := "testString"
		updateNetworkACLRulePath := "/network_acls/testString/rules/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateNetworkACLRulePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}`)
				}))
			})
			It(`Invoke UpdateNetworkACLRule successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID model
				networkACLRuleBeforePatchModel := new(vpcv1.NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID)
				networkACLRuleBeforePatchModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePatch model
				networkACLRulePatchModel := new(vpcv1.NetworkACLRulePatch)
				networkACLRulePatchModel.Action = core.StringPtr("allow")
				networkACLRulePatchModel.Before = networkACLRuleBeforePatchModel
				networkACLRulePatchModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePatchModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.DestinationPortMax = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.DestinationPortMin = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.Direction = core.StringPtr("inbound")
				networkACLRulePatchModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePatchModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.SourcePortMax = core.Int64Ptr(int64(65535))
				networkACLRulePatchModel.SourcePortMin = core.Int64Ptr(int64(49152))
				networkACLRulePatchModel.Type = core.Int64Ptr(int64(8))
				networkACLRulePatchModelAsPatch, asPatchErr := networkACLRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLRuleOptions model
				updateNetworkACLRuleOptionsModel := new(vpcv1.UpdateNetworkACLRuleOptions)
				updateNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.NetworkACLRulePatch = networkACLRulePatchModelAsPatch
				updateNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateNetworkACLRuleWithContext(ctx, updateNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateNetworkACLRuleWithContext(ctx, updateNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateNetworkACLRulePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "allow", "before": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "name": "my-rule-1"}, "created_at": "2019-01-01T12:00:00.000Z", "destination": "192.168.3.0/24", "direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9", "id": "8daca77a-4980-4d33-8f3e-7038797be8f9", "ip_version": "ipv4", "name": "my-rule-2", "source": "192.168.3.0/24", "destination_port_max": 22, "destination_port_min": 22, "protocol": "udp", "source_port_max": 65535, "source_port_min": 49152}`)
				}))
			})
			It(`Invoke UpdateNetworkACLRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateNetworkACLRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID model
				networkACLRuleBeforePatchModel := new(vpcv1.NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID)
				networkACLRuleBeforePatchModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePatch model
				networkACLRulePatchModel := new(vpcv1.NetworkACLRulePatch)
				networkACLRulePatchModel.Action = core.StringPtr("allow")
				networkACLRulePatchModel.Before = networkACLRuleBeforePatchModel
				networkACLRulePatchModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePatchModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.DestinationPortMax = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.DestinationPortMin = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.Direction = core.StringPtr("inbound")
				networkACLRulePatchModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePatchModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.SourcePortMax = core.Int64Ptr(int64(65535))
				networkACLRulePatchModel.SourcePortMin = core.Int64Ptr(int64(49152))
				networkACLRulePatchModel.Type = core.Int64Ptr(int64(8))
				networkACLRulePatchModelAsPatch, asPatchErr := networkACLRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLRuleOptions model
				updateNetworkACLRuleOptionsModel := new(vpcv1.UpdateNetworkACLRuleOptions)
				updateNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.NetworkACLRulePatch = networkACLRulePatchModelAsPatch
				updateNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateNetworkACLRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID model
				networkACLRuleBeforePatchModel := new(vpcv1.NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID)
				networkACLRuleBeforePatchModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePatch model
				networkACLRulePatchModel := new(vpcv1.NetworkACLRulePatch)
				networkACLRulePatchModel.Action = core.StringPtr("allow")
				networkACLRulePatchModel.Before = networkACLRuleBeforePatchModel
				networkACLRulePatchModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePatchModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.DestinationPortMax = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.DestinationPortMin = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.Direction = core.StringPtr("inbound")
				networkACLRulePatchModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePatchModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.SourcePortMax = core.Int64Ptr(int64(65535))
				networkACLRulePatchModel.SourcePortMin = core.Int64Ptr(int64(49152))
				networkACLRulePatchModel.Type = core.Int64Ptr(int64(8))
				networkACLRulePatchModelAsPatch, asPatchErr := networkACLRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLRuleOptions model
				updateNetworkACLRuleOptionsModel := new(vpcv1.UpdateNetworkACLRuleOptions)
				updateNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.NetworkACLRulePatch = networkACLRulePatchModelAsPatch
				updateNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateNetworkACLRuleOptions model with no property values
				updateNetworkACLRuleOptionsModelNew := new(vpcv1.UpdateNetworkACLRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateNetworkACLRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID model
				networkACLRuleBeforePatchModel := new(vpcv1.NetworkACLRuleBeforePatchNetworkACLRuleIdentityByID)
				networkACLRuleBeforePatchModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")

				// Construct an instance of the NetworkACLRulePatch model
				networkACLRulePatchModel := new(vpcv1.NetworkACLRulePatch)
				networkACLRulePatchModel.Action = core.StringPtr("allow")
				networkACLRulePatchModel.Before = networkACLRuleBeforePatchModel
				networkACLRulePatchModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePatchModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.DestinationPortMax = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.DestinationPortMin = core.Int64Ptr(int64(22))
				networkACLRulePatchModel.Direction = core.StringPtr("inbound")
				networkACLRulePatchModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePatchModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePatchModel.SourcePortMax = core.Int64Ptr(int64(65535))
				networkACLRulePatchModel.SourcePortMin = core.Int64Ptr(int64(49152))
				networkACLRulePatchModel.Type = core.Int64Ptr(int64(8))
				networkACLRulePatchModelAsPatch, asPatchErr := networkACLRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateNetworkACLRuleOptions model
				updateNetworkACLRuleOptionsModel := new(vpcv1.UpdateNetworkACLRuleOptions)
				updateNetworkACLRuleOptionsModel.NetworkACLID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.ID = core.StringPtr("testString")
				updateNetworkACLRuleOptionsModel.NetworkACLRulePatch = networkACLRulePatchModelAsPatch
				updateNetworkACLRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateNetworkACLRule(updateNetworkACLRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroups(listSecurityGroupsOptions *ListSecurityGroupsOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupsPath := "/security_groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroups with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCCRN = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroups(listSecurityGroupsOptions *ListSecurityGroupsOptions)`, func() {
		version := "testString"
		listSecurityGroupsPath := "/security_groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "security_groups": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListSecurityGroups successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCCRN = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListSecurityGroupsWithContext(ctx, listSecurityGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListSecurityGroupsWithContext(ctx, listSecurityGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "security_groups": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListSecurityGroups successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListSecurityGroups(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCCRN = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSecurityGroups with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCCRN = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListSecurityGroups successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := new(vpcv1.ListSecurityGroupsOptions)
				listSecurityGroupsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCID = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCCRN = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.VPCName = core.StringPtr("testString")
				listSecurityGroupsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListSecurityGroups(listSecurityGroupsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroup(createSecurityGroupOptions *CreateSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		createSecurityGroupPath := "/security_groups"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecurityGroupPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSecurityGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.VPC = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroup(createSecurityGroupOptions *CreateSecurityGroupOptions)`, func() {
		version := "testString"
		createSecurityGroupPath := "/security_groups"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecurityGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateSecurityGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.VPC = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateSecurityGroupWithContext(ctx, createSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateSecurityGroupWithContext(ctx, createSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecurityGroupPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateSecurityGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.VPC = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSecurityGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.VPC = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSecurityGroupOptions model with no property values
				createSecurityGroupOptionsModelNew := new(vpcv1.CreateSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateSecurityGroup(createSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateSecurityGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupOptions model
				createSecurityGroupOptionsModel := new(vpcv1.CreateSecurityGroupOptions)
				createSecurityGroupOptionsModel.VPC = vpcIdentityModel
				createSecurityGroupOptionsModel.Name = core.StringPtr("my-security-group")
				createSecurityGroupOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createSecurityGroupOptionsModel.Rules = []vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}
				createSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateSecurityGroup(createSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteSecurityGroup(deleteSecurityGroupOptions *DeleteSecurityGroupOptions)`, func() {
		version := "testString"
		deleteSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteSecurityGroupPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSecurityGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSecurityGroupOptions model
				deleteSecurityGroupOptionsModel := new(vpcv1.DeleteSecurityGroupOptions)
				deleteSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteSecurityGroup(deleteSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSecurityGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteSecurityGroupOptions model
				deleteSecurityGroupOptionsModel := new(vpcv1.DeleteSecurityGroupOptions)
				deleteSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteSecurityGroup(deleteSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSecurityGroupOptions model with no property values
				deleteSecurityGroupOptionsModelNew := new(vpcv1.DeleteSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteSecurityGroup(deleteSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroup(getSecurityGroupOptions *GetSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroup(getSecurityGroupOptions *GetSecurityGroupOptions)`, func() {
		version := "testString"
		getSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetSecurityGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetSecurityGroupWithContext(ctx, getSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetSecurityGroupWithContext(ctx, getSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetSecurityGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSecurityGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupOptions model with no property values
				getSecurityGroupOptionsModelNew := new(vpcv1.GetSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetSecurityGroup(getSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSecurityGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupOptions model
				getSecurityGroupOptionsModel := new(vpcv1.GetSecurityGroupOptions)
				getSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetSecurityGroup(getSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSecurityGroup(updateSecurityGroupOptions *UpdateSecurityGroupOptions) - Operation response error`, func() {
		version := "testString"
		updateSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSecurityGroupPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSecurityGroup with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupPatch model
				securityGroupPatchModel := new(vpcv1.SecurityGroupPatch)
				securityGroupPatchModel.Name = core.StringPtr("my-security-group")
				securityGroupPatchModelAsPatch, asPatchErr := securityGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.SecurityGroupPatch = securityGroupPatchModelAsPatch
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSecurityGroup(updateSecurityGroupOptions *UpdateSecurityGroupOptions)`, func() {
		version := "testString"
		updateSecurityGroupPath := "/security_groups/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSecurityGroupPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateSecurityGroup successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the SecurityGroupPatch model
				securityGroupPatchModel := new(vpcv1.SecurityGroupPatch)
				securityGroupPatchModel.Name = core.StringPtr("my-security-group")
				securityGroupPatchModelAsPatch, asPatchErr := securityGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.SecurityGroupPatch = securityGroupPatchModelAsPatch
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateSecurityGroupWithContext(ctx, updateSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateSecurityGroupWithContext(ctx, updateSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSecurityGroupPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group", "network_interfaces": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}], "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateSecurityGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateSecurityGroup(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupPatch model
				securityGroupPatchModel := new(vpcv1.SecurityGroupPatch)
				securityGroupPatchModel.Name = core.StringPtr("my-security-group")
				securityGroupPatchModelAsPatch, asPatchErr := securityGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.SecurityGroupPatch = securityGroupPatchModelAsPatch
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateSecurityGroup with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupPatch model
				securityGroupPatchModel := new(vpcv1.SecurityGroupPatch)
				securityGroupPatchModel.Name = core.StringPtr("my-security-group")
				securityGroupPatchModelAsPatch, asPatchErr := securityGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.SecurityGroupPatch = securityGroupPatchModelAsPatch
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSecurityGroupOptions model with no property values
				updateSecurityGroupOptionsModelNew := new(vpcv1.UpdateSecurityGroupOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateSecurityGroup(updateSecurityGroupOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateSecurityGroup successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupPatch model
				securityGroupPatchModel := new(vpcv1.SecurityGroupPatch)
				securityGroupPatchModel.Name = core.StringPtr("my-security-group")
				securityGroupPatchModelAsPatch, asPatchErr := securityGroupPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupOptions model
				updateSecurityGroupOptionsModel := new(vpcv1.UpdateSecurityGroupOptions)
				updateSecurityGroupOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupOptionsModel.SecurityGroupPatch = securityGroupPatchModelAsPatch
				updateSecurityGroupOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateSecurityGroup(updateSecurityGroupOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptions *ListSecurityGroupNetworkInterfacesOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupNetworkInterfacesPath := "/security_groups/testString/network_interfaces"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptions *ListSecurityGroupNetworkInterfacesOptions)`, func() {
		version := "testString"
		listSecurityGroupNetworkInterfacesPath := "/security_groups/testString/network_interfaces"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?limit=20"}, "limit": 20, "network_interfaces": [{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?start=d3e721fd-c988-4670-9927-dbd5e7b07fc6&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListSecurityGroupNetworkInterfacesWithContext(ctx, listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListSecurityGroupNetworkInterfacesWithContext(ctx, listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupNetworkInterfacesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?limit=20"}, "limit": 20, "network_interfaces": [{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}], "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/instances/3b2669a2-4c2b-4003-bc91-1b81f1326267/network_interfaces?start=d3e721fd-c988-4670-9927-dbd5e7b07fc6&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListSecurityGroupNetworkInterfaces(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSecurityGroupNetworkInterfaces with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSecurityGroupNetworkInterfacesOptions model with no property values
				listSecurityGroupNetworkInterfacesOptionsModelNew := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListSecurityGroupNetworkInterfaces successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				listSecurityGroupNetworkInterfacesOptionsModel := new(vpcv1.ListSecurityGroupNetworkInterfacesOptions)
				listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupNetworkInterfacesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListSecurityGroupNetworkInterfaces(listSecurityGroupNetworkInterfacesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RemoveSecurityGroupNetworkInterface(removeSecurityGroupNetworkInterfaceOptions *RemoveSecurityGroupNetworkInterfaceOptions)`, func() {
		version := "testString"
		removeSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveSecurityGroupNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.RemoveSecurityGroupNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveSecurityGroupNetworkInterfaceOptions model
				removeSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.RemoveSecurityGroupNetworkInterfaceOptions)
				removeSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.RemoveSecurityGroupNetworkInterface(removeSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveSecurityGroupNetworkInterface with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RemoveSecurityGroupNetworkInterfaceOptions model
				removeSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.RemoveSecurityGroupNetworkInterfaceOptions)
				removeSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.RemoveSecurityGroupNetworkInterface(removeSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveSecurityGroupNetworkInterfaceOptions model with no property values
				removeSecurityGroupNetworkInterfaceOptionsModelNew := new(vpcv1.RemoveSecurityGroupNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.RemoveSecurityGroupNetworkInterface(removeSecurityGroupNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptions *GetSecurityGroupNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroupNetworkInterface with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptions *GetSecurityGroupNetworkInterfaceOptions)`, func() {
		version := "testString"
		getSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke GetSecurityGroupNetworkInterface successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetSecurityGroupNetworkInterfaceWithContext(ctx, getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetSecurityGroupNetworkInterfaceWithContext(ctx, getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke GetSecurityGroupNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetSecurityGroupNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSecurityGroupNetworkInterface with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupNetworkInterfaceOptions model with no property values
				getSecurityGroupNetworkInterfaceOptionsModelNew := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSecurityGroupNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				getSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.GetSecurityGroupNetworkInterfaceOptions)
				getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetSecurityGroupNetworkInterface(getSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptions *AddSecurityGroupNetworkInterfaceOptions) - Operation response error`, func() {
		version := "testString"
		addSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AddSecurityGroupNetworkInterface with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				addSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.AddSecurityGroupNetworkInterfaceOptions)
				addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptions *AddSecurityGroupNetworkInterfaceOptions)`, func() {
		version := "testString"
		addSecurityGroupNetworkInterfacePath := "/security_groups/testString/network_interfaces/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke AddSecurityGroupNetworkInterface successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				addSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.AddSecurityGroupNetworkInterfaceOptions)
				addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.AddSecurityGroupNetworkInterfaceWithContext(ctx, addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.AddSecurityGroupNetworkInterfaceWithContext(ctx, addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addSecurityGroupNetworkInterfacePath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"allow_ip_spoofing": true, "created_at": "2019-01-01T12:00:00.000Z", "floating_ips": [{"address": "203.0.113.1", "crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "name": "my-floating-ip"}], "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "port_speed": 1000, "primary_ipv4_address": "192.168.3.4", "resource_type": "network_interface", "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "type": "primary"}`)
				}))
			})
			It(`Invoke AddSecurityGroupNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.AddSecurityGroupNetworkInterface(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				addSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.AddSecurityGroupNetworkInterfaceOptions)
				addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke AddSecurityGroupNetworkInterface with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				addSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.AddSecurityGroupNetworkInterfaceOptions)
				addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the AddSecurityGroupNetworkInterfaceOptions model with no property values
				addSecurityGroupNetworkInterfaceOptionsModelNew := new(vpcv1.AddSecurityGroupNetworkInterfaceOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke AddSecurityGroupNetworkInterface successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				addSecurityGroupNetworkInterfaceOptionsModel := new(vpcv1.AddSecurityGroupNetworkInterfaceOptions)
				addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.ID = core.StringPtr("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.AddSecurityGroupNetworkInterface(addSecurityGroupNetworkInterfaceOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupRules(listSecurityGroupRulesOptions *ListSecurityGroupRulesOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupRulesPath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroupRules with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupRules(listSecurityGroupRulesOptions *ListSecurityGroupRulesOptions)`, func() {
		version := "testString"
		listSecurityGroupRulesPath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupRulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}]}`)
				}))
			})
			It(`Invoke ListSecurityGroupRules successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListSecurityGroupRulesWithContext(ctx, listSecurityGroupRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListSecurityGroupRulesWithContext(ctx, listSecurityGroupRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupRulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"rules": [{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}]}`)
				}))
			})
			It(`Invoke ListSecurityGroupRules successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListSecurityGroupRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSecurityGroupRules with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSecurityGroupRulesOptions model with no property values
				listSecurityGroupRulesOptionsModelNew := new(vpcv1.ListSecurityGroupRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListSecurityGroupRules successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupRulesOptions model
				listSecurityGroupRulesOptionsModel := new(vpcv1.ListSecurityGroupRulesOptions)
				listSecurityGroupRulesOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListSecurityGroupRules(listSecurityGroupRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroupRule(createSecurityGroupRuleOptions *CreateSecurityGroupRuleOptions) - Operation response error`, func() {
		version := "testString"
		createSecurityGroupRulePath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecurityGroupRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSecurityGroupRule with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroupRule(createSecurityGroupRuleOptions *CreateSecurityGroupRuleOptions)`, func() {
		version := "testString"
		createSecurityGroupRulePath := "/security_groups/testString/rules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecurityGroupRulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}`)
				}))
			})
			It(`Invoke CreateSecurityGroupRule successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateSecurityGroupRuleWithContext(ctx, createSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateSecurityGroupRuleWithContext(ctx, createSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecurityGroupRulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}`)
				}))
			})
			It(`Invoke CreateSecurityGroupRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSecurityGroupRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSecurityGroupRuleOptions model with no property values
				createSecurityGroupRuleOptionsModelNew := new(vpcv1.CreateSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateSecurityGroupRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				createSecurityGroupRuleOptionsModel := new(vpcv1.CreateSecurityGroupRuleOptions)
				createSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype = securityGroupRulePrototypeModel
				createSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateSecurityGroupRule(createSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteSecurityGroupRule(deleteSecurityGroupRuleOptions *DeleteSecurityGroupRuleOptions)`, func() {
		version := "testString"
		deleteSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteSecurityGroupRulePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSecurityGroupRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSecurityGroupRuleOptions model
				deleteSecurityGroupRuleOptionsModel := new(vpcv1.DeleteSecurityGroupRuleOptions)
				deleteSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSecurityGroupRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteSecurityGroupRuleOptions model
				deleteSecurityGroupRuleOptionsModel := new(vpcv1.DeleteSecurityGroupRuleOptions)
				deleteSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSecurityGroupRuleOptions model with no property values
				deleteSecurityGroupRuleOptionsModelNew := new(vpcv1.DeleteSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteSecurityGroupRule(deleteSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupRule(getSecurityGroupRuleOptions *GetSecurityGroupRuleOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroupRule with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupRule(getSecurityGroupRuleOptions *GetSecurityGroupRuleOptions)`, func() {
		version := "testString"
		getSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupRulePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}`)
				}))
			})
			It(`Invoke GetSecurityGroupRule successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetSecurityGroupRuleWithContext(ctx, getSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetSecurityGroupRuleWithContext(ctx, getSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupRulePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}`)
				}))
			})
			It(`Invoke GetSecurityGroupRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSecurityGroupRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupRuleOptions model with no property values
				getSecurityGroupRuleOptionsModelNew := new(vpcv1.GetSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSecurityGroupRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupRuleOptions model
				getSecurityGroupRuleOptionsModel := new(vpcv1.GetSecurityGroupRuleOptions)
				getSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetSecurityGroupRule(getSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSecurityGroupRule(updateSecurityGroupRuleOptions *UpdateSecurityGroupRuleOptions) - Operation response error`, func() {
		version := "testString"
		updateSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSecurityGroupRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateSecurityGroupRule with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRuleRemotePatchIP model
				securityGroupRuleRemotePatchModel := new(vpcv1.SecurityGroupRuleRemotePatchIP)
				securityGroupRuleRemotePatchModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePatch model
				securityGroupRulePatchModel := new(vpcv1.SecurityGroupRulePatch)
				securityGroupRulePatchModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePatchModel.Direction = core.StringPtr("inbound")
				securityGroupRulePatchModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePatchModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.Remote = securityGroupRuleRemotePatchModel
				securityGroupRulePatchModel.Type = core.Int64Ptr(int64(8))
				securityGroupRulePatchModelAsPatch, asPatchErr := securityGroupRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch = securityGroupRulePatchModelAsPatch
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateSecurityGroupRule(updateSecurityGroupRuleOptions *UpdateSecurityGroupRuleOptions)`, func() {
		version := "testString"
		updateSecurityGroupRulePath := "/security_groups/testString/rules/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSecurityGroupRulePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}`)
				}))
			})
			It(`Invoke UpdateSecurityGroupRule successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the SecurityGroupRuleRemotePatchIP model
				securityGroupRuleRemotePatchModel := new(vpcv1.SecurityGroupRuleRemotePatchIP)
				securityGroupRuleRemotePatchModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePatch model
				securityGroupRulePatchModel := new(vpcv1.SecurityGroupRulePatch)
				securityGroupRulePatchModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePatchModel.Direction = core.StringPtr("inbound")
				securityGroupRulePatchModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePatchModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.Remote = securityGroupRuleRemotePatchModel
				securityGroupRulePatchModel.Type = core.Int64Ptr(int64(8))
				securityGroupRulePatchModelAsPatch, asPatchErr := securityGroupRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch = securityGroupRulePatchModelAsPatch
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateSecurityGroupRuleWithContext(ctx, updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateSecurityGroupRuleWithContext(ctx, updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateSecurityGroupRulePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"direction": "inbound", "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/rules/6f2a6efe-21e2-401c-b237-620aa26ba16a", "id": "6f2a6efe-21e2-401c-b237-620aa26ba16a", "ip_version": "ipv4", "remote": {"address": "192.168.3.4"}, "protocol": "all"}`)
				}))
			})
			It(`Invoke UpdateSecurityGroupRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateSecurityGroupRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SecurityGroupRuleRemotePatchIP model
				securityGroupRuleRemotePatchModel := new(vpcv1.SecurityGroupRuleRemotePatchIP)
				securityGroupRuleRemotePatchModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePatch model
				securityGroupRulePatchModel := new(vpcv1.SecurityGroupRulePatch)
				securityGroupRulePatchModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePatchModel.Direction = core.StringPtr("inbound")
				securityGroupRulePatchModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePatchModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.Remote = securityGroupRuleRemotePatchModel
				securityGroupRulePatchModel.Type = core.Int64Ptr(int64(8))
				securityGroupRulePatchModelAsPatch, asPatchErr := securityGroupRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch = securityGroupRulePatchModelAsPatch
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateSecurityGroupRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRuleRemotePatchIP model
				securityGroupRuleRemotePatchModel := new(vpcv1.SecurityGroupRuleRemotePatchIP)
				securityGroupRuleRemotePatchModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePatch model
				securityGroupRulePatchModel := new(vpcv1.SecurityGroupRulePatch)
				securityGroupRulePatchModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePatchModel.Direction = core.StringPtr("inbound")
				securityGroupRulePatchModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePatchModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.Remote = securityGroupRuleRemotePatchModel
				securityGroupRulePatchModel.Type = core.Int64Ptr(int64(8))
				securityGroupRulePatchModelAsPatch, asPatchErr := securityGroupRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch = securityGroupRulePatchModelAsPatch
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateSecurityGroupRuleOptions model with no property values
				updateSecurityGroupRuleOptionsModelNew := new(vpcv1.UpdateSecurityGroupRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateSecurityGroupRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SecurityGroupRuleRemotePatchIP model
				securityGroupRuleRemotePatchModel := new(vpcv1.SecurityGroupRuleRemotePatchIP)
				securityGroupRuleRemotePatchModel.Address = core.StringPtr("192.168.3.4")

				// Construct an instance of the SecurityGroupRulePatch model
				securityGroupRulePatchModel := new(vpcv1.SecurityGroupRulePatch)
				securityGroupRulePatchModel.Code = core.Int64Ptr(int64(0))
				securityGroupRulePatchModel.Direction = core.StringPtr("inbound")
				securityGroupRulePatchModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePatchModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePatchModel.Remote = securityGroupRuleRemotePatchModel
				securityGroupRulePatchModel.Type = core.Int64Ptr(int64(8))
				securityGroupRulePatchModelAsPatch, asPatchErr := securityGroupRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				updateSecurityGroupRuleOptionsModel := new(vpcv1.UpdateSecurityGroupRuleOptions)
				updateSecurityGroupRuleOptionsModel.SecurityGroupID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.ID = core.StringPtr("testString")
				updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch = securityGroupRulePatchModelAsPatch
				updateSecurityGroupRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateSecurityGroupRule(updateSecurityGroupRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupTargets(listSecurityGroupTargetsOptions *ListSecurityGroupTargetsOptions) - Operation response error`, func() {
		version := "testString"
		listSecurityGroupTargetsPath := "/security_groups/testString/targets"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupTargetsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListSecurityGroupTargets with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupTargetsOptions model
				listSecurityGroupTargetsOptionsModel := new(vpcv1.ListSecurityGroupTargetsOptions)
				listSecurityGroupTargetsOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListSecurityGroupTargets(listSecurityGroupTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListSecurityGroupTargets(listSecurityGroupTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListSecurityGroupTargets(listSecurityGroupTargetsOptions *ListSecurityGroupTargetsOptions)`, func() {
		version := "testString"
		listSecurityGroupTargetsPath := "/security_groups/testString/targets"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupTargetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/targets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/targets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListSecurityGroupTargets successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListSecurityGroupTargetsOptions model
				listSecurityGroupTargetsOptionsModel := new(vpcv1.ListSecurityGroupTargetsOptions)
				listSecurityGroupTargetsOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListSecurityGroupTargetsWithContext(ctx, listSecurityGroupTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListSecurityGroupTargets(listSecurityGroupTargetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListSecurityGroupTargetsWithContext(ctx, listSecurityGroupTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listSecurityGroupTargetsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/targets?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271/targets?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "targets": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListSecurityGroupTargets successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListSecurityGroupTargets(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListSecurityGroupTargetsOptions model
				listSecurityGroupTargetsOptionsModel := new(vpcv1.ListSecurityGroupTargetsOptions)
				listSecurityGroupTargetsOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListSecurityGroupTargets(listSecurityGroupTargetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListSecurityGroupTargets with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupTargetsOptions model
				listSecurityGroupTargetsOptionsModel := new(vpcv1.ListSecurityGroupTargetsOptions)
				listSecurityGroupTargetsOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListSecurityGroupTargets(listSecurityGroupTargetsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListSecurityGroupTargetsOptions model with no property values
				listSecurityGroupTargetsOptionsModelNew := new(vpcv1.ListSecurityGroupTargetsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListSecurityGroupTargets(listSecurityGroupTargetsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListSecurityGroupTargets successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListSecurityGroupTargetsOptions model
				listSecurityGroupTargetsOptionsModel := new(vpcv1.ListSecurityGroupTargetsOptions)
				listSecurityGroupTargetsOptionsModel.SecurityGroupID = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Start = core.StringPtr("testString")
				listSecurityGroupTargetsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listSecurityGroupTargetsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListSecurityGroupTargets(listSecurityGroupTargetsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteSecurityGroupTargetBinding(deleteSecurityGroupTargetBindingOptions *DeleteSecurityGroupTargetBindingOptions)`, func() {
		version := "testString"
		deleteSecurityGroupTargetBindingPath := "/security_groups/testString/targets/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteSecurityGroupTargetBindingPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteSecurityGroupTargetBinding successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteSecurityGroupTargetBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteSecurityGroupTargetBindingOptions model
				deleteSecurityGroupTargetBindingOptionsModel := new(vpcv1.DeleteSecurityGroupTargetBindingOptions)
				deleteSecurityGroupTargetBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupTargetBindingOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupTargetBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteSecurityGroupTargetBinding(deleteSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteSecurityGroupTargetBinding with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteSecurityGroupTargetBindingOptions model
				deleteSecurityGroupTargetBindingOptionsModel := new(vpcv1.DeleteSecurityGroupTargetBindingOptions)
				deleteSecurityGroupTargetBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				deleteSecurityGroupTargetBindingOptionsModel.ID = core.StringPtr("testString")
				deleteSecurityGroupTargetBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteSecurityGroupTargetBinding(deleteSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteSecurityGroupTargetBindingOptions model with no property values
				deleteSecurityGroupTargetBindingOptionsModelNew := new(vpcv1.DeleteSecurityGroupTargetBindingOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteSecurityGroupTargetBinding(deleteSecurityGroupTargetBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupTarget(getSecurityGroupTargetOptions *GetSecurityGroupTargetOptions) - Operation response error`, func() {
		version := "testString"
		getSecurityGroupTargetPath := "/security_groups/testString/targets/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupTargetPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetSecurityGroupTarget with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupTargetOptions model
				getSecurityGroupTargetOptionsModel := new(vpcv1.GetSecurityGroupTargetOptions)
				getSecurityGroupTargetOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetSecurityGroupTarget(getSecurityGroupTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetSecurityGroupTarget(getSecurityGroupTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetSecurityGroupTarget(getSecurityGroupTargetOptions *GetSecurityGroupTargetOptions)`, func() {
		version := "testString"
		getSecurityGroupTargetPath := "/security_groups/testString/targets/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupTargetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}`)
				}))
			})
			It(`Invoke GetSecurityGroupTarget successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetSecurityGroupTargetOptions model
				getSecurityGroupTargetOptionsModel := new(vpcv1.GetSecurityGroupTargetOptions)
				getSecurityGroupTargetOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetSecurityGroupTargetWithContext(ctx, getSecurityGroupTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetSecurityGroupTarget(getSecurityGroupTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetSecurityGroupTargetWithContext(ctx, getSecurityGroupTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getSecurityGroupTargetPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}`)
				}))
			})
			It(`Invoke GetSecurityGroupTarget successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetSecurityGroupTarget(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetSecurityGroupTargetOptions model
				getSecurityGroupTargetOptionsModel := new(vpcv1.GetSecurityGroupTargetOptions)
				getSecurityGroupTargetOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetSecurityGroupTarget(getSecurityGroupTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetSecurityGroupTarget with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupTargetOptions model
				getSecurityGroupTargetOptionsModel := new(vpcv1.GetSecurityGroupTargetOptions)
				getSecurityGroupTargetOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetSecurityGroupTarget(getSecurityGroupTargetOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetSecurityGroupTargetOptions model with no property values
				getSecurityGroupTargetOptionsModelNew := new(vpcv1.GetSecurityGroupTargetOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetSecurityGroupTarget(getSecurityGroupTargetOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetSecurityGroupTarget successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetSecurityGroupTargetOptions model
				getSecurityGroupTargetOptionsModel := new(vpcv1.GetSecurityGroupTargetOptions)
				getSecurityGroupTargetOptionsModel.SecurityGroupID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.ID = core.StringPtr("testString")
				getSecurityGroupTargetOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetSecurityGroupTarget(getSecurityGroupTargetOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptions *CreateSecurityGroupTargetBindingOptions) - Operation response error`, func() {
		version := "testString"
		createSecurityGroupTargetBindingPath := "/security_groups/testString/targets/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecurityGroupTargetBindingPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateSecurityGroupTargetBinding with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateSecurityGroupTargetBindingOptions model
				createSecurityGroupTargetBindingOptionsModel := new(vpcv1.CreateSecurityGroupTargetBindingOptions)
				createSecurityGroupTargetBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.ID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptions *CreateSecurityGroupTargetBindingOptions)`, func() {
		version := "testString"
		createSecurityGroupTargetBindingPath := "/security_groups/testString/targets/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecurityGroupTargetBindingPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}`)
				}))
			})
			It(`Invoke CreateSecurityGroupTargetBinding successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the CreateSecurityGroupTargetBindingOptions model
				createSecurityGroupTargetBindingOptionsModel := new(vpcv1.CreateSecurityGroupTargetBindingOptions)
				createSecurityGroupTargetBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.ID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateSecurityGroupTargetBindingWithContext(ctx, createSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateSecurityGroupTargetBindingWithContext(ctx, createSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createSecurityGroupTargetBindingPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}`)
				}))
			})
			It(`Invoke CreateSecurityGroupTargetBinding successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateSecurityGroupTargetBinding(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateSecurityGroupTargetBindingOptions model
				createSecurityGroupTargetBindingOptionsModel := new(vpcv1.CreateSecurityGroupTargetBindingOptions)
				createSecurityGroupTargetBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.ID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateSecurityGroupTargetBinding with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateSecurityGroupTargetBindingOptions model
				createSecurityGroupTargetBindingOptionsModel := new(vpcv1.CreateSecurityGroupTargetBindingOptions)
				createSecurityGroupTargetBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.ID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateSecurityGroupTargetBindingOptions model with no property values
				createSecurityGroupTargetBindingOptionsModelNew := new(vpcv1.CreateSecurityGroupTargetBindingOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateSecurityGroupTargetBinding successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateSecurityGroupTargetBindingOptions model
				createSecurityGroupTargetBindingOptionsModel := new(vpcv1.CreateSecurityGroupTargetBindingOptions)
				createSecurityGroupTargetBindingOptionsModel.SecurityGroupID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.ID = core.StringPtr("testString")
				createSecurityGroupTargetBindingOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateSecurityGroupTargetBinding(createSecurityGroupTargetBindingOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIkePolicies(listIkePoliciesOptions *ListIkePoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listIkePoliciesPath := "/ike_policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIkePoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIkePolicies with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIkePolicies(listIkePoliciesOptions *ListIkePoliciesOptions)`, func() {
		version := "testString"
		listIkePoliciesPath := "/ike_policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIkePoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "ike_policies": [{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ike_policy"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListIkePolicies successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListIkePoliciesWithContext(ctx, listIkePoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListIkePoliciesWithContext(ctx, listIkePoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIkePoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?limit=20"}, "ike_policies": [{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ike_policy"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListIkePolicies successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListIkePolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListIkePolicies with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListIkePolicies successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := new(vpcv1.ListIkePoliciesOptions)
				listIkePoliciesOptionsModel.Start = core.StringPtr("testString")
				listIkePoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIkePoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListIkePolicies(listIkePoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateIkePolicy(createIkePolicyOptions *CreateIkePolicyOptions) - Operation response error`, func() {
		version := "testString"
		createIkePolicyPath := "/ike_policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createIkePolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateIkePolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateIkePolicy(createIkePolicyOptions *CreateIkePolicyOptions)`, func() {
		version := "testString"
		createIkePolicyPath := "/ike_policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createIkePolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ike_policy"}`)
				}))
			})
			It(`Invoke CreateIkePolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateIkePolicyWithContext(ctx, createIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateIkePolicyWithContext(ctx, createIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createIkePolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ike_policy"}`)
				}))
			})
			It(`Invoke CreateIkePolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateIkePolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateIkePolicyOptions model with no property values
				createIkePolicyOptionsModelNew := new(vpcv1.CreateIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateIkePolicy(createIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateIkePolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsModel := new(vpcv1.CreateIkePolicyOptions)
				createIkePolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIkePolicyOptionsModel.DhGroup = core.Int64Ptr(int64(2))
				createIkePolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIkePolicyOptionsModel.IkeVersion = core.Int64Ptr(int64(1))
				createIkePolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(28800))
				createIkePolicyOptionsModel.Name = core.StringPtr("my-ike-policy")
				createIkePolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateIkePolicy(createIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteIkePolicy(deleteIkePolicyOptions *DeleteIkePolicyOptions)`, func() {
		version := "testString"
		deleteIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteIkePolicyPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteIkePolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteIkePolicyOptions model
				deleteIkePolicyOptionsModel := new(vpcv1.DeleteIkePolicyOptions)
				deleteIkePolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteIkePolicy(deleteIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteIkePolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteIkePolicyOptions model
				deleteIkePolicyOptionsModel := new(vpcv1.DeleteIkePolicyOptions)
				deleteIkePolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteIkePolicy(deleteIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteIkePolicyOptions model with no property values
				deleteIkePolicyOptionsModelNew := new(vpcv1.DeleteIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteIkePolicy(deleteIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetIkePolicy(getIkePolicyOptions *GetIkePolicyOptions) - Operation response error`, func() {
		version := "testString"
		getIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getIkePolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetIkePolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetIkePolicy(getIkePolicyOptions *GetIkePolicyOptions)`, func() {
		version := "testString"
		getIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getIkePolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ike_policy"}`)
				}))
			})
			It(`Invoke GetIkePolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetIkePolicyWithContext(ctx, getIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetIkePolicyWithContext(ctx, getIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getIkePolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ike_policy"}`)
				}))
			})
			It(`Invoke GetIkePolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetIkePolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetIkePolicyOptions model with no property values
				getIkePolicyOptionsModelNew := new(vpcv1.GetIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetIkePolicy(getIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetIkePolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetIkePolicyOptions model
				getIkePolicyOptionsModel := new(vpcv1.GetIkePolicyOptions)
				getIkePolicyOptionsModel.ID = core.StringPtr("testString")
				getIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetIkePolicy(getIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateIkePolicy(updateIkePolicyOptions *UpdateIkePolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateIkePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateIkePolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.IkePolicyPatch = make(map[string]interface{})
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateIkePolicy(updateIkePolicyOptions *UpdateIkePolicyOptions)`, func() {
		version := "testString"
		updateIkePolicyPath := "/ike_policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateIkePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ike_policy"}`)
				}))
			})
			It(`Invoke UpdateIkePolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.IkePolicyPatch = make(map[string]interface{})
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateIkePolicyWithContext(ctx, updateIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateIkePolicyWithContext(ctx, updateIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateIkePolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "dh_group": 2, "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "ike_version": 1, "key_lifetime": 28800, "name": "my-ike-policy", "negotiation_mode": "main", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ike_policy"}`)
				}))
			})
			It(`Invoke UpdateIkePolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateIkePolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.IkePolicyPatch = make(map[string]interface{})
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateIkePolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.IkePolicyPatch = make(map[string]interface{})
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateIkePolicyOptions model with no property values
				updateIkePolicyOptionsModelNew := new(vpcv1.UpdateIkePolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateIkePolicy(updateIkePolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateIkePolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the UpdateIkePolicyOptions model
				updateIkePolicyOptionsModel := new(vpcv1.UpdateIkePolicyOptions)
				updateIkePolicyOptionsModel.ID = core.StringPtr("testString")
				updateIkePolicyOptionsModel.IkePolicyPatch = make(map[string]interface{})
				updateIkePolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateIkePolicy(updateIkePolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIkePolicyConnections(listIkePolicyConnectionsOptions *ListIkePolicyConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listIkePolicyConnectionsPath := "/ike_policies/testString/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIkePolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIkePolicyConnections with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIkePolicyConnectionsOptions model
				listIkePolicyConnectionsOptionsModel := new(vpcv1.ListIkePolicyConnectionsOptions)
				listIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIkePolicyConnections(listIkePolicyConnectionsOptions *ListIkePolicyConnectionsOptions)`, func() {
		version := "testString"
		listIkePolicyConnectionsPath := "/ike_policies/testString/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIkePolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}]}`)
				}))
			})
			It(`Invoke ListIkePolicyConnections successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListIkePolicyConnectionsOptions model
				listIkePolicyConnectionsOptionsModel := new(vpcv1.ListIkePolicyConnectionsOptions)
				listIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListIkePolicyConnectionsWithContext(ctx, listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListIkePolicyConnectionsWithContext(ctx, listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIkePolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}]}`)
				}))
			})
			It(`Invoke ListIkePolicyConnections successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListIkePolicyConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIkePolicyConnectionsOptions model
				listIkePolicyConnectionsOptionsModel := new(vpcv1.ListIkePolicyConnectionsOptions)
				listIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListIkePolicyConnections with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIkePolicyConnectionsOptions model
				listIkePolicyConnectionsOptionsModel := new(vpcv1.ListIkePolicyConnectionsOptions)
				listIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListIkePolicyConnectionsOptions model with no property values
				listIkePolicyConnectionsOptionsModelNew := new(vpcv1.ListIkePolicyConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListIkePolicyConnections successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIkePolicyConnectionsOptions model
				listIkePolicyConnectionsOptionsModel := new(vpcv1.ListIkePolicyConnectionsOptions)
				listIkePolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIkePolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListIkePolicyConnections(listIkePolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIpsecPolicies(listIpsecPoliciesOptions *ListIpsecPoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listIpsecPoliciesPath := "/ipsec_policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIpsecPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIpsecPolicies with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIpsecPolicies(listIpsecPoliciesOptions *ListIpsecPoliciesOptions)`, func() {
		version := "testString"
		listIpsecPoliciesPath := "/ipsec_policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIpsecPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "ipsec_policies": [{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ipsec_policy", "transform_protocol": "esp"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListIpsecPolicies successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListIpsecPoliciesWithContext(ctx, listIpsecPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListIpsecPoliciesWithContext(ctx, listIpsecPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIpsecPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?limit=20"}, "ipsec_policies": [{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ipsec_policy", "transform_protocol": "esp"}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListIpsecPolicies successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListIpsecPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListIpsecPolicies with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListIpsecPolicies successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := new(vpcv1.ListIpsecPoliciesOptions)
				listIpsecPoliciesOptionsModel.Start = core.StringPtr("testString")
				listIpsecPoliciesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listIpsecPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListIpsecPolicies(listIpsecPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateIpsecPolicy(createIpsecPolicyOptions *CreateIpsecPolicyOptions) - Operation response error`, func() {
		version := "testString"
		createIpsecPolicyPath := "/ipsec_policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createIpsecPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateIpsecPolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateIpsecPolicy(createIpsecPolicyOptions *CreateIpsecPolicyOptions)`, func() {
		version := "testString"
		createIpsecPolicyPath := "/ipsec_policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createIpsecPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ipsec_policy", "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke CreateIpsecPolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateIpsecPolicyWithContext(ctx, createIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateIpsecPolicyWithContext(ctx, createIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createIpsecPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ipsec_policy", "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke CreateIpsecPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateIpsecPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateIpsecPolicyOptions model with no property values
				createIpsecPolicyOptionsModelNew := new(vpcv1.CreateIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateIpsecPolicy(createIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateIpsecPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsModel := new(vpcv1.CreateIpsecPolicyOptions)
				createIpsecPolicyOptionsModel.AuthenticationAlgorithm = core.StringPtr("md5")
				createIpsecPolicyOptionsModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				createIpsecPolicyOptionsModel.Pfs = core.StringPtr("disabled")
				createIpsecPolicyOptionsModel.KeyLifetime = core.Int64Ptr(int64(3600))
				createIpsecPolicyOptionsModel.Name = core.StringPtr("my-ipsec-policy")
				createIpsecPolicyOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateIpsecPolicy(createIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteIpsecPolicy(deleteIpsecPolicyOptions *DeleteIpsecPolicyOptions)`, func() {
		version := "testString"
		deleteIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteIpsecPolicyPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteIpsecPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteIpsecPolicyOptions model
				deleteIpsecPolicyOptionsModel := new(vpcv1.DeleteIpsecPolicyOptions)
				deleteIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteIpsecPolicy(deleteIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteIpsecPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteIpsecPolicyOptions model
				deleteIpsecPolicyOptionsModel := new(vpcv1.DeleteIpsecPolicyOptions)
				deleteIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteIpsecPolicy(deleteIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteIpsecPolicyOptions model with no property values
				deleteIpsecPolicyOptionsModelNew := new(vpcv1.DeleteIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteIpsecPolicy(deleteIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetIpsecPolicy(getIpsecPolicyOptions *GetIpsecPolicyOptions) - Operation response error`, func() {
		version := "testString"
		getIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getIpsecPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetIpsecPolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetIpsecPolicy(getIpsecPolicyOptions *GetIpsecPolicyOptions)`, func() {
		version := "testString"
		getIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getIpsecPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ipsec_policy", "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke GetIpsecPolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetIpsecPolicyWithContext(ctx, getIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetIpsecPolicyWithContext(ctx, getIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getIpsecPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ipsec_policy", "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke GetIpsecPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetIpsecPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetIpsecPolicyOptions model with no property values
				getIpsecPolicyOptionsModelNew := new(vpcv1.GetIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetIpsecPolicy(getIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetIpsecPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetIpsecPolicyOptions model
				getIpsecPolicyOptionsModel := new(vpcv1.GetIpsecPolicyOptions)
				getIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				getIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetIpsecPolicy(getIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateIpsecPolicy(updateIpsecPolicyOptions *UpdateIpsecPolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateIpsecPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateIpsecPolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the IPsecPolicyPatch model
				iPsecPolicyPatchModel := new(vpcv1.IPsecPolicyPatch)
				iPsecPolicyPatchModel.AuthenticationAlgorithm = core.StringPtr("md5")
				iPsecPolicyPatchModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				iPsecPolicyPatchModel.KeyLifetime = core.Int64Ptr(int64(3600))
				iPsecPolicyPatchModel.Name = core.StringPtr("my-ipsec-policy")
				iPsecPolicyPatchModel.Pfs = core.StringPtr("disabled")
				iPsecPolicyPatchModelAsPatch, asPatchErr := iPsecPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.IPsecPolicyPatch = iPsecPolicyPatchModelAsPatch
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateIpsecPolicy(updateIpsecPolicyOptions *UpdateIpsecPolicyOptions)`, func() {
		version := "testString"
		updateIpsecPolicyPath := "/ipsec_policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateIpsecPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ipsec_policy", "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke UpdateIpsecPolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the IPsecPolicyPatch model
				iPsecPolicyPatchModel := new(vpcv1.IPsecPolicyPatch)
				iPsecPolicyPatchModel.AuthenticationAlgorithm = core.StringPtr("md5")
				iPsecPolicyPatchModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				iPsecPolicyPatchModel.KeyLifetime = core.Int64Ptr(int64(3600))
				iPsecPolicyPatchModel.Name = core.StringPtr("my-ipsec-policy")
				iPsecPolicyPatchModel.Pfs = core.StringPtr("disabled")
				iPsecPolicyPatchModelAsPatch, asPatchErr := iPsecPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.IPsecPolicyPatch = iPsecPolicyPatchModelAsPatch
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateIpsecPolicyWithContext(ctx, updateIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateIpsecPolicyWithContext(ctx, updateIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateIpsecPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"authentication_algorithm": "md5", "connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "encapsulation_mode": "tunnel", "encryption_algorithm": "triple_des", "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "key_lifetime": 3600, "name": "my-ipsec-policy", "pfs": "disabled", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "ipsec_policy", "transform_protocol": "esp"}`)
				}))
			})
			It(`Invoke UpdateIpsecPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateIpsecPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the IPsecPolicyPatch model
				iPsecPolicyPatchModel := new(vpcv1.IPsecPolicyPatch)
				iPsecPolicyPatchModel.AuthenticationAlgorithm = core.StringPtr("md5")
				iPsecPolicyPatchModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				iPsecPolicyPatchModel.KeyLifetime = core.Int64Ptr(int64(3600))
				iPsecPolicyPatchModel.Name = core.StringPtr("my-ipsec-policy")
				iPsecPolicyPatchModel.Pfs = core.StringPtr("disabled")
				iPsecPolicyPatchModelAsPatch, asPatchErr := iPsecPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.IPsecPolicyPatch = iPsecPolicyPatchModelAsPatch
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateIpsecPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the IPsecPolicyPatch model
				iPsecPolicyPatchModel := new(vpcv1.IPsecPolicyPatch)
				iPsecPolicyPatchModel.AuthenticationAlgorithm = core.StringPtr("md5")
				iPsecPolicyPatchModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				iPsecPolicyPatchModel.KeyLifetime = core.Int64Ptr(int64(3600))
				iPsecPolicyPatchModel.Name = core.StringPtr("my-ipsec-policy")
				iPsecPolicyPatchModel.Pfs = core.StringPtr("disabled")
				iPsecPolicyPatchModelAsPatch, asPatchErr := iPsecPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.IPsecPolicyPatch = iPsecPolicyPatchModelAsPatch
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateIpsecPolicyOptions model with no property values
				updateIpsecPolicyOptionsModelNew := new(vpcv1.UpdateIpsecPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateIpsecPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the IPsecPolicyPatch model
				iPsecPolicyPatchModel := new(vpcv1.IPsecPolicyPatch)
				iPsecPolicyPatchModel.AuthenticationAlgorithm = core.StringPtr("md5")
				iPsecPolicyPatchModel.EncryptionAlgorithm = core.StringPtr("triple_des")
				iPsecPolicyPatchModel.KeyLifetime = core.Int64Ptr(int64(3600))
				iPsecPolicyPatchModel.Name = core.StringPtr("my-ipsec-policy")
				iPsecPolicyPatchModel.Pfs = core.StringPtr("disabled")
				iPsecPolicyPatchModelAsPatch, asPatchErr := iPsecPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateIpsecPolicyOptions model
				updateIpsecPolicyOptionsModel := new(vpcv1.UpdateIpsecPolicyOptions)
				updateIpsecPolicyOptionsModel.ID = core.StringPtr("testString")
				updateIpsecPolicyOptionsModel.IPsecPolicyPatch = iPsecPolicyPatchModelAsPatch
				updateIpsecPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateIpsecPolicy(updateIpsecPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptions *ListIpsecPolicyConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listIpsecPolicyConnectionsPath := "/ipsec_policies/testString/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIpsecPolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListIpsecPolicyConnections with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				listIpsecPolicyConnectionsOptionsModel := new(vpcv1.ListIpsecPolicyConnectionsOptions)
				listIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptions *ListIpsecPolicyConnectionsOptions)`, func() {
		version := "testString"
		listIpsecPolicyConnectionsPath := "/ipsec_policies/testString/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIpsecPolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}]}`)
				}))
			})
			It(`Invoke ListIpsecPolicyConnections successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				listIpsecPolicyConnectionsOptionsModel := new(vpcv1.ListIpsecPolicyConnectionsOptions)
				listIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListIpsecPolicyConnectionsWithContext(ctx, listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListIpsecPolicyConnectionsWithContext(ctx, listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listIpsecPolicyConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}]}`)
				}))
			})
			It(`Invoke ListIpsecPolicyConnections successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListIpsecPolicyConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				listIpsecPolicyConnectionsOptionsModel := new(vpcv1.ListIpsecPolicyConnectionsOptions)
				listIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListIpsecPolicyConnections with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				listIpsecPolicyConnectionsOptionsModel := new(vpcv1.ListIpsecPolicyConnectionsOptions)
				listIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListIpsecPolicyConnectionsOptions model with no property values
				listIpsecPolicyConnectionsOptionsModelNew := new(vpcv1.ListIpsecPolicyConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListIpsecPolicyConnections successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				listIpsecPolicyConnectionsOptionsModel := new(vpcv1.ListIpsecPolicyConnectionsOptions)
				listIpsecPolicyConnectionsOptionsModel.ID = core.StringPtr("testString")
				listIpsecPolicyConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListIpsecPolicyConnections(listIpsecPolicyConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGateways(listVPNGatewaysOptions *ListVPNGatewaysOptions) - Operation response error`, func() {
		version := "testString"
		listVPNGatewaysPath := "/vpn_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["mode"]).To(Equal([]string{"route"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPNGateways with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := new(vpcv1.ListVPNGatewaysOptions)
				listVPNGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPNGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Mode = core.StringPtr("route")
				listVPNGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVPNGateways(listVPNGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVPNGateways(listVPNGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGateways(listVPNGatewaysOptions *ListVPNGatewaysOptions)`, func() {
		version := "testString"
		listVPNGatewaysPath := "/vpn_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["mode"]).To(Equal([]string{"route"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "members": [{"private_ip": {"address": "192.168.3.4"}, "public_ip": {"address": "192.168.3.4"}, "role": "active", "status": "available"}], "name": "my-vpn-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "vpn_gateway", "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "mode": "route"}]}`)
				}))
			})
			It(`Invoke ListVPNGateways successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := new(vpcv1.ListVPNGatewaysOptions)
				listVPNGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPNGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Mode = core.StringPtr("route")
				listVPNGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVPNGatewaysWithContext(ctx, listVPNGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVPNGateways(listVPNGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVPNGatewaysWithContext(ctx, listVPNGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["mode"]).To(Equal([]string{"route"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways?start=9d5a91a3e2cbd233b5a5b33436855ed&limit=20"}, "total_count": 132, "vpn_gateways": [{"connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "members": [{"private_ip": {"address": "192.168.3.4"}, "public_ip": {"address": "192.168.3.4"}, "role": "active", "status": "available"}], "name": "my-vpn-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "vpn_gateway", "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "mode": "route"}]}`)
				}))
			})
			It(`Invoke ListVPNGateways successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVPNGateways(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := new(vpcv1.ListVPNGatewaysOptions)
				listVPNGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPNGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Mode = core.StringPtr("route")
				listVPNGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVPNGateways(listVPNGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVPNGateways with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := new(vpcv1.ListVPNGatewaysOptions)
				listVPNGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPNGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Mode = core.StringPtr("route")
				listVPNGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVPNGateways(listVPNGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVPNGateways successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := new(vpcv1.ListVPNGatewaysOptions)
				listVPNGatewaysOptionsModel.Start = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listVPNGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listVPNGatewaysOptionsModel.Mode = core.StringPtr("route")
				listVPNGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVPNGateways(listVPNGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPNGateway(createVPNGatewayOptions *CreateVPNGatewayOptions) - Operation response error`, func() {
		version := "testString"
		createVPNGatewayPath := "/vpn_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPNGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPNGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VPNGatewayPrototypeVPNGatewayRouteModePrototype model
				vpnGatewayPrototypeModel := new(vpcv1.VPNGatewayPrototypeVPNGatewayRouteModePrototype)
				vpnGatewayPrototypeModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				vpnGatewayPrototypeModel.Subnet = subnetIdentityModel
				vpnGatewayPrototypeModel.Mode = core.StringPtr("route")

				// Construct an instance of the CreateVPNGatewayOptions model
				createVPNGatewayOptionsModel := new(vpcv1.CreateVPNGatewayOptions)
				createVPNGatewayOptionsModel.VPNGatewayPrototype = vpnGatewayPrototypeModel
				createVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateVPNGateway(createVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateVPNGateway(createVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPNGateway(createVPNGatewayOptions *CreateVPNGatewayOptions)`, func() {
		version := "testString"
		createVPNGatewayPath := "/vpn_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPNGatewayPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "members": [{"private_ip": {"address": "192.168.3.4"}, "public_ip": {"address": "192.168.3.4"}, "role": "active", "status": "available"}], "name": "my-vpn-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "vpn_gateway", "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "mode": "route"}`)
				}))
			})
			It(`Invoke CreateVPNGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VPNGatewayPrototypeVPNGatewayRouteModePrototype model
				vpnGatewayPrototypeModel := new(vpcv1.VPNGatewayPrototypeVPNGatewayRouteModePrototype)
				vpnGatewayPrototypeModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				vpnGatewayPrototypeModel.Subnet = subnetIdentityModel
				vpnGatewayPrototypeModel.Mode = core.StringPtr("route")

				// Construct an instance of the CreateVPNGatewayOptions model
				createVPNGatewayOptionsModel := new(vpcv1.CreateVPNGatewayOptions)
				createVPNGatewayOptionsModel.VPNGatewayPrototype = vpnGatewayPrototypeModel
				createVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateVPNGatewayWithContext(ctx, createVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateVPNGateway(createVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateVPNGatewayWithContext(ctx, createVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPNGatewayPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "members": [{"private_ip": {"address": "192.168.3.4"}, "public_ip": {"address": "192.168.3.4"}, "role": "active", "status": "available"}], "name": "my-vpn-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "vpn_gateway", "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "mode": "route"}`)
				}))
			})
			It(`Invoke CreateVPNGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateVPNGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VPNGatewayPrototypeVPNGatewayRouteModePrototype model
				vpnGatewayPrototypeModel := new(vpcv1.VPNGatewayPrototypeVPNGatewayRouteModePrototype)
				vpnGatewayPrototypeModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				vpnGatewayPrototypeModel.Subnet = subnetIdentityModel
				vpnGatewayPrototypeModel.Mode = core.StringPtr("route")

				// Construct an instance of the CreateVPNGatewayOptions model
				createVPNGatewayOptionsModel := new(vpcv1.CreateVPNGatewayOptions)
				createVPNGatewayOptionsModel.VPNGatewayPrototype = vpnGatewayPrototypeModel
				createVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateVPNGateway(createVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateVPNGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VPNGatewayPrototypeVPNGatewayRouteModePrototype model
				vpnGatewayPrototypeModel := new(vpcv1.VPNGatewayPrototypeVPNGatewayRouteModePrototype)
				vpnGatewayPrototypeModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				vpnGatewayPrototypeModel.Subnet = subnetIdentityModel
				vpnGatewayPrototypeModel.Mode = core.StringPtr("route")

				// Construct an instance of the CreateVPNGatewayOptions model
				createVPNGatewayOptionsModel := new(vpcv1.CreateVPNGatewayOptions)
				createVPNGatewayOptionsModel.VPNGatewayPrototype = vpnGatewayPrototypeModel
				createVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateVPNGateway(createVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPNGatewayOptions model with no property values
				createVPNGatewayOptionsModelNew := new(vpcv1.CreateVPNGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateVPNGateway(createVPNGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateVPNGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the VPNGatewayPrototypeVPNGatewayRouteModePrototype model
				vpnGatewayPrototypeModel := new(vpcv1.VPNGatewayPrototypeVPNGatewayRouteModePrototype)
				vpnGatewayPrototypeModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				vpnGatewayPrototypeModel.Subnet = subnetIdentityModel
				vpnGatewayPrototypeModel.Mode = core.StringPtr("route")

				// Construct an instance of the CreateVPNGatewayOptions model
				createVPNGatewayOptionsModel := new(vpcv1.CreateVPNGatewayOptions)
				createVPNGatewayOptionsModel.VPNGatewayPrototype = vpnGatewayPrototypeModel
				createVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateVPNGateway(createVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteVPNGateway(deleteVPNGatewayOptions *DeleteVPNGatewayOptions)`, func() {
		version := "testString"
		deleteVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVPNGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteVPNGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteVPNGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPNGatewayOptions model
				deleteVPNGatewayOptionsModel := new(vpcv1.DeleteVPNGatewayOptions)
				deleteVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteVPNGateway(deleteVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPNGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteVPNGatewayOptions model
				deleteVPNGatewayOptionsModel := new(vpcv1.DeleteVPNGatewayOptions)
				deleteVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteVPNGateway(deleteVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPNGatewayOptions model with no property values
				deleteVPNGatewayOptionsModelNew := new(vpcv1.DeleteVPNGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteVPNGateway(deleteVPNGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPNGateway(getVPNGatewayOptions *GetVPNGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPNGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPNGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayOptions model
				getVPNGatewayOptionsModel := new(vpcv1.GetVPNGatewayOptions)
				getVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPNGateway(getVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPNGateway(getVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPNGateway(getVPNGatewayOptions *GetVPNGatewayOptions)`, func() {
		version := "testString"
		getVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPNGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "members": [{"private_ip": {"address": "192.168.3.4"}, "public_ip": {"address": "192.168.3.4"}, "role": "active", "status": "available"}], "name": "my-vpn-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "vpn_gateway", "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "mode": "route"}`)
				}))
			})
			It(`Invoke GetVPNGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPNGatewayOptions model
				getVPNGatewayOptionsModel := new(vpcv1.GetVPNGatewayOptions)
				getVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPNGatewayWithContext(ctx, getVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPNGateway(getVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPNGatewayWithContext(ctx, getVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPNGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "members": [{"private_ip": {"address": "192.168.3.4"}, "public_ip": {"address": "192.168.3.4"}, "role": "active", "status": "available"}], "name": "my-vpn-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "vpn_gateway", "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "mode": "route"}`)
				}))
			})
			It(`Invoke GetVPNGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPNGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPNGatewayOptions model
				getVPNGatewayOptionsModel := new(vpcv1.GetVPNGatewayOptions)
				getVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPNGateway(getVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPNGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayOptions model
				getVPNGatewayOptionsModel := new(vpcv1.GetVPNGatewayOptions)
				getVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPNGateway(getVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPNGatewayOptions model with no property values
				getVPNGatewayOptionsModelNew := new(vpcv1.GetVPNGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPNGateway(getVPNGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPNGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayOptions model
				getVPNGatewayOptionsModel := new(vpcv1.GetVPNGatewayOptions)
				getVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPNGateway(getVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPNGateway(updateVPNGatewayOptions *UpdateVPNGatewayOptions) - Operation response error`, func() {
		version := "testString"
		updateVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPNGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPNGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPNGatewayPatch model
				vpnGatewayPatchModel := new(vpcv1.VPNGatewayPatch)
				vpnGatewayPatchModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPatchModelAsPatch, asPatchErr := vpnGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayOptions model
				updateVPNGatewayOptionsModel := new(vpcv1.UpdateVPNGatewayOptions)
				updateVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayOptionsModel.VPNGatewayPatch = vpnGatewayPatchModelAsPatch
				updateVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateVPNGateway(updateVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateVPNGateway(updateVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPNGateway(updateVPNGatewayOptions *UpdateVPNGatewayOptions)`, func() {
		version := "testString"
		updateVPNGatewayPath := "/vpn_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPNGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "members": [{"private_ip": {"address": "192.168.3.4"}, "public_ip": {"address": "192.168.3.4"}, "role": "active", "status": "available"}], "name": "my-vpn-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "vpn_gateway", "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "mode": "route"}`)
				}))
			})
			It(`Invoke UpdateVPNGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VPNGatewayPatch model
				vpnGatewayPatchModel := new(vpcv1.VPNGatewayPatch)
				vpnGatewayPatchModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPatchModelAsPatch, asPatchErr := vpnGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayOptions model
				updateVPNGatewayOptionsModel := new(vpcv1.UpdateVPNGatewayOptions)
				updateVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayOptionsModel.VPNGatewayPatch = vpnGatewayPatchModelAsPatch
				updateVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateVPNGatewayWithContext(ctx, updateVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateVPNGateway(updateVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateVPNGatewayWithContext(ctx, updateVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPNGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "name": "my-vpn-connection", "resource_type": "vpn_gateway_connection"}], "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpn:ddf51bec-3424-11e8-b467-0ed5f89f718b", "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "members": [{"private_ip": {"address": "192.168.3.4"}, "public_ip": {"address": "192.168.3.4"}, "role": "active", "status": "available"}], "name": "my-vpn-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "vpn_gateway", "status": "available", "subnet": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}, "mode": "route"}`)
				}))
			})
			It(`Invoke UpdateVPNGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateVPNGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VPNGatewayPatch model
				vpnGatewayPatchModel := new(vpcv1.VPNGatewayPatch)
				vpnGatewayPatchModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPatchModelAsPatch, asPatchErr := vpnGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayOptions model
				updateVPNGatewayOptionsModel := new(vpcv1.UpdateVPNGatewayOptions)
				updateVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayOptionsModel.VPNGatewayPatch = vpnGatewayPatchModelAsPatch
				updateVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateVPNGateway(updateVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateVPNGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPNGatewayPatch model
				vpnGatewayPatchModel := new(vpcv1.VPNGatewayPatch)
				vpnGatewayPatchModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPatchModelAsPatch, asPatchErr := vpnGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayOptions model
				updateVPNGatewayOptionsModel := new(vpcv1.UpdateVPNGatewayOptions)
				updateVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayOptionsModel.VPNGatewayPatch = vpnGatewayPatchModelAsPatch
				updateVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateVPNGateway(updateVPNGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPNGatewayOptions model with no property values
				updateVPNGatewayOptionsModelNew := new(vpcv1.UpdateVPNGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateVPNGateway(updateVPNGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateVPNGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPNGatewayPatch model
				vpnGatewayPatchModel := new(vpcv1.VPNGatewayPatch)
				vpnGatewayPatchModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPatchModelAsPatch, asPatchErr := vpnGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayOptions model
				updateVPNGatewayOptionsModel := new(vpcv1.UpdateVPNGatewayOptions)
				updateVPNGatewayOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayOptionsModel.VPNGatewayPatch = vpnGatewayPatchModelAsPatch
				updateVPNGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateVPNGateway(updateVPNGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGatewayConnections(listVPNGatewayConnectionsOptions *ListVPNGatewayConnectionsOptions) - Operation response error`, func() {
		version := "testString"
		listVPNGatewayConnectionsPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPNGatewayConnections with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				listVPNGatewayConnectionsOptionsModel := new(vpcv1.ListVPNGatewayConnectionsOptions)
				listVPNGatewayConnectionsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGatewayConnections(listVPNGatewayConnectionsOptions *ListVPNGatewayConnectionsOptions)`, func() {
		version := "testString"
		listVPNGatewayConnectionsPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}]}`)
				}))
			})
			It(`Invoke ListVPNGatewayConnections successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				listVPNGatewayConnectionsOptionsModel := new(vpcv1.ListVPNGatewayConnectionsOptions)
				listVPNGatewayConnectionsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVPNGatewayConnectionsWithContext(ctx, listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVPNGatewayConnectionsWithContext(ctx, listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewayConnectionsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["status"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"connections": [{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}]}`)
				}))
			})
			It(`Invoke ListVPNGatewayConnections successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVPNGatewayConnections(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				listVPNGatewayConnectionsOptionsModel := new(vpcv1.ListVPNGatewayConnectionsOptions)
				listVPNGatewayConnectionsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVPNGatewayConnections with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				listVPNGatewayConnectionsOptionsModel := new(vpcv1.ListVPNGatewayConnectionsOptions)
				listVPNGatewayConnectionsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPNGatewayConnectionsOptions model with no property values
				listVPNGatewayConnectionsOptionsModelNew := new(vpcv1.ListVPNGatewayConnectionsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVPNGatewayConnections successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				listVPNGatewayConnectionsOptionsModel := new(vpcv1.ListVPNGatewayConnectionsOptions)
				listVPNGatewayConnectionsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Status = core.StringPtr("testString")
				listVPNGatewayConnectionsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVPNGatewayConnections(listVPNGatewayConnectionsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPNGatewayConnection(createVPNGatewayConnectionOptions *CreateVPNGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		createVPNGatewayConnectionPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateVPNGatewayConnection with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype model
				vpnGatewayConnectionPrototypeModel := new(vpcv1.VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype)
				vpnGatewayConnectionPrototypeModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPrototypeModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPrototypeModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPrototypeModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPrototypeModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPrototypeModel.RoutingProtocol = core.StringPtr("none")

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				createVPNGatewayConnectionOptionsModel := new(vpcv1.CreateVPNGatewayConnectionOptions)
				createVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				createVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPrototype = vpnGatewayConnectionPrototypeModel
				createVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateVPNGatewayConnection(createVPNGatewayConnectionOptions *CreateVPNGatewayConnectionOptions)`, func() {
		version := "testString"
		createVPNGatewayConnectionPath := "/vpn_gateways/testString/connections"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}`)
				}))
			})
			It(`Invoke CreateVPNGatewayConnection successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype model
				vpnGatewayConnectionPrototypeModel := new(vpcv1.VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype)
				vpnGatewayConnectionPrototypeModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPrototypeModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPrototypeModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPrototypeModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPrototypeModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPrototypeModel.RoutingProtocol = core.StringPtr("none")

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				createVPNGatewayConnectionOptionsModel := new(vpcv1.CreateVPNGatewayConnectionOptions)
				createVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				createVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPrototype = vpnGatewayConnectionPrototypeModel
				createVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateVPNGatewayConnectionWithContext(ctx, createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateVPNGatewayConnectionWithContext(ctx, createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}`)
				}))
			})
			It(`Invoke CreateVPNGatewayConnection successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateVPNGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype model
				vpnGatewayConnectionPrototypeModel := new(vpcv1.VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype)
				vpnGatewayConnectionPrototypeModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPrototypeModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPrototypeModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPrototypeModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPrototypeModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPrototypeModel.RoutingProtocol = core.StringPtr("none")

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				createVPNGatewayConnectionOptionsModel := new(vpcv1.CreateVPNGatewayConnectionOptions)
				createVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				createVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPrototype = vpnGatewayConnectionPrototypeModel
				createVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateVPNGatewayConnection with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype model
				vpnGatewayConnectionPrototypeModel := new(vpcv1.VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype)
				vpnGatewayConnectionPrototypeModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPrototypeModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPrototypeModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPrototypeModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPrototypeModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPrototypeModel.RoutingProtocol = core.StringPtr("none")

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				createVPNGatewayConnectionOptionsModel := new(vpcv1.CreateVPNGatewayConnectionOptions)
				createVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				createVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPrototype = vpnGatewayConnectionPrototypeModel
				createVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateVPNGatewayConnectionOptions model with no property values
				createVPNGatewayConnectionOptionsModelNew := new(vpcv1.CreateVPNGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateVPNGatewayConnection successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype model
				vpnGatewayConnectionPrototypeModel := new(vpcv1.VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype)
				vpnGatewayConnectionPrototypeModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPrototypeModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPrototypeModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPrototypeModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPrototypeModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPrototypeModel.RoutingProtocol = core.StringPtr("none")

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				createVPNGatewayConnectionOptionsModel := new(vpcv1.CreateVPNGatewayConnectionOptions)
				createVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				createVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPrototype = vpnGatewayConnectionPrototypeModel
				createVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateVPNGatewayConnection(createVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteVPNGatewayConnection(deleteVPNGatewayConnectionOptions *DeleteVPNGatewayConnectionOptions)`, func() {
		version := "testString"
		deleteVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(202)
				}))
			})
			It(`Invoke DeleteVPNGatewayConnection successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteVPNGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteVPNGatewayConnectionOptions model
				deleteVPNGatewayConnectionOptionsModel := new(vpcv1.DeleteVPNGatewayConnectionOptions)
				deleteVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				deleteVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				deleteVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteVPNGatewayConnection(deleteVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteVPNGatewayConnection with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteVPNGatewayConnectionOptions model
				deleteVPNGatewayConnectionOptionsModel := new(vpcv1.DeleteVPNGatewayConnectionOptions)
				deleteVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				deleteVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				deleteVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteVPNGatewayConnection(deleteVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteVPNGatewayConnectionOptions model with no property values
				deleteVPNGatewayConnectionOptionsModelNew := new(vpcv1.DeleteVPNGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteVPNGatewayConnection(deleteVPNGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPNGatewayConnection(getVPNGatewayConnectionOptions *GetVPNGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		getVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetVPNGatewayConnection with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayConnectionOptions model
				getVPNGatewayConnectionOptionsModel := new(vpcv1.GetVPNGatewayConnectionOptions)
				getVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetVPNGatewayConnection(getVPNGatewayConnectionOptions *GetVPNGatewayConnectionOptions)`, func() {
		version := "testString"
		getVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}`)
				}))
			})
			It(`Invoke GetVPNGatewayConnection successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetVPNGatewayConnectionOptions model
				getVPNGatewayConnectionOptionsModel := new(vpcv1.GetVPNGatewayConnectionOptions)
				getVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetVPNGatewayConnectionWithContext(ctx, getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetVPNGatewayConnectionWithContext(ctx, getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}`)
				}))
			})
			It(`Invoke GetVPNGatewayConnection successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetVPNGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetVPNGatewayConnectionOptions model
				getVPNGatewayConnectionOptionsModel := new(vpcv1.GetVPNGatewayConnectionOptions)
				getVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetVPNGatewayConnection with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayConnectionOptions model
				getVPNGatewayConnectionOptionsModel := new(vpcv1.GetVPNGatewayConnectionOptions)
				getVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetVPNGatewayConnectionOptions model with no property values
				getVPNGatewayConnectionOptionsModelNew := new(vpcv1.GetVPNGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetVPNGatewayConnection successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetVPNGatewayConnectionOptions model
				getVPNGatewayConnectionOptionsModel := new(vpcv1.GetVPNGatewayConnectionOptions)
				getVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				getVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetVPNGatewayConnection(getVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptions *UpdateVPNGatewayConnectionOptions) - Operation response error`, func() {
		version := "testString"
		updateVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateVPNGatewayConnection with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPatchVPNGatewayConnectionStaticRouteModePatch model
				vpnGatewayConnectionPatchModel := new(vpcv1.VPNGatewayConnectionPatch)
				vpnGatewayConnectionPatchModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPatchModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPatchModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPatchModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPatchModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPatchModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPatchModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPatchModel.RoutingProtocol = core.StringPtr("none")
				vpnGatewayConnectionPatchModelAsPatch, asPatchErr := vpnGatewayConnectionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				updateVPNGatewayConnectionOptionsModel := new(vpcv1.UpdateVPNGatewayConnectionOptions)
				updateVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPatch = vpnGatewayConnectionPatchModelAsPatch
				updateVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptions *UpdateVPNGatewayConnectionOptions)`, func() {
		version := "testString"
		updateVPNGatewayConnectionPath := "/vpn_gateways/testString/connections/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}`)
				}))
			})
			It(`Invoke UpdateVPNGatewayConnection successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPatchVPNGatewayConnectionStaticRouteModePatch model
				vpnGatewayConnectionPatchModel := new(vpcv1.VPNGatewayConnectionPatch)
				vpnGatewayConnectionPatchModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPatchModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPatchModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPatchModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPatchModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPatchModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPatchModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPatchModel.RoutingProtocol = core.StringPtr("none")
				vpnGatewayConnectionPatchModelAsPatch, asPatchErr := vpnGatewayConnectionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				updateVPNGatewayConnectionOptionsModel := new(vpcv1.UpdateVPNGatewayConnectionOptions)
				updateVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPatch = vpnGatewayConnectionPatchModelAsPatch
				updateVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateVPNGatewayConnectionWithContext(ctx, updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateVPNGatewayConnectionWithContext(ctx, updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateVPNGatewayConnectionPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"admin_state_up": true, "authentication_mode": "psk", "created_at": "2019-01-01T12:00:00.000Z", "dead_peer_detection": {"action": "restart", "interval": 30, "timeout": 120}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b", "id": "a10a5771-dc23-442c-8460-c3601d8542f7", "ike_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ike-policy", "resource_type": "ike_policy"}, "ipsec_policy": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b", "id": "ddf51bec-3424-11e8-b467-0ed5f89f718b", "name": "my-ipsec-policy", "resource_type": "ipsec_policy"}, "mode": "route", "name": "my-vpn-connection", "peer_address": "169.21.50.5", "psk": "lkj14b1oi0alcniejkso", "resource_type": "vpn_gateway_connection", "status": "down", "routing_protocol": "none", "tunnels": [{"public_ip": {"address": "192.168.3.4"}, "status": "up"}]}`)
				}))
			})
			It(`Invoke UpdateVPNGatewayConnection successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateVPNGatewayConnection(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPatchVPNGatewayConnectionStaticRouteModePatch model
				vpnGatewayConnectionPatchModel := new(vpcv1.VPNGatewayConnectionPatch)
				vpnGatewayConnectionPatchModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPatchModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPatchModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPatchModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPatchModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPatchModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPatchModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPatchModel.RoutingProtocol = core.StringPtr("none")
				vpnGatewayConnectionPatchModelAsPatch, asPatchErr := vpnGatewayConnectionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				updateVPNGatewayConnectionOptionsModel := new(vpcv1.UpdateVPNGatewayConnectionOptions)
				updateVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPatch = vpnGatewayConnectionPatchModelAsPatch
				updateVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateVPNGatewayConnection with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPatchVPNGatewayConnectionStaticRouteModePatch model
				vpnGatewayConnectionPatchModel := new(vpcv1.VPNGatewayConnectionPatch)
				vpnGatewayConnectionPatchModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPatchModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPatchModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPatchModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPatchModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPatchModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPatchModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPatchModel.RoutingProtocol = core.StringPtr("none")
				vpnGatewayConnectionPatchModelAsPatch, asPatchErr := vpnGatewayConnectionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				updateVPNGatewayConnectionOptionsModel := new(vpcv1.UpdateVPNGatewayConnectionOptions)
				updateVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPatch = vpnGatewayConnectionPatchModelAsPatch
				updateVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateVPNGatewayConnectionOptions model with no property values
				updateVPNGatewayConnectionOptionsModelNew := new(vpcv1.UpdateVPNGatewayConnectionOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateVPNGatewayConnection successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")

				// Construct an instance of the VPNGatewayConnectionPatchVPNGatewayConnectionStaticRouteModePatch model
				vpnGatewayConnectionPatchModel := new(vpcv1.VPNGatewayConnectionPatch)
				vpnGatewayConnectionPatchModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPatchModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPatchModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPatchModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPatchModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPatchModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPatchModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPatchModel.RoutingProtocol = core.StringPtr("none")
				vpnGatewayConnectionPatchModelAsPatch, asPatchErr := vpnGatewayConnectionPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				updateVPNGatewayConnectionOptionsModel := new(vpcv1.UpdateVPNGatewayConnectionOptions)
				updateVPNGatewayConnectionOptionsModel.VPNGatewayID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.ID = core.StringPtr("testString")
				updateVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPatch = vpnGatewayConnectionPatchModelAsPatch
				updateVPNGatewayConnectionOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateVPNGatewayConnection(updateVPNGatewayConnectionOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptions *ListVPNGatewayConnectionLocalCIDRsOptions) - Operation response error`, func() {
		version := "testString"
		listVPNGatewayConnectionLocalCIDRsPath := "/vpn_gateways/testString/connections/testString/local_cidrs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewayConnectionLocalCIDRsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionLocalCIDRs with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				listVPNGatewayConnectionLocalCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptions *ListVPNGatewayConnectionLocalCIDRsOptions)`, func() {
		version := "testString"
		listVPNGatewayConnectionLocalCIDRsPath := "/vpn_gateways/testString/connections/testString/local_cidrs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewayConnectionLocalCIDRsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"local_cidrs": ["192.168.1.0/24"]}`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionLocalCIDRs successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				listVPNGatewayConnectionLocalCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVPNGatewayConnectionLocalCIDRsWithContext(ctx, listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVPNGatewayConnectionLocalCIDRsWithContext(ctx, listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewayConnectionLocalCIDRsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"local_cidrs": ["192.168.1.0/24"]}`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionLocalCIDRs successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVPNGatewayConnectionLocalCIDRs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				listVPNGatewayConnectionLocalCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVPNGatewayConnectionLocalCIDRs with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				listVPNGatewayConnectionLocalCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPNGatewayConnectionLocalCIDRsOptions model with no property values
				listVPNGatewayConnectionLocalCIDRsOptionsModelNew := new(vpcv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionLocalCIDRs successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				listVPNGatewayConnectionLocalCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionLocalCIDRsOptions)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVPNGatewayConnectionLocalCIDRs(listVPNGatewayConnectionLocalCIDRsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RemoveVPNGatewayConnectionLocalCIDR(removeVPNGatewayConnectionLocalCIDROptions *RemoveVPNGatewayConnectionLocalCIDROptions)`, func() {
		version := "testString"
		removeVPNGatewayConnectionLocalCIDRPath := "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeVPNGatewayConnectionLocalCIDRPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveVPNGatewayConnectionLocalCIDR successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.RemoveVPNGatewayConnectionLocalCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveVPNGatewayConnectionLocalCIDROptions model
				removeVPNGatewayConnectionLocalCIDROptionsModel := new(vpcv1.RemoveVPNGatewayConnectionLocalCIDROptions)
				removeVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.RemoveVPNGatewayConnectionLocalCIDR(removeVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveVPNGatewayConnectionLocalCIDR with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RemoveVPNGatewayConnectionLocalCIDROptions model
				removeVPNGatewayConnectionLocalCIDROptionsModel := new(vpcv1.RemoveVPNGatewayConnectionLocalCIDROptions)
				removeVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.RemoveVPNGatewayConnectionLocalCIDR(removeVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveVPNGatewayConnectionLocalCIDROptions model with no property values
				removeVPNGatewayConnectionLocalCIDROptionsModelNew := new(vpcv1.RemoveVPNGatewayConnectionLocalCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.RemoveVPNGatewayConnectionLocalCIDR(removeVPNGatewayConnectionLocalCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CheckVPNGatewayConnectionLocalCIDR(checkVPNGatewayConnectionLocalCIDROptions *CheckVPNGatewayConnectionLocalCIDROptions)`, func() {
		version := "testString"
		checkVPNGatewayConnectionLocalCIDRPath := "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(checkVPNGatewayConnectionLocalCIDRPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke CheckVPNGatewayConnectionLocalCIDR successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.CheckVPNGatewayConnectionLocalCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CheckVPNGatewayConnectionLocalCIDROptions model
				checkVPNGatewayConnectionLocalCIDROptionsModel := new(vpcv1.CheckVPNGatewayConnectionLocalCIDROptions)
				checkVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.CheckVPNGatewayConnectionLocalCIDR(checkVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CheckVPNGatewayConnectionLocalCIDR with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CheckVPNGatewayConnectionLocalCIDROptions model
				checkVPNGatewayConnectionLocalCIDROptionsModel := new(vpcv1.CheckVPNGatewayConnectionLocalCIDROptions)
				checkVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.CheckVPNGatewayConnectionLocalCIDR(checkVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CheckVPNGatewayConnectionLocalCIDROptions model with no property values
				checkVPNGatewayConnectionLocalCIDROptionsModelNew := new(vpcv1.CheckVPNGatewayConnectionLocalCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.CheckVPNGatewayConnectionLocalCIDR(checkVPNGatewayConnectionLocalCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddVPNGatewayConnectionLocalCIDR(addVPNGatewayConnectionLocalCIDROptions *AddVPNGatewayConnectionLocalCIDROptions)`, func() {
		version := "testString"
		addVPNGatewayConnectionLocalCIDRPath := "/vpn_gateways/testString/connections/testString/local_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addVPNGatewayConnectionLocalCIDRPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke AddVPNGatewayConnectionLocalCIDR successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.AddVPNGatewayConnectionLocalCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddVPNGatewayConnectionLocalCIDROptions model
				addVPNGatewayConnectionLocalCIDROptionsModel := new(vpcv1.AddVPNGatewayConnectionLocalCIDROptions)
				addVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.AddVPNGatewayConnectionLocalCIDR(addVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddVPNGatewayConnectionLocalCIDR with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddVPNGatewayConnectionLocalCIDROptions model
				addVPNGatewayConnectionLocalCIDROptionsModel := new(vpcv1.AddVPNGatewayConnectionLocalCIDROptions)
				addVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.ID = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.AddVPNGatewayConnectionLocalCIDR(addVPNGatewayConnectionLocalCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddVPNGatewayConnectionLocalCIDROptions model with no property values
				addVPNGatewayConnectionLocalCIDROptionsModelNew := new(vpcv1.AddVPNGatewayConnectionLocalCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.AddVPNGatewayConnectionLocalCIDR(addVPNGatewayConnectionLocalCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptions *ListVPNGatewayConnectionPeerCIDRsOptions) - Operation response error`, func() {
		version := "testString"
		listVPNGatewayConnectionPeerCIDRsPath := "/vpn_gateways/testString/connections/testString/peer_cidrs"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewayConnectionPeerCIDRsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionPeerCIDRs with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				listVPNGatewayConnectionPeerCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptions *ListVPNGatewayConnectionPeerCIDRsOptions)`, func() {
		version := "testString"
		listVPNGatewayConnectionPeerCIDRsPath := "/vpn_gateways/testString/connections/testString/peer_cidrs"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewayConnectionPeerCIDRsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"peer_cidrs": ["10.45.1.0/24"]}`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionPeerCIDRs successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				listVPNGatewayConnectionPeerCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListVPNGatewayConnectionPeerCIDRsWithContext(ctx, listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListVPNGatewayConnectionPeerCIDRsWithContext(ctx, listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listVPNGatewayConnectionPeerCIDRsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"peer_cidrs": ["10.45.1.0/24"]}`)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionPeerCIDRs successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListVPNGatewayConnectionPeerCIDRs(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				listVPNGatewayConnectionPeerCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListVPNGatewayConnectionPeerCIDRs with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				listVPNGatewayConnectionPeerCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListVPNGatewayConnectionPeerCIDRsOptions model with no property values
				listVPNGatewayConnectionPeerCIDRsOptionsModelNew := new(vpcv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListVPNGatewayConnectionPeerCIDRs successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				listVPNGatewayConnectionPeerCIDRsOptionsModel := new(vpcv1.ListVPNGatewayConnectionPeerCIDRsOptions)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.ID = core.StringPtr("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListVPNGatewayConnectionPeerCIDRs(listVPNGatewayConnectionPeerCIDRsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RemoveVPNGatewayConnectionPeerCIDR(removeVPNGatewayConnectionPeerCIDROptions *RemoveVPNGatewayConnectionPeerCIDROptions)`, func() {
		version := "testString"
		removeVPNGatewayConnectionPeerCIDRPath := "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeVPNGatewayConnectionPeerCIDRPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveVPNGatewayConnectionPeerCIDR successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.RemoveVPNGatewayConnectionPeerCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveVPNGatewayConnectionPeerCIDROptions model
				removeVPNGatewayConnectionPeerCIDROptionsModel := new(vpcv1.RemoveVPNGatewayConnectionPeerCIDROptions)
				removeVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.RemoveVPNGatewayConnectionPeerCIDR(removeVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveVPNGatewayConnectionPeerCIDR with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RemoveVPNGatewayConnectionPeerCIDROptions model
				removeVPNGatewayConnectionPeerCIDROptionsModel := new(vpcv1.RemoveVPNGatewayConnectionPeerCIDROptions)
				removeVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.RemoveVPNGatewayConnectionPeerCIDR(removeVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveVPNGatewayConnectionPeerCIDROptions model with no property values
				removeVPNGatewayConnectionPeerCIDROptionsModelNew := new(vpcv1.RemoveVPNGatewayConnectionPeerCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.RemoveVPNGatewayConnectionPeerCIDR(removeVPNGatewayConnectionPeerCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CheckVPNGatewayConnectionPeerCIDR(checkVPNGatewayConnectionPeerCIDROptions *CheckVPNGatewayConnectionPeerCIDROptions)`, func() {
		version := "testString"
		checkVPNGatewayConnectionPeerCIDRPath := "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(checkVPNGatewayConnectionPeerCIDRPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke CheckVPNGatewayConnectionPeerCIDR successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.CheckVPNGatewayConnectionPeerCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the CheckVPNGatewayConnectionPeerCIDROptions model
				checkVPNGatewayConnectionPeerCIDROptionsModel := new(vpcv1.CheckVPNGatewayConnectionPeerCIDROptions)
				checkVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.CheckVPNGatewayConnectionPeerCIDR(checkVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke CheckVPNGatewayConnectionPeerCIDR with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CheckVPNGatewayConnectionPeerCIDROptions model
				checkVPNGatewayConnectionPeerCIDROptionsModel := new(vpcv1.CheckVPNGatewayConnectionPeerCIDROptions)
				checkVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.CheckVPNGatewayConnectionPeerCIDR(checkVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the CheckVPNGatewayConnectionPeerCIDROptions model with no property values
				checkVPNGatewayConnectionPeerCIDROptionsModelNew := new(vpcv1.CheckVPNGatewayConnectionPeerCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.CheckVPNGatewayConnectionPeerCIDR(checkVPNGatewayConnectionPeerCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddVPNGatewayConnectionPeerCIDR(addVPNGatewayConnectionPeerCIDROptions *AddVPNGatewayConnectionPeerCIDROptions)`, func() {
		version := "testString"
		addVPNGatewayConnectionPeerCIDRPath := "/vpn_gateways/testString/connections/testString/peer_cidrs/testString/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addVPNGatewayConnectionPeerCIDRPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke AddVPNGatewayConnectionPeerCIDR successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.AddVPNGatewayConnectionPeerCIDR(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the AddVPNGatewayConnectionPeerCIDROptions model
				addVPNGatewayConnectionPeerCIDROptionsModel := new(vpcv1.AddVPNGatewayConnectionPeerCIDROptions)
				addVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.AddVPNGatewayConnectionPeerCIDR(addVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke AddVPNGatewayConnectionPeerCIDR with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddVPNGatewayConnectionPeerCIDROptions model
				addVPNGatewayConnectionPeerCIDROptionsModel := new(vpcv1.AddVPNGatewayConnectionPeerCIDROptions)
				addVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.ID = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength = core.StringPtr("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.AddVPNGatewayConnectionPeerCIDR(addVPNGatewayConnectionPeerCIDROptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the AddVPNGatewayConnectionPeerCIDROptions model with no property values
				addVPNGatewayConnectionPeerCIDROptionsModelNew := new(vpcv1.AddVPNGatewayConnectionPeerCIDROptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.AddVPNGatewayConnectionPeerCIDR(addVPNGatewayConnectionPeerCIDROptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerProfiles(listLoadBalancerProfilesOptions *ListLoadBalancerProfilesOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerProfilesPath := "/load_balancer/profiles"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerProfilesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerProfiles with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := new(vpcv1.ListLoadBalancerProfilesOptions)
				listLoadBalancerProfilesOptionsModel.Start = core.StringPtr("testString")
				listLoadBalancerProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listLoadBalancerProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerProfiles(listLoadBalancerProfilesOptions *ListLoadBalancerProfilesOptions)`, func() {
		version := "testString"
		listLoadBalancerProfilesPath := "/load_balancer/profiles"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "profiles": [{"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "logging_supported": {"type": "fixed", "value": ["datapath"]}, "name": "network-fixed", "security_groups_supported": {"type": "fixed", "value": true}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListLoadBalancerProfiles successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := new(vpcv1.ListLoadBalancerProfilesOptions)
				listLoadBalancerProfilesOptionsModel.Start = core.StringPtr("testString")
				listLoadBalancerProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listLoadBalancerProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListLoadBalancerProfilesWithContext(ctx, listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListLoadBalancerProfilesWithContext(ctx, listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerProfilesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "profiles": [{"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "logging_supported": {"type": "fixed", "value": ["datapath"]}, "name": "network-fixed", "security_groups_supported": {"type": "fixed", "value": true}}], "total_count": 132}`)
				}))
			})
			It(`Invoke ListLoadBalancerProfiles successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListLoadBalancerProfiles(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := new(vpcv1.ListLoadBalancerProfilesOptions)
				listLoadBalancerProfilesOptionsModel.Start = core.StringPtr("testString")
				listLoadBalancerProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listLoadBalancerProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLoadBalancerProfiles with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := new(vpcv1.ListLoadBalancerProfilesOptions)
				listLoadBalancerProfilesOptionsModel.Start = core.StringPtr("testString")
				listLoadBalancerProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listLoadBalancerProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListLoadBalancerProfiles successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := new(vpcv1.ListLoadBalancerProfilesOptions)
				listLoadBalancerProfilesOptionsModel.Start = core.StringPtr("testString")
				listLoadBalancerProfilesOptionsModel.Limit = core.Int64Ptr(int64(1))
				listLoadBalancerProfilesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListLoadBalancerProfiles(listLoadBalancerProfilesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerProfile(getLoadBalancerProfileOptions *GetLoadBalancerProfileOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerProfilePath := "/load_balancer/profiles/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerProfilePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerProfile with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerProfileOptions model
				getLoadBalancerProfileOptionsModel := new(vpcv1.GetLoadBalancerProfileOptions)
				getLoadBalancerProfileOptionsModel.Name = core.StringPtr("testString")
				getLoadBalancerProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerProfile(getLoadBalancerProfileOptions *GetLoadBalancerProfileOptions)`, func() {
		version := "testString"
		getLoadBalancerProfilePath := "/load_balancer/profiles/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "logging_supported": {"type": "fixed", "value": ["datapath"]}, "name": "network-fixed", "security_groups_supported": {"type": "fixed", "value": true}}`)
				}))
			})
			It(`Invoke GetLoadBalancerProfile successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetLoadBalancerProfileOptions model
				getLoadBalancerProfileOptionsModel := new(vpcv1.GetLoadBalancerProfileOptions)
				getLoadBalancerProfileOptionsModel.Name = core.StringPtr("testString")
				getLoadBalancerProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetLoadBalancerProfileWithContext(ctx, getLoadBalancerProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetLoadBalancerProfileWithContext(ctx, getLoadBalancerProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerProfilePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "logging_supported": {"type": "fixed", "value": ["datapath"]}, "name": "network-fixed", "security_groups_supported": {"type": "fixed", "value": true}}`)
				}))
			})
			It(`Invoke GetLoadBalancerProfile successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetLoadBalancerProfile(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerProfileOptions model
				getLoadBalancerProfileOptionsModel := new(vpcv1.GetLoadBalancerProfileOptions)
				getLoadBalancerProfileOptionsModel.Name = core.StringPtr("testString")
				getLoadBalancerProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoadBalancerProfile with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerProfileOptions model
				getLoadBalancerProfileOptionsModel := new(vpcv1.GetLoadBalancerProfileOptions)
				getLoadBalancerProfileOptionsModel.Name = core.StringPtr("testString")
				getLoadBalancerProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerProfileOptions model with no property values
				getLoadBalancerProfileOptionsModelNew := new(vpcv1.GetLoadBalancerProfileOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLoadBalancerProfile successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerProfileOptions model
				getLoadBalancerProfileOptionsModel := new(vpcv1.GetLoadBalancerProfileOptions)
				getLoadBalancerProfileOptionsModel.Name = core.StringPtr("testString")
				getLoadBalancerProfileOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetLoadBalancerProfile(getLoadBalancerProfileOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancers(listLoadBalancersOptions *ListLoadBalancersOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancersPath := "/load_balancers"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancers with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancers(listLoadBalancersOptions *ListLoadBalancersOptions)`, func() {
		version := "testString"
		listLoadBalancersPath := "/load_balancers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"load_balancers": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "my-load-balancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "logging": {"datapath": {"active": true}}, "name": "my-load-balancer", "operating_status": "offline", "pools": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "profile": {"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "name": "network-fixed"}, "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "security_groups_supported": false, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}`)
				}))
			})
			It(`Invoke ListLoadBalancers successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListLoadBalancersWithContext(ctx, listLoadBalancersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListLoadBalancersWithContext(ctx, listLoadBalancersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"load_balancers": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "my-load-balancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "logging": {"datapath": {"active": true}}, "name": "my-load-balancer", "operating_status": "offline", "pools": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "profile": {"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "name": "network-fixed"}, "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "security_groups_supported": false, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}]}`)
				}))
			})
			It(`Invoke ListLoadBalancers successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListLoadBalancers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLoadBalancers with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListLoadBalancers successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := new(vpcv1.ListLoadBalancersOptions)
				listLoadBalancersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListLoadBalancers(listLoadBalancersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancer(createLoadBalancerOptions *CreateLoadBalancerOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerPath := "/load_balancers"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancer with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-fixed")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Listeners = []vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Logging = loadBalancerLoggingModel
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Pools = []vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.Profile = loadBalancerProfileIdentityModel
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancer(createLoadBalancerOptions *CreateLoadBalancerOptions)`, func() {
		version := "testString"
		createLoadBalancerPath := "/load_balancers"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "my-load-balancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "logging": {"datapath": {"active": true}}, "name": "my-load-balancer", "operating_status": "offline", "pools": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "profile": {"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "name": "network-fixed"}, "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "security_groups_supported": false, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateLoadBalancer successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-fixed")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Listeners = []vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Logging = loadBalancerLoggingModel
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Pools = []vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.Profile = loadBalancerProfileIdentityModel
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateLoadBalancerWithContext(ctx, createLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateLoadBalancerWithContext(ctx, createLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "my-load-balancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "logging": {"datapath": {"active": true}}, "name": "my-load-balancer", "operating_status": "offline", "pools": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "profile": {"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "name": "network-fixed"}, "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "security_groups_supported": false, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke CreateLoadBalancer successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-fixed")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Listeners = []vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Logging = loadBalancerLoggingModel
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Pools = []vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.Profile = loadBalancerProfileIdentityModel
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateLoadBalancer with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-fixed")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Listeners = []vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Logging = loadBalancerLoggingModel
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Pools = []vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.Profile = loadBalancerProfileIdentityModel
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerOptions model with no property values
				createLoadBalancerOptionsModelNew := new(vpcv1.CreateLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateLoadBalancer(createLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateLoadBalancer successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				loadBalancerListenerPrototypeLoadBalancerContextModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-fixed")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsModel := new(vpcv1.CreateLoadBalancerOptions)
				createLoadBalancerOptionsModel.IsPublic = core.BoolPtr(true)
				createLoadBalancerOptionsModel.Subnets = []vpcv1.SubnetIdentityIntf{subnetIdentityModel}
				createLoadBalancerOptionsModel.Listeners = []vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}
				createLoadBalancerOptionsModel.Logging = loadBalancerLoggingModel
				createLoadBalancerOptionsModel.Name = core.StringPtr("my-load-balancer")
				createLoadBalancerOptionsModel.Pools = []vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}
				createLoadBalancerOptionsModel.Profile = loadBalancerProfileIdentityModel
				createLoadBalancerOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createLoadBalancerOptionsModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				createLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateLoadBalancer(createLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteLoadBalancer(deleteLoadBalancerOptions *DeleteLoadBalancerOptions)`, func() {
		version := "testString"
		deleteLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteLoadBalancerPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancer successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerOptions model
				deleteLoadBalancerOptionsModel := new(vpcv1.DeleteLoadBalancerOptions)
				deleteLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteLoadBalancer(deleteLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancer with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerOptions model
				deleteLoadBalancerOptionsModel := new(vpcv1.DeleteLoadBalancerOptions)
				deleteLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteLoadBalancer(deleteLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerOptions model with no property values
				deleteLoadBalancerOptionsModelNew := new(vpcv1.DeleteLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteLoadBalancer(deleteLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancer(getLoadBalancerOptions *GetLoadBalancerOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancer with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancer(getLoadBalancerOptions *GetLoadBalancerOptions)`, func() {
		version := "testString"
		getLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "my-load-balancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "logging": {"datapath": {"active": true}}, "name": "my-load-balancer", "operating_status": "offline", "pools": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "profile": {"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "name": "network-fixed"}, "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "security_groups_supported": false, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetLoadBalancer successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetLoadBalancerWithContext(ctx, getLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetLoadBalancerWithContext(ctx, getLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "my-load-balancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "logging": {"datapath": {"active": true}}, "name": "my-load-balancer", "operating_status": "offline", "pools": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "profile": {"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "name": "network-fixed"}, "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "security_groups_supported": false, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke GetLoadBalancer successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoadBalancer with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerOptions model with no property values
				getLoadBalancerOptionsModelNew := new(vpcv1.GetLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetLoadBalancer(getLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLoadBalancer successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerOptions model
				getLoadBalancerOptionsModel := new(vpcv1.GetLoadBalancerOptions)
				getLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetLoadBalancer(getLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancer(updateLoadBalancerOptions *UpdateLoadBalancerOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancer with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPatch model
				loadBalancerPatchModel := new(vpcv1.LoadBalancerPatch)
				loadBalancerPatchModel.Logging = loadBalancerLoggingModel
				loadBalancerPatchModel.Name = core.StringPtr("my-load-balancer")
				loadBalancerPatchModelAsPatch, asPatchErr := loadBalancerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.LoadBalancerPatch = loadBalancerPatchModelAsPatch
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancer(updateLoadBalancerOptions *UpdateLoadBalancerOptions)`, func() {
		version := "testString"
		updateLoadBalancerPath := "/load_balancers/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "my-load-balancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "logging": {"datapath": {"active": true}}, "name": "my-load-balancer", "operating_status": "offline", "pools": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "profile": {"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "name": "network-fixed"}, "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "security_groups_supported": false, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateLoadBalancer successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPatch model
				loadBalancerPatchModel := new(vpcv1.LoadBalancerPatch)
				loadBalancerPatchModel.Logging = loadBalancerLoggingModel
				loadBalancerPatchModel.Name = core.StringPtr("my-load-balancer")
				loadBalancerPatchModelAsPatch, asPatchErr := loadBalancerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.LoadBalancerPatch = loadBalancerPatchModelAsPatch
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateLoadBalancerWithContext(ctx, updateLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateLoadBalancerWithContext(ctx, updateLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "hostname": "my-load-balancer-123456-us-south-1.lb.bluemix.net", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "id": "dd754295-e9e0-4c9d-bf6c-58fbc59e5727", "is_public": true, "listeners": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "logging": {"datapath": {"active": true}}, "name": "my-load-balancer", "operating_status": "offline", "pools": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}], "private_ips": [{"address": "192.168.3.4"}], "profile": {"family": "network", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed", "name": "network-fixed"}, "provisioning_status": "active", "public_ips": [{"address": "192.168.3.4"}], "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "security_groups": [{"crn": "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271", "id": "be5df5ca-12a0-494b-907e-aa6ec2bfa271", "name": "my-security-group"}], "security_groups_supported": false, "subnets": [{"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "id": "7ec86020-1c6e-4889-b3f0-a15f2e50f87e", "name": "my-subnet"}]}`)
				}))
			})
			It(`Invoke UpdateLoadBalancer successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateLoadBalancer(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPatch model
				loadBalancerPatchModel := new(vpcv1.LoadBalancerPatch)
				loadBalancerPatchModel.Logging = loadBalancerLoggingModel
				loadBalancerPatchModel.Name = core.StringPtr("my-load-balancer")
				loadBalancerPatchModelAsPatch, asPatchErr := loadBalancerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.LoadBalancerPatch = loadBalancerPatchModelAsPatch
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateLoadBalancer with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPatch model
				loadBalancerPatchModel := new(vpcv1.LoadBalancerPatch)
				loadBalancerPatchModel.Logging = loadBalancerLoggingModel
				loadBalancerPatchModel.Name = core.StringPtr("my-load-balancer")
				loadBalancerPatchModelAsPatch, asPatchErr := loadBalancerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.LoadBalancerPatch = loadBalancerPatchModelAsPatch
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerOptions model with no property values
				updateLoadBalancerOptionsModelNew := new(vpcv1.UpdateLoadBalancerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateLoadBalancer(updateLoadBalancerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateLoadBalancer successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel

				// Construct an instance of the LoadBalancerPatch model
				loadBalancerPatchModel := new(vpcv1.LoadBalancerPatch)
				loadBalancerPatchModel.Logging = loadBalancerLoggingModel
				loadBalancerPatchModel.Name = core.StringPtr("my-load-balancer")
				loadBalancerPatchModelAsPatch, asPatchErr := loadBalancerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerOptions model
				updateLoadBalancerOptionsModel := new(vpcv1.UpdateLoadBalancerOptions)
				updateLoadBalancerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerOptionsModel.LoadBalancerPatch = loadBalancerPatchModelAsPatch
				updateLoadBalancerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateLoadBalancer(updateLoadBalancerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerStatistics(getLoadBalancerStatisticsOptions *GetLoadBalancerStatisticsOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerStatisticsPath := "/load_balancers/testString/statistics"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerStatisticsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerStatistics with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerStatistics(getLoadBalancerStatisticsOptions *GetLoadBalancerStatisticsOptions)`, func() {
		version := "testString"
		getLoadBalancerStatisticsPath := "/load_balancers/testString/statistics"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerStatisticsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active_connections": 797, "connection_rate": 91.121, "data_processed_this_month": 10093173145, "throughput": 167.278}`)
				}))
			})
			It(`Invoke GetLoadBalancerStatistics successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetLoadBalancerStatisticsWithContext(ctx, getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetLoadBalancerStatisticsWithContext(ctx, getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerStatisticsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active_connections": 797, "connection_rate": 91.121, "data_processed_this_month": 10093173145, "throughput": 167.278}`)
				}))
			})
			It(`Invoke GetLoadBalancerStatistics successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetLoadBalancerStatistics(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoadBalancerStatistics with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerStatisticsOptions model with no property values
				getLoadBalancerStatisticsOptionsModelNew := new(vpcv1.GetLoadBalancerStatisticsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLoadBalancerStatistics successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				getLoadBalancerStatisticsOptionsModel := new(vpcv1.GetLoadBalancerStatisticsOptions)
				getLoadBalancerStatisticsOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerStatisticsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetLoadBalancerStatistics(getLoadBalancerStatisticsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListeners(listLoadBalancerListenersOptions *ListLoadBalancerListenersOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerListenersPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerListenersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerListeners with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListeners(listLoadBalancerListenersOptions *ListLoadBalancerListenersOptions)`, func() {
		version := "testString"
		listLoadBalancerListenersPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerListenersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"listeners": [{"accept_proxy_protocol": true, "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00.000Z", "default_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListeners successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListLoadBalancerListenersWithContext(ctx, listLoadBalancerListenersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListLoadBalancerListenersWithContext(ctx, listLoadBalancerListenersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerListenersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"listeners": [{"accept_proxy_protocol": true, "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00.000Z", "default_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListeners successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListLoadBalancerListeners(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLoadBalancerListeners with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerListenersOptions model with no property values
				listLoadBalancerListenersOptionsModelNew := new(vpcv1.ListLoadBalancerListenersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListLoadBalancerListeners successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenersOptions model
				listLoadBalancerListenersOptionsModel := new(vpcv1.ListLoadBalancerListenersOptions)
				listLoadBalancerListenersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListLoadBalancerListeners(listLoadBalancerListenersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListener(createLoadBalancerListenerOptions *CreateLoadBalancerListenerOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerListenerPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerListener with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyTargetPrototypeModel

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.AcceptProxyProtocol = core.BoolPtr(true)
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListener(createLoadBalancerListenerOptions *CreateLoadBalancerListenerOptions)`, func() {
		version := "testString"
		createLoadBalancerListenerPath := "/load_balancers/testString/listeners"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"accept_proxy_protocol": true, "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00.000Z", "default_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListener successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyTargetPrototypeModel

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.AcceptProxyProtocol = core.BoolPtr(true)
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateLoadBalancerListenerWithContext(ctx, createLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateLoadBalancerListenerWithContext(ctx, createLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"accept_proxy_protocol": true, "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00.000Z", "default_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListener successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyTargetPrototypeModel

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.AcceptProxyProtocol = core.BoolPtr(true)
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateLoadBalancerListener with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyTargetPrototypeModel

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.AcceptProxyProtocol = core.BoolPtr(true)
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerListenerOptions model with no property values
				createLoadBalancerListenerOptionsModelNew := new(vpcv1.CreateLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateLoadBalancerListener successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyTargetPrototypeModel

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				createLoadBalancerListenerOptionsModel := new(vpcv1.CreateLoadBalancerListenerOptions)
				createLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerOptionsModel.Port = core.Int64Ptr(int64(443))
				createLoadBalancerListenerOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerListenerOptionsModel.AcceptProxyProtocol = core.BoolPtr(true)
				createLoadBalancerListenerOptionsModel.CertificateInstance = certificateInstanceIdentityModel
				createLoadBalancerListenerOptionsModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				createLoadBalancerListenerOptionsModel.DefaultPool = loadBalancerPoolIdentityModel
				createLoadBalancerListenerOptionsModel.Policies = []vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}
				createLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateLoadBalancerListener(createLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteLoadBalancerListener(deleteLoadBalancerListenerOptions *DeleteLoadBalancerListenerOptions)`, func() {
		version := "testString"
		deleteLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerListener successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerOptions model
				deleteLoadBalancerListenerOptionsModel := new(vpcv1.DeleteLoadBalancerListenerOptions)
				deleteLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerListener with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerOptions model
				deleteLoadBalancerListenerOptionsModel := new(vpcv1.DeleteLoadBalancerListenerOptions)
				deleteLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerListenerOptions model with no property values
				deleteLoadBalancerListenerOptionsModelNew := new(vpcv1.DeleteLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteLoadBalancerListener(deleteLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListener(getLoadBalancerListenerOptions *GetLoadBalancerListenerOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerListener with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListener(getLoadBalancerListenerOptions *GetLoadBalancerListenerOptions)`, func() {
		version := "testString"
		getLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accept_proxy_protocol": true, "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00.000Z", "default_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke GetLoadBalancerListener successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetLoadBalancerListenerWithContext(ctx, getLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetLoadBalancerListenerWithContext(ctx, getLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accept_proxy_protocol": true, "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00.000Z", "default_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke GetLoadBalancerListener successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoadBalancerListener with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerListenerOptions model with no property values
				getLoadBalancerListenerOptionsModelNew := new(vpcv1.GetLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLoadBalancerListener successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerOptions model
				getLoadBalancerListenerOptionsModel := new(vpcv1.GetLoadBalancerListenerOptions)
				getLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetLoadBalancerListener(getLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListener(updateLoadBalancerListenerOptions *UpdateLoadBalancerListenerOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListener with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPatch model
				loadBalancerListenerPatchModel := new(vpcv1.LoadBalancerListenerPatch)
				loadBalancerListenerPatchModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPatchModel.CertificateInstance = certificateInstanceIdentityModel
				loadBalancerListenerPatchModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPatchModel.DefaultPool = loadBalancerPoolIdentityModel
				loadBalancerListenerPatchModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPatchModel.Protocol = core.StringPtr("http")
				loadBalancerListenerPatchModelAsPatch, asPatchErr := loadBalancerListenerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.LoadBalancerListenerPatch = loadBalancerListenerPatchModelAsPatch
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListener(updateLoadBalancerListenerOptions *UpdateLoadBalancerListenerOptions)`, func() {
		version := "testString"
		updateLoadBalancerListenerPath := "/load_balancers/testString/listeners/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accept_proxy_protocol": true, "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00.000Z", "default_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListener successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPatch model
				loadBalancerListenerPatchModel := new(vpcv1.LoadBalancerListenerPatch)
				loadBalancerListenerPatchModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPatchModel.CertificateInstance = certificateInstanceIdentityModel
				loadBalancerListenerPatchModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPatchModel.DefaultPool = loadBalancerPoolIdentityModel
				loadBalancerListenerPatchModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPatchModel.Protocol = core.StringPtr("http")
				loadBalancerListenerPatchModelAsPatch, asPatchErr := loadBalancerListenerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.LoadBalancerListenerPatch = loadBalancerListenerPatchModelAsPatch
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateLoadBalancerListenerWithContext(ctx, updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateLoadBalancerListenerWithContext(ctx, updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerListenerPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"accept_proxy_protocol": true, "certificate_instance": {"crn": "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"}, "connection_limit": 2000, "created_at": "2019-01-01T12:00:00.000Z", "default_pool": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "policies": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "port": 443, "protocol": "http", "provisioning_status": "active"}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListener successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateLoadBalancerListener(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPatch model
				loadBalancerListenerPatchModel := new(vpcv1.LoadBalancerListenerPatch)
				loadBalancerListenerPatchModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPatchModel.CertificateInstance = certificateInstanceIdentityModel
				loadBalancerListenerPatchModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPatchModel.DefaultPool = loadBalancerPoolIdentityModel
				loadBalancerListenerPatchModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPatchModel.Protocol = core.StringPtr("http")
				loadBalancerListenerPatchModelAsPatch, asPatchErr := loadBalancerListenerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.LoadBalancerListenerPatch = loadBalancerListenerPatchModelAsPatch
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateLoadBalancerListener with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPatch model
				loadBalancerListenerPatchModel := new(vpcv1.LoadBalancerListenerPatch)
				loadBalancerListenerPatchModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPatchModel.CertificateInstance = certificateInstanceIdentityModel
				loadBalancerListenerPatchModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPatchModel.DefaultPool = loadBalancerPoolIdentityModel
				loadBalancerListenerPatchModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPatchModel.Protocol = core.StringPtr("http")
				loadBalancerListenerPatchModelAsPatch, asPatchErr := loadBalancerListenerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.LoadBalancerListenerPatch = loadBalancerListenerPatchModelAsPatch
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerListenerOptions model with no property values
				updateLoadBalancerListenerOptionsModelNew := new(vpcv1.UpdateLoadBalancerListenerOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateLoadBalancerListener successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPatch model
				loadBalancerListenerPatchModel := new(vpcv1.LoadBalancerListenerPatch)
				loadBalancerListenerPatchModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPatchModel.CertificateInstance = certificateInstanceIdentityModel
				loadBalancerListenerPatchModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPatchModel.DefaultPool = loadBalancerPoolIdentityModel
				loadBalancerListenerPatchModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPatchModel.Protocol = core.StringPtr("http")
				loadBalancerListenerPatchModelAsPatch, asPatchErr := loadBalancerListenerPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				updateLoadBalancerListenerOptionsModel := new(vpcv1.UpdateLoadBalancerListenerOptions)
				updateLoadBalancerListenerOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerOptionsModel.LoadBalancerListenerPatch = loadBalancerListenerPatchModelAsPatch
				updateLoadBalancerListenerOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateLoadBalancerListener(updateLoadBalancerListenerOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptions *ListLoadBalancerListenerPoliciesOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerListenerPoliciesPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerListenerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicies with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptions *ListLoadBalancerListenerPoliciesOptions)`, func() {
		version := "testString"
		listLoadBalancerListenerPoliciesPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerListenerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"policies": [{"action": "forward", "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicies successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListLoadBalancerListenerPoliciesWithContext(ctx, listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListLoadBalancerListenerPoliciesWithContext(ctx, listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerListenerPoliciesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"policies": [{"action": "forward", "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicies successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicies(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLoadBalancerListenerPolicies with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerListenerPoliciesOptions model with no property values
				listLoadBalancerListenerPoliciesOptionsModelNew := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicies successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				listLoadBalancerListenerPoliciesOptionsModel := new(vpcv1.ListLoadBalancerListenerPoliciesOptions)
				listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPoliciesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicies(listLoadBalancerListenerPoliciesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptions *CreateLoadBalancerListenerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyTargetPrototypeModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptions *CreateLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"action": "forward", "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyTargetPrototypeModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateLoadBalancerListenerPolicyWithContext(ctx, createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateLoadBalancerListenerPolicyWithContext(ctx, createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"action": "forward", "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyTargetPrototypeModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyTargetPrototypeModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerListenerPolicyOptions model with no property values
				createLoadBalancerListenerPolicyOptionsModelNew := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				createLoadBalancerListenerPolicyOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyOptions)
				createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyOptionsModel.Action = core.StringPtr("forward")
				createLoadBalancerListenerPolicyOptionsModel.Priority = core.Int64Ptr(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.Name = core.StringPtr("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				createLoadBalancerListenerPolicyOptionsModel.Target = loadBalancerListenerPolicyTargetPrototypeModel
				createLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicy(createLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptions *DeleteLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		deleteLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerListenerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
				deleteLoadBalancerListenerPolicyOptionsModel := new(vpcv1.DeleteLoadBalancerListenerPolicyOptions)
				deleteLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
				deleteLoadBalancerListenerPolicyOptionsModel := new(vpcv1.DeleteLoadBalancerListenerPolicyOptions)
				deleteLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerListenerPolicyOptions model with no property values
				deleteLoadBalancerListenerPolicyOptionsModelNew := new(vpcv1.DeleteLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteLoadBalancerListenerPolicy(deleteLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptions *GetLoadBalancerListenerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptions *GetLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "forward", "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetLoadBalancerListenerPolicyWithContext(ctx, getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetLoadBalancerListenerPolicyWithContext(ctx, getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "forward", "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerListenerPolicyOptions model with no property values
				getLoadBalancerListenerPolicyOptionsModelNew := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				getLoadBalancerListenerPolicyOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyOptions)
				getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicy(getLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptions *UpdateLoadBalancerListenerPolicyOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPatchModel := new(vpcv1.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPatchModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPatch model
				loadBalancerListenerPolicyPatchModel := new(vpcv1.LoadBalancerListenerPolicyPatch)
				loadBalancerListenerPolicyPatchModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPatchModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPatchModel.Target = loadBalancerListenerPolicyTargetPatchModel
				loadBalancerListenerPolicyPatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerListenerPolicyPatch = loadBalancerListenerPolicyPatchModelAsPatch
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptions *UpdateLoadBalancerListenerPolicyOptions)`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyPath := "/load_balancers/testString/listeners/testString/policies/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "forward", "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPatchModel := new(vpcv1.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPatchModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPatch model
				loadBalancerListenerPolicyPatchModel := new(vpcv1.LoadBalancerListenerPolicyPatch)
				loadBalancerListenerPolicyPatchModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPatchModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPatchModel.Target = loadBalancerListenerPolicyTargetPatchModel
				loadBalancerListenerPolicyPatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerListenerPolicyPatch = loadBalancerListenerPolicyPatchModelAsPatch
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateLoadBalancerListenerPolicyWithContext(ctx, updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateLoadBalancerListenerPolicyWithContext(ctx, updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerListenerPolicyPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"action": "forward", "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-policy", "priority": 5, "provisioning_status": "active", "rules": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "name": "my-load-balancer-pool"}}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicy(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPatchModel := new(vpcv1.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPatchModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPatch model
				loadBalancerListenerPolicyPatchModel := new(vpcv1.LoadBalancerListenerPolicyPatch)
				loadBalancerListenerPolicyPatchModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPatchModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPatchModel.Target = loadBalancerListenerPolicyTargetPatchModel
				loadBalancerListenerPolicyPatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerListenerPolicyPatch = loadBalancerListenerPolicyPatchModelAsPatch
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateLoadBalancerListenerPolicy with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPatchModel := new(vpcv1.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPatchModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPatch model
				loadBalancerListenerPolicyPatchModel := new(vpcv1.LoadBalancerListenerPolicyPatch)
				loadBalancerListenerPolicyPatchModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPatchModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPatchModel.Target = loadBalancerListenerPolicyTargetPatchModel
				loadBalancerListenerPolicyPatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerListenerPolicyPatch = loadBalancerListenerPolicyPatchModelAsPatch
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerListenerPolicyOptions model with no property values
				updateLoadBalancerListenerPolicyOptionsModelNew := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicy successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPatchModel := new(vpcv1.LoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				loadBalancerListenerPolicyTargetPatchModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")

				// Construct an instance of the LoadBalancerListenerPolicyPatch model
				loadBalancerListenerPolicyPatchModel := new(vpcv1.LoadBalancerListenerPolicyPatch)
				loadBalancerListenerPolicyPatchModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPatchModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPatchModel.Target = loadBalancerListenerPolicyTargetPatchModel
				loadBalancerListenerPolicyPatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				updateLoadBalancerListenerPolicyOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyOptions)
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerListenerPolicyPatch = loadBalancerListenerPolicyPatchModelAsPatch
				updateLoadBalancerListenerPolicyOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicy(updateLoadBalancerListenerPolicyOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptions *ListLoadBalancerListenerPolicyRulesOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerListenerPolicyRulesPath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerListenerPolicyRulesPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptions *ListLoadBalancerListenerPolicyRulesOptions)`, func() {
		version := "testString"
		listLoadBalancerListenerPolicyRulesPath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerListenerPolicyRulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"rules": [{"condition": "contains", "created_at": "2019-01-01T12:00:00.000Z", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListLoadBalancerListenerPolicyRulesWithContext(ctx, listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListLoadBalancerListenerPolicyRulesWithContext(ctx, listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerListenerPolicyRulesPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"rules": [{"condition": "contains", "created_at": "2019-01-01T12:00:00.000Z", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicyRules(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLoadBalancerListenerPolicyRules with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerListenerPolicyRulesOptions model with no property values
				listLoadBalancerListenerPolicyRulesOptionsModelNew := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListLoadBalancerListenerPolicyRules successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				listLoadBalancerListenerPolicyRulesOptionsModel := new(vpcv1.ListLoadBalancerListenerPolicyRulesOptions)
				listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID = core.StringPtr("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListLoadBalancerListenerPolicyRules(listLoadBalancerListenerPolicyRulesOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptions *CreateLoadBalancerListenerPolicyRuleOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptions *CreateLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		createLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"condition": "contains", "created_at": "2019-01-01T12:00:00.000Z", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateLoadBalancerListenerPolicyRuleWithContext(ctx, createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateLoadBalancerListenerPolicyRuleWithContext(ctx, createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"condition": "contains", "created_at": "2019-01-01T12:00:00.000Z", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}`)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerListenerPolicyRuleOptions model with no property values
				createLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateLoadBalancerListenerPolicyRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				createLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.CreateLoadBalancerListenerPolicyRuleOptions)
				createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Condition = core.StringPtr("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.Type = core.StringPtr("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.Value = core.StringPtr("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.Field = core.StringPtr("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateLoadBalancerListenerPolicyRule(createLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptions *DeleteLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		deleteLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerListenerPolicyRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
				deleteLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.DeleteLoadBalancerListenerPolicyRuleOptions)
				deleteLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
				deleteLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.DeleteLoadBalancerListenerPolicyRuleOptions)
				deleteLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerListenerPolicyRuleOptions model with no property values
				deleteLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcv1.DeleteLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteLoadBalancerListenerPolicyRule(deleteLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptions *GetLoadBalancerListenerPolicyRuleOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptions *GetLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		getLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"condition": "contains", "created_at": "2019-01-01T12:00:00.000Z", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetLoadBalancerListenerPolicyRuleWithContext(ctx, getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetLoadBalancerListenerPolicyRuleWithContext(ctx, getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"condition": "contains", "created_at": "2019-01-01T12:00:00.000Z", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}`)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerListenerPolicyRuleOptions model with no property values
				getLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLoadBalancerListenerPolicyRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				getLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.GetLoadBalancerListenerPolicyRuleOptions)
				getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetLoadBalancerListenerPolicyRule(getLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptions *UpdateLoadBalancerListenerPolicyRuleOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyRulePatch model
				loadBalancerListenerPolicyRulePatchModel := new(vpcv1.LoadBalancerListenerPolicyRulePatch)
				loadBalancerListenerPolicyRulePatchModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePatchModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePatchModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePatchModel.Value = core.StringPtr("testString")
				loadBalancerListenerPolicyRulePatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerListenerPolicyRulePatch = loadBalancerListenerPolicyRulePatchModelAsPatch
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptions *UpdateLoadBalancerListenerPolicyRuleOptions)`, func() {
		version := "testString"
		updateLoadBalancerListenerPolicyRulePath := "/load_balancers/testString/listeners/testString/policies/testString/rules/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"condition": "contains", "created_at": "2019-01-01T12:00:00.000Z", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the LoadBalancerListenerPolicyRulePatch model
				loadBalancerListenerPolicyRulePatchModel := new(vpcv1.LoadBalancerListenerPolicyRulePatch)
				loadBalancerListenerPolicyRulePatchModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePatchModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePatchModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePatchModel.Value = core.StringPtr("testString")
				loadBalancerListenerPolicyRulePatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerListenerPolicyRulePatch = loadBalancerListenerPolicyRulePatchModelAsPatch
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateLoadBalancerListenerPolicyRuleWithContext(ctx, updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateLoadBalancerListenerPolicyRuleWithContext(ctx, updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerListenerPolicyRulePath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"condition": "contains", "created_at": "2019-01-01T12:00:00.000Z", "field": "MY-APP-HEADER", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/listeners/70294e14-4e61-11e8-bcf4-0242ac110004/policies/f3187486-7b27-4c79-990c-47d33c0e2278/rules/873a84b0-84d6-49c6-8948-1fa527b25762", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "provisioning_status": "active", "type": "header", "value": "Value"}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicyRule(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyRulePatch model
				loadBalancerListenerPolicyRulePatchModel := new(vpcv1.LoadBalancerListenerPolicyRulePatch)
				loadBalancerListenerPolicyRulePatchModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePatchModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePatchModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePatchModel.Value = core.StringPtr("testString")
				loadBalancerListenerPolicyRulePatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerListenerPolicyRulePatch = loadBalancerListenerPolicyRulePatchModelAsPatch
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyRulePatch model
				loadBalancerListenerPolicyRulePatchModel := new(vpcv1.LoadBalancerListenerPolicyRulePatch)
				loadBalancerListenerPolicyRulePatchModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePatchModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePatchModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePatchModel.Value = core.StringPtr("testString")
				loadBalancerListenerPolicyRulePatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerListenerPolicyRulePatch = loadBalancerListenerPolicyRulePatchModelAsPatch
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerListenerPolicyRuleOptions model with no property values
				updateLoadBalancerListenerPolicyRuleOptionsModelNew := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateLoadBalancerListenerPolicyRule successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerListenerPolicyRulePatch model
				loadBalancerListenerPolicyRulePatchModel := new(vpcv1.LoadBalancerListenerPolicyRulePatch)
				loadBalancerListenerPolicyRulePatchModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePatchModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePatchModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePatchModel.Value = core.StringPtr("testString")
				loadBalancerListenerPolicyRulePatchModelAsPatch, asPatchErr := loadBalancerListenerPolicyRulePatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				updateLoadBalancerListenerPolicyRuleOptionsModel := new(vpcv1.UpdateLoadBalancerListenerPolicyRuleOptions)
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerListenerPolicyRulePatch = loadBalancerListenerPolicyRulePatchModelAsPatch
				updateLoadBalancerListenerPolicyRuleOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateLoadBalancerListenerPolicyRule(updateLoadBalancerListenerPolicyRuleOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerPools(listLoadBalancerPoolsOptions *ListLoadBalancerPoolsOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerPoolsPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerPoolsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerPools with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerPools(listLoadBalancerPoolsOptions *ListLoadBalancerPoolsOptions)`, func() {
		version := "testString"
		listLoadBalancerPoolsPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerPoolsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"pools": [{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00.000Z", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "instance_group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "proxy_protocol": "disabled", "session_persistence": {"type": "source_ip"}}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerPools successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListLoadBalancerPoolsWithContext(ctx, listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListLoadBalancerPoolsWithContext(ctx, listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerPoolsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"pools": [{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00.000Z", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "instance_group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "proxy_protocol": "disabled", "session_persistence": {"type": "source_ip"}}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerPools successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListLoadBalancerPools(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLoadBalancerPools with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerPoolsOptions model with no property values
				listLoadBalancerPoolsOptionsModelNew := new(vpcv1.ListLoadBalancerPoolsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListLoadBalancerPools successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolsOptions model
				listLoadBalancerPoolsOptionsModel := new(vpcv1.ListLoadBalancerPoolsOptions)
				listLoadBalancerPoolsOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListLoadBalancerPools(listLoadBalancerPoolsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerPool(createLoadBalancerPoolOptions *CreateLoadBalancerPoolOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerPoolPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerPool with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerPoolOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.ProxyProtocol = core.StringPtr("disabled")
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerPool(createLoadBalancerPoolOptions *CreateLoadBalancerPoolOptions)`, func() {
		version := "testString"
		createLoadBalancerPoolPath := "/load_balancers/testString/pools"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00.000Z", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "instance_group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "proxy_protocol": "disabled", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke CreateLoadBalancerPool successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerPoolOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.ProxyProtocol = core.StringPtr("disabled")
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateLoadBalancerPoolWithContext(ctx, createLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateLoadBalancerPoolWithContext(ctx, createLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00.000Z", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "instance_group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "proxy_protocol": "disabled", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke CreateLoadBalancerPool successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerPoolOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.ProxyProtocol = core.StringPtr("disabled")
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateLoadBalancerPool with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerPoolOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.ProxyProtocol = core.StringPtr("disabled")
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerPoolOptions model with no property values
				createLoadBalancerPoolOptionsModelNew := new(vpcv1.CreateLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateLoadBalancerPool successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				createLoadBalancerPoolOptionsModel := new(vpcv1.CreateLoadBalancerPoolOptions)
				createLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolOptionsModel.Algorithm = core.StringPtr("least_connections")
				createLoadBalancerPoolOptionsModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				createLoadBalancerPoolOptionsModel.Protocol = core.StringPtr("http")
				createLoadBalancerPoolOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				createLoadBalancerPoolOptionsModel.Name = core.StringPtr("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.ProxyProtocol = core.StringPtr("disabled")
				createLoadBalancerPoolOptionsModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				createLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateLoadBalancerPool(createLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteLoadBalancerPool(deleteLoadBalancerPoolOptions *DeleteLoadBalancerPoolOptions)`, func() {
		version := "testString"
		deleteLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerPool successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolOptions model
				deleteLoadBalancerPoolOptionsModel := new(vpcv1.DeleteLoadBalancerPoolOptions)
				deleteLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerPool with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolOptions model
				deleteLoadBalancerPoolOptionsModel := new(vpcv1.DeleteLoadBalancerPoolOptions)
				deleteLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerPoolOptions model with no property values
				deleteLoadBalancerPoolOptionsModelNew := new(vpcv1.DeleteLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteLoadBalancerPool(deleteLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerPool(getLoadBalancerPoolOptions *GetLoadBalancerPoolOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerPool with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerPool(getLoadBalancerPoolOptions *GetLoadBalancerPoolOptions)`, func() {
		version := "testString"
		getLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00.000Z", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "instance_group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "proxy_protocol": "disabled", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke GetLoadBalancerPool successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetLoadBalancerPoolWithContext(ctx, getLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetLoadBalancerPoolWithContext(ctx, getLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00.000Z", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "instance_group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "proxy_protocol": "disabled", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke GetLoadBalancerPool successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoadBalancerPool with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerPoolOptions model with no property values
				getLoadBalancerPoolOptionsModelNew := new(vpcv1.GetLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLoadBalancerPool successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolOptions model
				getLoadBalancerPoolOptionsModel := new(vpcv1.GetLoadBalancerPoolOptions)
				getLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetLoadBalancerPool(getLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerPool(updateLoadBalancerPoolOptions *UpdateLoadBalancerPoolOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPool with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPatchModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPatch model
				loadBalancerPoolPatchModel := new(vpcv1.LoadBalancerPoolPatch)
				loadBalancerPoolPatchModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPatchModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				loadBalancerPoolPatchModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPatchModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPatchModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPatchModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				loadBalancerPoolPatchModelAsPatch, asPatchErr := loadBalancerPoolPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.LoadBalancerPoolPatch = loadBalancerPoolPatchModelAsPatch
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerPool(updateLoadBalancerPoolOptions *UpdateLoadBalancerPoolOptions)`, func() {
		version := "testString"
		updateLoadBalancerPoolPath := "/load_balancers/testString/pools/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00.000Z", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "instance_group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "proxy_protocol": "disabled", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPool successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPatchModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPatch model
				loadBalancerPoolPatchModel := new(vpcv1.LoadBalancerPoolPatch)
				loadBalancerPoolPatchModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPatchModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				loadBalancerPoolPatchModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPatchModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPatchModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPatchModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				loadBalancerPoolPatchModelAsPatch, asPatchErr := loadBalancerPoolPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.LoadBalancerPoolPatch = loadBalancerPoolPatchModelAsPatch
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateLoadBalancerPoolWithContext(ctx, updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateLoadBalancerPoolWithContext(ctx, updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerPoolPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"algorithm": "least_connections", "created_at": "2019-01-01T12:00:00.000Z", "health_monitor": {"delay": 5, "max_retries": 2, "port": 22, "timeout": 2, "type": "http", "url_path": "/"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "instance_group": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-group:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance-group"}, "members": [{"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004"}], "name": "my-load-balancer-pool", "protocol": "http", "provisioning_status": "active", "proxy_protocol": "disabled", "session_persistence": {"type": "source_ip"}}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPool successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateLoadBalancerPool(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPatchModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPatch model
				loadBalancerPoolPatchModel := new(vpcv1.LoadBalancerPoolPatch)
				loadBalancerPoolPatchModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPatchModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				loadBalancerPoolPatchModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPatchModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPatchModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPatchModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				loadBalancerPoolPatchModelAsPatch, asPatchErr := loadBalancerPoolPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.LoadBalancerPoolPatch = loadBalancerPoolPatchModelAsPatch
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateLoadBalancerPool with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPatchModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPatch model
				loadBalancerPoolPatchModel := new(vpcv1.LoadBalancerPoolPatch)
				loadBalancerPoolPatchModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPatchModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				loadBalancerPoolPatchModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPatchModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPatchModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPatchModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				loadBalancerPoolPatchModelAsPatch, asPatchErr := loadBalancerPoolPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.LoadBalancerPoolPatch = loadBalancerPoolPatchModelAsPatch
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerPoolOptions model with no property values
				updateLoadBalancerPoolOptionsModelNew := new(vpcv1.UpdateLoadBalancerPoolOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateLoadBalancerPool successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolHealthMonitorPatch model
				loadBalancerPoolHealthMonitorPatchModel := new(vpcv1.LoadBalancerPoolHealthMonitorPatch)
				loadBalancerPoolHealthMonitorPatchModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPatchModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPatchModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPatchModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPatchModel.URLPath = core.StringPtr("/")

				// Construct an instance of the LoadBalancerPoolSessionPersistencePatch model
				loadBalancerPoolSessionPersistencePatchModel := new(vpcv1.LoadBalancerPoolSessionPersistencePatch)
				loadBalancerPoolSessionPersistencePatchModel.Type = core.StringPtr("source_ip")

				// Construct an instance of the LoadBalancerPoolPatch model
				loadBalancerPoolPatchModel := new(vpcv1.LoadBalancerPoolPatch)
				loadBalancerPoolPatchModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPatchModel.HealthMonitor = loadBalancerPoolHealthMonitorPatchModel
				loadBalancerPoolPatchModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPatchModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPatchModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPatchModel.SessionPersistence = loadBalancerPoolSessionPersistencePatchModel
				loadBalancerPoolPatchModelAsPatch, asPatchErr := loadBalancerPoolPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				updateLoadBalancerPoolOptionsModel := new(vpcv1.UpdateLoadBalancerPoolOptions)
				updateLoadBalancerPoolOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolOptionsModel.LoadBalancerPoolPatch = loadBalancerPoolPatchModelAsPatch
				updateLoadBalancerPoolOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateLoadBalancerPool(updateLoadBalancerPoolOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptions *ListLoadBalancerPoolMembersOptions) - Operation response error`, func() {
		version := "testString"
		listLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListLoadBalancerPoolMembers with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptions *ListLoadBalancerPoolMembersOptions)`, func() {
		version := "testString"
		listLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"members": [{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerPoolMembers successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListLoadBalancerPoolMembersWithContext(ctx, listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListLoadBalancerPoolMembersWithContext(ctx, listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"members": [{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}]}`)
				}))
			})
			It(`Invoke ListLoadBalancerPoolMembers successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListLoadBalancerPoolMembers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListLoadBalancerPoolMembers with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListLoadBalancerPoolMembersOptions model with no property values
				listLoadBalancerPoolMembersOptionsModelNew := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListLoadBalancerPoolMembers successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				listLoadBalancerPoolMembersOptionsModel := new(vpcv1.ListLoadBalancerPoolMembersOptions)
				listLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				listLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListLoadBalancerPoolMembers(listLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptions *CreateLoadBalancerPoolMemberOptions) - Operation response error`, func() {
		version := "testString"
		createLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateLoadBalancerPoolMember with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptions *CreateLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		createLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}`)
				}))
			})
			It(`Invoke CreateLoadBalancerPoolMember successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateLoadBalancerPoolMemberWithContext(ctx, createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateLoadBalancerPoolMemberWithContext(ctx, createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}`)
				}))
			})
			It(`Invoke CreateLoadBalancerPoolMember successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateLoadBalancerPoolMemberOptions model with no property values
				createLoadBalancerPoolMemberOptionsModelNew := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateLoadBalancerPoolMember successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				createLoadBalancerPoolMemberOptionsModel := new(vpcv1.CreateLoadBalancerPoolMemberOptions)
				createLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				createLoadBalancerPoolMemberOptionsModel.Port = core.Int64Ptr(int64(80))
				createLoadBalancerPoolMemberOptionsModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				createLoadBalancerPoolMemberOptionsModel.Weight = core.Int64Ptr(int64(50))
				createLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateLoadBalancerPoolMember(createLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptions *ReplaceLoadBalancerPoolMembersOptions) - Operation response error`, func() {
		version := "testString"
		replaceLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ReplaceLoadBalancerPoolMembers with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				replaceLoadBalancerPoolMembersOptionsModel := new(vpcv1.ReplaceLoadBalancerPoolMembersOptions)
				replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				replaceLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptions *ReplaceLoadBalancerPoolMembersOptions)`, func() {
		version := "testString"
		replaceLoadBalancerPoolMembersPath := "/load_balancers/testString/pools/testString/members"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"members": [{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}]}`)
				}))
			})
			It(`Invoke ReplaceLoadBalancerPoolMembers successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				replaceLoadBalancerPoolMembersOptionsModel := new(vpcv1.ReplaceLoadBalancerPoolMembersOptions)
				replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				replaceLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ReplaceLoadBalancerPoolMembersWithContext(ctx, replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ReplaceLoadBalancerPoolMembersWithContext(ctx, replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(replaceLoadBalancerPoolMembersPath))
					Expect(req.Method).To(Equal("PUT"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(202)
					fmt.Fprintf(res, "%s", `{"members": [{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}]}`)
				}))
			})
			It(`Invoke ReplaceLoadBalancerPoolMembers successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ReplaceLoadBalancerPoolMembers(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				replaceLoadBalancerPoolMembersOptionsModel := new(vpcv1.ReplaceLoadBalancerPoolMembersOptions)
				replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				replaceLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ReplaceLoadBalancerPoolMembers with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				replaceLoadBalancerPoolMembersOptionsModel := new(vpcv1.ReplaceLoadBalancerPoolMembersOptions)
				replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				replaceLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ReplaceLoadBalancerPoolMembersOptions model with no property values
				replaceLoadBalancerPoolMembersOptionsModelNew := new(vpcv1.ReplaceLoadBalancerPoolMembersOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(202)
				}))
			})
			It(`Invoke ReplaceLoadBalancerPoolMembers successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				replaceLoadBalancerPoolMembersOptionsModel := new(vpcv1.ReplaceLoadBalancerPoolMembersOptions)
				replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.PoolID = core.StringPtr("testString")
				replaceLoadBalancerPoolMembersOptionsModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				replaceLoadBalancerPoolMembersOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ReplaceLoadBalancerPoolMembers(replaceLoadBalancerPoolMembersOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptions *DeleteLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		deleteLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteLoadBalancerPoolMember successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
				deleteLoadBalancerPoolMemberOptionsModel := new(vpcv1.DeleteLoadBalancerPoolMemberOptions)
				deleteLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
				deleteLoadBalancerPoolMemberOptionsModel := new(vpcv1.DeleteLoadBalancerPoolMemberOptions)
				deleteLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				deleteLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteLoadBalancerPoolMemberOptions model with no property values
				deleteLoadBalancerPoolMemberOptionsModelNew := new(vpcv1.DeleteLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteLoadBalancerPoolMember(deleteLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptions *GetLoadBalancerPoolMemberOptions) - Operation response error`, func() {
		version := "testString"
		getLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetLoadBalancerPoolMember with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptions *GetLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		getLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}`)
				}))
			})
			It(`Invoke GetLoadBalancerPoolMember successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetLoadBalancerPoolMemberWithContext(ctx, getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetLoadBalancerPoolMemberWithContext(ctx, getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}`)
				}))
			})
			It(`Invoke GetLoadBalancerPoolMember successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetLoadBalancerPoolMemberOptions model with no property values
				getLoadBalancerPoolMemberOptionsModelNew := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetLoadBalancerPoolMember successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				getLoadBalancerPoolMemberOptionsModel := new(vpcv1.GetLoadBalancerPoolMemberOptions)
				getLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				getLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetLoadBalancerPoolMember(getLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptions *UpdateLoadBalancerPoolMemberOptions) - Operation response error`, func() {
		version := "testString"
		updateLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMember with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPatch model
				loadBalancerPoolMemberPatchModel := new(vpcv1.LoadBalancerPoolMemberPatch)
				loadBalancerPoolMemberPatchModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPatchModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPatchModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPatchModelAsPatch, asPatchErr := loadBalancerPoolMemberPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerPoolMemberPatch = loadBalancerPoolMemberPatchModelAsPatch
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptions *UpdateLoadBalancerPoolMemberOptions)`, func() {
		version := "testString"
		updateLoadBalancerPoolMemberPath := "/load_balancers/testString/pools/testString/members/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMember successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPatch model
				loadBalancerPoolMemberPatchModel := new(vpcv1.LoadBalancerPoolMemberPatch)
				loadBalancerPoolMemberPatchModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPatchModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPatchModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPatchModelAsPatch, asPatchErr := loadBalancerPoolMemberPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerPoolMemberPatch = loadBalancerPoolMemberPatchModelAsPatch
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateLoadBalancerPoolMemberWithContext(ctx, updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateLoadBalancerPoolMemberWithContext(ctx, updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateLoadBalancerPoolMemberPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "health": "faulted", "href": "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004/members/80294e14-4e61-11e8-bcf4-0242ac110004", "id": "70294e14-4e61-11e8-bcf4-0242ac110004", "port": 80, "provisioning_status": "active", "target": {"crn": "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a", "id": "1e09281b-f177-46fb-baf1-bc152b2e391a", "name": "my-instance"}, "weight": 50}`)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMember successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateLoadBalancerPoolMember(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPatch model
				loadBalancerPoolMemberPatchModel := new(vpcv1.LoadBalancerPoolMemberPatch)
				loadBalancerPoolMemberPatchModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPatchModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPatchModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPatchModelAsPatch, asPatchErr := loadBalancerPoolMemberPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerPoolMemberPatch = loadBalancerPoolMemberPatchModelAsPatch
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateLoadBalancerPoolMember with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPatch model
				loadBalancerPoolMemberPatchModel := new(vpcv1.LoadBalancerPoolMemberPatch)
				loadBalancerPoolMemberPatchModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPatchModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPatchModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPatchModelAsPatch, asPatchErr := loadBalancerPoolMemberPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerPoolMemberPatch = loadBalancerPoolMemberPatchModelAsPatch
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateLoadBalancerPoolMemberOptions model with no property values
				updateLoadBalancerPoolMemberOptionsModelNew := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateLoadBalancerPoolMember successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")

				// Construct an instance of the LoadBalancerPoolMemberPatch model
				loadBalancerPoolMemberPatchModel := new(vpcv1.LoadBalancerPoolMemberPatch)
				loadBalancerPoolMemberPatchModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPatchModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPatchModel.Weight = core.Int64Ptr(int64(50))
				loadBalancerPoolMemberPatchModelAsPatch, asPatchErr := loadBalancerPoolMemberPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				updateLoadBalancerPoolMemberOptionsModel := new(vpcv1.UpdateLoadBalancerPoolMemberOptions)
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.PoolID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.ID = core.StringPtr("testString")
				updateLoadBalancerPoolMemberOptionsModel.LoadBalancerPoolMemberPatch = loadBalancerPoolMemberPatchModelAsPatch
				updateLoadBalancerPoolMemberOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateLoadBalancerPoolMember(updateLoadBalancerPoolMemberOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListEndpointGateways(listEndpointGatewaysOptions *ListEndpointGatewaysOptions) - Operation response error`, func() {
		version := "testString"
		listEndpointGatewaysPath := "/endpoint_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listEndpointGatewaysPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListEndpointGateways with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListEndpointGatewaysOptions model
				listEndpointGatewaysOptionsModel := new(vpcv1.ListEndpointGatewaysOptions)
				listEndpointGatewaysOptionsModel.Name = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListEndpointGateways(listEndpointGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListEndpointGateways(listEndpointGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListEndpointGateways(listEndpointGatewaysOptions *ListEndpointGatewaysOptions)`, func() {
		version := "testString"
		listEndpointGatewaysPath := "/endpoint_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listEndpointGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"endpoint_gateways": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "health_state": "ok", "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "ips": [{"address": "192.168.3.4", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "resource_type": "subnet_reserved_ip"}], "lifecycle_state": "stable", "name": "my-endpoint-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "endpoint_gateway", "service_endpoint": "my-cloudant-instance.appdomain.cloud", "service_endpoints": ["my-cloudant-instance.appdomain.cloud"], "target": {"crn": "crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::", "resource_type": "provider_cloud_service"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways?start=ffd653466e284937896724b2dd044c9c&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListEndpointGateways successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListEndpointGatewaysOptions model
				listEndpointGatewaysOptionsModel := new(vpcv1.ListEndpointGatewaysOptions)
				listEndpointGatewaysOptionsModel.Name = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListEndpointGatewaysWithContext(ctx, listEndpointGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListEndpointGateways(listEndpointGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListEndpointGatewaysWithContext(ctx, listEndpointGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listEndpointGatewaysPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"endpoint_gateways": [{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "health_state": "ok", "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "ips": [{"address": "192.168.3.4", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "resource_type": "subnet_reserved_ip"}], "lifecycle_state": "stable", "name": "my-endpoint-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "endpoint_gateway", "service_endpoint": "my-cloudant-instance.appdomain.cloud", "service_endpoints": ["my-cloudant-instance.appdomain.cloud"], "target": {"crn": "crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::", "resource_type": "provider_cloud_service"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways?limit=20"}, "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways?start=ffd653466e284937896724b2dd044c9c&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListEndpointGateways successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListEndpointGateways(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListEndpointGatewaysOptions model
				listEndpointGatewaysOptionsModel := new(vpcv1.ListEndpointGatewaysOptions)
				listEndpointGatewaysOptionsModel.Name = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListEndpointGateways(listEndpointGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListEndpointGateways with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListEndpointGatewaysOptions model
				listEndpointGatewaysOptionsModel := new(vpcv1.ListEndpointGatewaysOptions)
				listEndpointGatewaysOptionsModel.Name = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListEndpointGateways(listEndpointGatewaysOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListEndpointGateways successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListEndpointGatewaysOptions model
				listEndpointGatewaysOptionsModel := new(vpcv1.ListEndpointGatewaysOptions)
				listEndpointGatewaysOptionsModel.Name = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewaysOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listEndpointGatewaysOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListEndpointGateways(listEndpointGatewaysOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateEndpointGateway(createEndpointGatewayOptions *CreateEndpointGatewayOptions) - Operation response error`, func() {
		version := "testString"
		createEndpointGatewayPath := "/endpoint_gateways"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createEndpointGatewayPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateEndpointGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN model
				endpointGatewayTargetPrototypeModel := new(vpcv1.EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN)
				endpointGatewayTargetPrototypeModel.ResourceType = core.StringPtr("provider_infrastructure_service")
				endpointGatewayTargetPrototypeModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f025b503-ae66-46de-a011-3bd08fd5f7bf")

				// Construct an instance of the EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID model
				endpointGatewayReservedIPModel := new(vpcv1.EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID)
				endpointGatewayReservedIPModel.ID = core.StringPtr("6d353a0f-aeb1-4ae1-832e-1110d10981bb")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateEndpointGatewayOptions model
				createEndpointGatewayOptionsModel := new(vpcv1.CreateEndpointGatewayOptions)
				createEndpointGatewayOptionsModel.Target = endpointGatewayTargetPrototypeModel
				createEndpointGatewayOptionsModel.VPC = vpcIdentityModel
				createEndpointGatewayOptionsModel.Ips = []vpcv1.EndpointGatewayReservedIPIntf{endpointGatewayReservedIPModel}
				createEndpointGatewayOptionsModel.Name = core.StringPtr("testString")
				createEndpointGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateEndpointGateway(createEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateEndpointGateway(createEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateEndpointGateway(createEndpointGatewayOptions *CreateEndpointGatewayOptions)`, func() {
		version := "testString"
		createEndpointGatewayPath := "/endpoint_gateways"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createEndpointGatewayPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "health_state": "ok", "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "ips": [{"address": "192.168.3.4", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "resource_type": "subnet_reserved_ip"}], "lifecycle_state": "stable", "name": "my-endpoint-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "endpoint_gateway", "service_endpoint": "my-cloudant-instance.appdomain.cloud", "service_endpoints": ["my-cloudant-instance.appdomain.cloud"], "target": {"crn": "crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::", "resource_type": "provider_cloud_service"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateEndpointGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN model
				endpointGatewayTargetPrototypeModel := new(vpcv1.EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN)
				endpointGatewayTargetPrototypeModel.ResourceType = core.StringPtr("provider_infrastructure_service")
				endpointGatewayTargetPrototypeModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f025b503-ae66-46de-a011-3bd08fd5f7bf")

				// Construct an instance of the EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID model
				endpointGatewayReservedIPModel := new(vpcv1.EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID)
				endpointGatewayReservedIPModel.ID = core.StringPtr("6d353a0f-aeb1-4ae1-832e-1110d10981bb")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateEndpointGatewayOptions model
				createEndpointGatewayOptionsModel := new(vpcv1.CreateEndpointGatewayOptions)
				createEndpointGatewayOptionsModel.Target = endpointGatewayTargetPrototypeModel
				createEndpointGatewayOptionsModel.VPC = vpcIdentityModel
				createEndpointGatewayOptionsModel.Ips = []vpcv1.EndpointGatewayReservedIPIntf{endpointGatewayReservedIPModel}
				createEndpointGatewayOptionsModel.Name = core.StringPtr("testString")
				createEndpointGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateEndpointGatewayWithContext(ctx, createEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateEndpointGateway(createEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateEndpointGatewayWithContext(ctx, createEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createEndpointGatewayPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "health_state": "ok", "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "ips": [{"address": "192.168.3.4", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "resource_type": "subnet_reserved_ip"}], "lifecycle_state": "stable", "name": "my-endpoint-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "endpoint_gateway", "service_endpoint": "my-cloudant-instance.appdomain.cloud", "service_endpoints": ["my-cloudant-instance.appdomain.cloud"], "target": {"crn": "crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::", "resource_type": "provider_cloud_service"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateEndpointGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateEndpointGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN model
				endpointGatewayTargetPrototypeModel := new(vpcv1.EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN)
				endpointGatewayTargetPrototypeModel.ResourceType = core.StringPtr("provider_infrastructure_service")
				endpointGatewayTargetPrototypeModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f025b503-ae66-46de-a011-3bd08fd5f7bf")

				// Construct an instance of the EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID model
				endpointGatewayReservedIPModel := new(vpcv1.EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID)
				endpointGatewayReservedIPModel.ID = core.StringPtr("6d353a0f-aeb1-4ae1-832e-1110d10981bb")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateEndpointGatewayOptions model
				createEndpointGatewayOptionsModel := new(vpcv1.CreateEndpointGatewayOptions)
				createEndpointGatewayOptionsModel.Target = endpointGatewayTargetPrototypeModel
				createEndpointGatewayOptionsModel.VPC = vpcIdentityModel
				createEndpointGatewayOptionsModel.Ips = []vpcv1.EndpointGatewayReservedIPIntf{endpointGatewayReservedIPModel}
				createEndpointGatewayOptionsModel.Name = core.StringPtr("testString")
				createEndpointGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateEndpointGateway(createEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateEndpointGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN model
				endpointGatewayTargetPrototypeModel := new(vpcv1.EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN)
				endpointGatewayTargetPrototypeModel.ResourceType = core.StringPtr("provider_infrastructure_service")
				endpointGatewayTargetPrototypeModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f025b503-ae66-46de-a011-3bd08fd5f7bf")

				// Construct an instance of the EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID model
				endpointGatewayReservedIPModel := new(vpcv1.EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID)
				endpointGatewayReservedIPModel.ID = core.StringPtr("6d353a0f-aeb1-4ae1-832e-1110d10981bb")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateEndpointGatewayOptions model
				createEndpointGatewayOptionsModel := new(vpcv1.CreateEndpointGatewayOptions)
				createEndpointGatewayOptionsModel.Target = endpointGatewayTargetPrototypeModel
				createEndpointGatewayOptionsModel.VPC = vpcIdentityModel
				createEndpointGatewayOptionsModel.Ips = []vpcv1.EndpointGatewayReservedIPIntf{endpointGatewayReservedIPModel}
				createEndpointGatewayOptionsModel.Name = core.StringPtr("testString")
				createEndpointGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateEndpointGateway(createEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateEndpointGatewayOptions model with no property values
				createEndpointGatewayOptionsModelNew := new(vpcv1.CreateEndpointGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateEndpointGateway(createEndpointGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateEndpointGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN model
				endpointGatewayTargetPrototypeModel := new(vpcv1.EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN)
				endpointGatewayTargetPrototypeModel.ResourceType = core.StringPtr("provider_infrastructure_service")
				endpointGatewayTargetPrototypeModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::")

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				vpcIdentityModel.ID = core.StringPtr("f025b503-ae66-46de-a011-3bd08fd5f7bf")

				// Construct an instance of the EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID model
				endpointGatewayReservedIPModel := new(vpcv1.EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID)
				endpointGatewayReservedIPModel.ID = core.StringPtr("6d353a0f-aeb1-4ae1-832e-1110d10981bb")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateEndpointGatewayOptions model
				createEndpointGatewayOptionsModel := new(vpcv1.CreateEndpointGatewayOptions)
				createEndpointGatewayOptionsModel.Target = endpointGatewayTargetPrototypeModel
				createEndpointGatewayOptionsModel.VPC = vpcIdentityModel
				createEndpointGatewayOptionsModel.Ips = []vpcv1.EndpointGatewayReservedIPIntf{endpointGatewayReservedIPModel}
				createEndpointGatewayOptionsModel.Name = core.StringPtr("testString")
				createEndpointGatewayOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateEndpointGateway(createEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListEndpointGatewayIps(listEndpointGatewayIpsOptions *ListEndpointGatewayIpsOptions) - Operation response error`, func() {
		version := "testString"
		listEndpointGatewayIpsPath := "/endpoint_gateways/testString/ips"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listEndpointGatewayIpsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"name"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListEndpointGatewayIps with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListEndpointGatewayIpsOptions model
				listEndpointGatewayIpsOptionsModel := new(vpcv1.ListEndpointGatewayIpsOptions)
				listEndpointGatewayIpsOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewayIpsOptionsModel.Sort = core.StringPtr("name")
				listEndpointGatewayIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListEndpointGatewayIps(listEndpointGatewayIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListEndpointGatewayIps(listEndpointGatewayIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListEndpointGatewayIps(listEndpointGatewayIpsOptions *ListEndpointGatewayIpsOptions)`, func() {
		version := "testString"
		listEndpointGatewayIpsPath := "/endpoint_gateways/testString/ips"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listEndpointGatewayIpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"name"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5/ips?limit=20"}, "ips": [{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5/ips?start=90ac13871b604023ab8b827178518328&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListEndpointGatewayIps successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListEndpointGatewayIpsOptions model
				listEndpointGatewayIpsOptionsModel := new(vpcv1.ListEndpointGatewayIpsOptions)
				listEndpointGatewayIpsOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewayIpsOptionsModel.Sort = core.StringPtr("name")
				listEndpointGatewayIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListEndpointGatewayIpsWithContext(ctx, listEndpointGatewayIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListEndpointGatewayIps(listEndpointGatewayIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListEndpointGatewayIpsWithContext(ctx, listEndpointGatewayIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listEndpointGatewayIpsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["sort"]).To(Equal([]string{"name"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5/ips?limit=20"}, "ips": [{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5/ips?start=90ac13871b604023ab8b827178518328&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListEndpointGatewayIps successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListEndpointGatewayIps(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListEndpointGatewayIpsOptions model
				listEndpointGatewayIpsOptionsModel := new(vpcv1.ListEndpointGatewayIpsOptions)
				listEndpointGatewayIpsOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewayIpsOptionsModel.Sort = core.StringPtr("name")
				listEndpointGatewayIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListEndpointGatewayIps(listEndpointGatewayIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListEndpointGatewayIps with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListEndpointGatewayIpsOptions model
				listEndpointGatewayIpsOptionsModel := new(vpcv1.ListEndpointGatewayIpsOptions)
				listEndpointGatewayIpsOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewayIpsOptionsModel.Sort = core.StringPtr("name")
				listEndpointGatewayIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListEndpointGatewayIps(listEndpointGatewayIpsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the ListEndpointGatewayIpsOptions model with no property values
				listEndpointGatewayIpsOptionsModelNew := new(vpcv1.ListEndpointGatewayIpsOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.ListEndpointGatewayIps(listEndpointGatewayIpsOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListEndpointGatewayIps successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListEndpointGatewayIpsOptions model
				listEndpointGatewayIpsOptionsModel := new(vpcv1.ListEndpointGatewayIpsOptions)
				listEndpointGatewayIpsOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Start = core.StringPtr("testString")
				listEndpointGatewayIpsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listEndpointGatewayIpsOptionsModel.Sort = core.StringPtr("name")
				listEndpointGatewayIpsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListEndpointGatewayIps(listEndpointGatewayIpsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`RemoveEndpointGatewayIP(removeEndpointGatewayIPOptions *RemoveEndpointGatewayIPOptions)`, func() {
		version := "testString"
		removeEndpointGatewayIPPath := "/endpoint_gateways/testString/ips/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(removeEndpointGatewayIPPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke RemoveEndpointGatewayIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.RemoveEndpointGatewayIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the RemoveEndpointGatewayIPOptions model
				removeEndpointGatewayIPOptionsModel := new(vpcv1.RemoveEndpointGatewayIPOptions)
				removeEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				removeEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				removeEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.RemoveEndpointGatewayIP(removeEndpointGatewayIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke RemoveEndpointGatewayIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the RemoveEndpointGatewayIPOptions model
				removeEndpointGatewayIPOptionsModel := new(vpcv1.RemoveEndpointGatewayIPOptions)
				removeEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				removeEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				removeEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.RemoveEndpointGatewayIP(removeEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the RemoveEndpointGatewayIPOptions model with no property values
				removeEndpointGatewayIPOptionsModelNew := new(vpcv1.RemoveEndpointGatewayIPOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.RemoveEndpointGatewayIP(removeEndpointGatewayIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetEndpointGatewayIP(getEndpointGatewayIPOptions *GetEndpointGatewayIPOptions) - Operation response error`, func() {
		version := "testString"
		getEndpointGatewayIPPath := "/endpoint_gateways/testString/ips/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getEndpointGatewayIPPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetEndpointGatewayIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetEndpointGatewayIPOptions model
				getEndpointGatewayIPOptionsModel := new(vpcv1.GetEndpointGatewayIPOptions)
				getEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetEndpointGatewayIP(getEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetEndpointGatewayIP(getEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetEndpointGatewayIP(getEndpointGatewayIPOptions *GetEndpointGatewayIPOptions)`, func() {
		version := "testString"
		getEndpointGatewayIPPath := "/endpoint_gateways/testString/ips/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getEndpointGatewayIPPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke GetEndpointGatewayIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetEndpointGatewayIPOptions model
				getEndpointGatewayIPOptionsModel := new(vpcv1.GetEndpointGatewayIPOptions)
				getEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetEndpointGatewayIPWithContext(ctx, getEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetEndpointGatewayIP(getEndpointGatewayIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetEndpointGatewayIPWithContext(ctx, getEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getEndpointGatewayIPPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke GetEndpointGatewayIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetEndpointGatewayIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetEndpointGatewayIPOptions model
				getEndpointGatewayIPOptionsModel := new(vpcv1.GetEndpointGatewayIPOptions)
				getEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetEndpointGatewayIP(getEndpointGatewayIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetEndpointGatewayIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetEndpointGatewayIPOptions model
				getEndpointGatewayIPOptionsModel := new(vpcv1.GetEndpointGatewayIPOptions)
				getEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetEndpointGatewayIP(getEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetEndpointGatewayIPOptions model with no property values
				getEndpointGatewayIPOptionsModelNew := new(vpcv1.GetEndpointGatewayIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetEndpointGatewayIP(getEndpointGatewayIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetEndpointGatewayIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetEndpointGatewayIPOptions model
				getEndpointGatewayIPOptionsModel := new(vpcv1.GetEndpointGatewayIPOptions)
				getEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetEndpointGatewayIP(getEndpointGatewayIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddEndpointGatewayIP(addEndpointGatewayIPOptions *AddEndpointGatewayIPOptions) - Operation response error`, func() {
		version := "testString"
		addEndpointGatewayIPPath := "/endpoint_gateways/testString/ips/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addEndpointGatewayIPPath))
					Expect(req.Method).To(Equal("PUT"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke AddEndpointGatewayIP with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddEndpointGatewayIPOptions model
				addEndpointGatewayIPOptionsModel := new(vpcv1.AddEndpointGatewayIPOptions)
				addEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.AddEndpointGatewayIP(addEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.AddEndpointGatewayIP(addEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`AddEndpointGatewayIP(addEndpointGatewayIPOptions *AddEndpointGatewayIPOptions)`, func() {
		version := "testString"
		addEndpointGatewayIPPath := "/endpoint_gateways/testString/ips/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addEndpointGatewayIPPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke AddEndpointGatewayIP successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the AddEndpointGatewayIPOptions model
				addEndpointGatewayIPOptionsModel := new(vpcv1.AddEndpointGatewayIPOptions)
				addEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.AddEndpointGatewayIPWithContext(ctx, addEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.AddEndpointGatewayIP(addEndpointGatewayIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.AddEndpointGatewayIPWithContext(ctx, addEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(addEndpointGatewayIPPath))
					Expect(req.Method).To(Equal("PUT"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"address": "192.168.3.4", "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "owner": "user", "resource_type": "subnet_reserved_ip", "target": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "name": "my-endpoint-gateway", "resource_type": "endpoint_gateway"}}`)
				}))
			})
			It(`Invoke AddEndpointGatewayIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.AddEndpointGatewayIP(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the AddEndpointGatewayIPOptions model
				addEndpointGatewayIPOptionsModel := new(vpcv1.AddEndpointGatewayIPOptions)
				addEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.AddEndpointGatewayIP(addEndpointGatewayIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke AddEndpointGatewayIP with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddEndpointGatewayIPOptions model
				addEndpointGatewayIPOptionsModel := new(vpcv1.AddEndpointGatewayIPOptions)
				addEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.AddEndpointGatewayIP(addEndpointGatewayIPOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the AddEndpointGatewayIPOptions model with no property values
				addEndpointGatewayIPOptionsModelNew := new(vpcv1.AddEndpointGatewayIPOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.AddEndpointGatewayIP(addEndpointGatewayIPOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke AddEndpointGatewayIP successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the AddEndpointGatewayIPOptions model
				addEndpointGatewayIPOptionsModel := new(vpcv1.AddEndpointGatewayIPOptions)
				addEndpointGatewayIPOptionsModel.EndpointGatewayID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.ID = core.StringPtr("testString")
				addEndpointGatewayIPOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.AddEndpointGatewayIP(addEndpointGatewayIPOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteEndpointGateway(deleteEndpointGatewayOptions *DeleteEndpointGatewayOptions)`, func() {
		version := "testString"
		deleteEndpointGatewayPath := "/endpoint_gateways/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteEndpointGatewayPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteEndpointGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteEndpointGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteEndpointGatewayOptions model
				deleteEndpointGatewayOptionsModel := new(vpcv1.DeleteEndpointGatewayOptions)
				deleteEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteEndpointGateway(deleteEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteEndpointGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteEndpointGatewayOptions model
				deleteEndpointGatewayOptionsModel := new(vpcv1.DeleteEndpointGatewayOptions)
				deleteEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				deleteEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteEndpointGateway(deleteEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteEndpointGatewayOptions model with no property values
				deleteEndpointGatewayOptionsModelNew := new(vpcv1.DeleteEndpointGatewayOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteEndpointGateway(deleteEndpointGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetEndpointGateway(getEndpointGatewayOptions *GetEndpointGatewayOptions) - Operation response error`, func() {
		version := "testString"
		getEndpointGatewayPath := "/endpoint_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getEndpointGatewayPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetEndpointGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetEndpointGatewayOptions model
				getEndpointGatewayOptionsModel := new(vpcv1.GetEndpointGatewayOptions)
				getEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetEndpointGateway(getEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetEndpointGateway(getEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetEndpointGateway(getEndpointGatewayOptions *GetEndpointGatewayOptions)`, func() {
		version := "testString"
		getEndpointGatewayPath := "/endpoint_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getEndpointGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "health_state": "ok", "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "ips": [{"address": "192.168.3.4", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "resource_type": "subnet_reserved_ip"}], "lifecycle_state": "stable", "name": "my-endpoint-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "endpoint_gateway", "service_endpoint": "my-cloudant-instance.appdomain.cloud", "service_endpoints": ["my-cloudant-instance.appdomain.cloud"], "target": {"crn": "crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::", "resource_type": "provider_cloud_service"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetEndpointGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetEndpointGatewayOptions model
				getEndpointGatewayOptionsModel := new(vpcv1.GetEndpointGatewayOptions)
				getEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetEndpointGatewayWithContext(ctx, getEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetEndpointGateway(getEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetEndpointGatewayWithContext(ctx, getEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getEndpointGatewayPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "health_state": "ok", "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "ips": [{"address": "192.168.3.4", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "resource_type": "subnet_reserved_ip"}], "lifecycle_state": "stable", "name": "my-endpoint-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "endpoint_gateway", "service_endpoint": "my-cloudant-instance.appdomain.cloud", "service_endpoints": ["my-cloudant-instance.appdomain.cloud"], "target": {"crn": "crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::", "resource_type": "provider_cloud_service"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetEndpointGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetEndpointGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetEndpointGatewayOptions model
				getEndpointGatewayOptionsModel := new(vpcv1.GetEndpointGatewayOptions)
				getEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetEndpointGateway(getEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetEndpointGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetEndpointGatewayOptions model
				getEndpointGatewayOptionsModel := new(vpcv1.GetEndpointGatewayOptions)
				getEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetEndpointGateway(getEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetEndpointGatewayOptions model with no property values
				getEndpointGatewayOptionsModelNew := new(vpcv1.GetEndpointGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetEndpointGateway(getEndpointGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetEndpointGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetEndpointGatewayOptions model
				getEndpointGatewayOptionsModel := new(vpcv1.GetEndpointGatewayOptions)
				getEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				getEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetEndpointGateway(getEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateEndpointGateway(updateEndpointGatewayOptions *UpdateEndpointGatewayOptions) - Operation response error`, func() {
		version := "testString"
		updateEndpointGatewayPath := "/endpoint_gateways/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateEndpointGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateEndpointGateway with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the EndpointGatewayPatch model
				endpointGatewayPatchModel := new(vpcv1.EndpointGatewayPatch)
				endpointGatewayPatchModel.Name = core.StringPtr("my-endpoint-gateway")
				endpointGatewayPatchModelAsPatch, asPatchErr := endpointGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateEndpointGatewayOptions model
				updateEndpointGatewayOptionsModel := new(vpcv1.UpdateEndpointGatewayOptions)
				updateEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				updateEndpointGatewayOptionsModel.EndpointGatewayPatch = endpointGatewayPatchModelAsPatch
				updateEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateEndpointGateway(updateEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateEndpointGateway(updateEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateEndpointGateway(updateEndpointGatewayOptions *UpdateEndpointGatewayOptions)`, func() {
		version := "testString"
		updateEndpointGatewayPath := "/endpoint_gateways/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateEndpointGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "health_state": "ok", "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "ips": [{"address": "192.168.3.4", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "resource_type": "subnet_reserved_ip"}], "lifecycle_state": "stable", "name": "my-endpoint-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "endpoint_gateway", "service_endpoint": "my-cloudant-instance.appdomain.cloud", "service_endpoints": ["my-cloudant-instance.appdomain.cloud"], "target": {"crn": "crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::", "resource_type": "provider_cloud_service"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateEndpointGateway successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the EndpointGatewayPatch model
				endpointGatewayPatchModel := new(vpcv1.EndpointGatewayPatch)
				endpointGatewayPatchModel.Name = core.StringPtr("my-endpoint-gateway")
				endpointGatewayPatchModelAsPatch, asPatchErr := endpointGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateEndpointGatewayOptions model
				updateEndpointGatewayOptionsModel := new(vpcv1.UpdateEndpointGatewayOptions)
				updateEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				updateEndpointGatewayOptionsModel.EndpointGatewayPatch = endpointGatewayPatchModelAsPatch
				updateEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateEndpointGatewayWithContext(ctx, updateEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateEndpointGateway(updateEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateEndpointGatewayWithContext(ctx, updateEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateEndpointGatewayPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5", "health_state": "ok", "href": "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5", "id": "d7cc5196-9864-48c4-82d8-3f30da41fcc5", "ips": [{"address": "192.168.3.4", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb", "id": "6d353a0f-aeb1-4ae1-832e-1110d10981bb", "name": "my-reserved-ip", "resource_type": "subnet_reserved_ip"}], "lifecycle_state": "stable", "name": "my-endpoint-gateway", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "resource_type": "endpoint_gateway", "service_endpoint": "my-cloudant-instance.appdomain.cloud", "service_endpoints": ["my-cloudant-instance.appdomain.cloud"], "target": {"crn": "crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::", "resource_type": "provider_cloud_service"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateEndpointGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateEndpointGateway(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the EndpointGatewayPatch model
				endpointGatewayPatchModel := new(vpcv1.EndpointGatewayPatch)
				endpointGatewayPatchModel.Name = core.StringPtr("my-endpoint-gateway")
				endpointGatewayPatchModelAsPatch, asPatchErr := endpointGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateEndpointGatewayOptions model
				updateEndpointGatewayOptionsModel := new(vpcv1.UpdateEndpointGatewayOptions)
				updateEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				updateEndpointGatewayOptionsModel.EndpointGatewayPatch = endpointGatewayPatchModelAsPatch
				updateEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateEndpointGateway(updateEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateEndpointGateway with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the EndpointGatewayPatch model
				endpointGatewayPatchModel := new(vpcv1.EndpointGatewayPatch)
				endpointGatewayPatchModel.Name = core.StringPtr("my-endpoint-gateway")
				endpointGatewayPatchModelAsPatch, asPatchErr := endpointGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateEndpointGatewayOptions model
				updateEndpointGatewayOptionsModel := new(vpcv1.UpdateEndpointGatewayOptions)
				updateEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				updateEndpointGatewayOptionsModel.EndpointGatewayPatch = endpointGatewayPatchModelAsPatch
				updateEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateEndpointGateway(updateEndpointGatewayOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateEndpointGatewayOptions model with no property values
				updateEndpointGatewayOptionsModelNew := new(vpcv1.UpdateEndpointGatewayOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateEndpointGateway(updateEndpointGatewayOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateEndpointGateway successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the EndpointGatewayPatch model
				endpointGatewayPatchModel := new(vpcv1.EndpointGatewayPatch)
				endpointGatewayPatchModel.Name = core.StringPtr("my-endpoint-gateway")
				endpointGatewayPatchModelAsPatch, asPatchErr := endpointGatewayPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateEndpointGatewayOptions model
				updateEndpointGatewayOptionsModel := new(vpcv1.UpdateEndpointGatewayOptions)
				updateEndpointGatewayOptionsModel.ID = core.StringPtr("testString")
				updateEndpointGatewayOptionsModel.EndpointGatewayPatch = endpointGatewayPatchModelAsPatch
				updateEndpointGatewayOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateEndpointGateway(updateEndpointGatewayOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListFlowLogCollectors(listFlowLogCollectorsOptions *ListFlowLogCollectorsOptions) - Operation response error`, func() {
		version := "testString"
		listFlowLogCollectorsPath := "/flow_log_collectors"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFlowLogCollectorsPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target.resource_type"]).To(Equal([]string{"vpc"}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke ListFlowLogCollectors with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := new(vpcv1.ListFlowLogCollectorsOptions)
				listFlowLogCollectorsOptionsModel.Start = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFlowLogCollectorsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Name = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCCRN = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCName = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetResourceType = core.StringPtr("vpc")
				listFlowLogCollectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.ListFlowLogCollectors(listFlowLogCollectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.ListFlowLogCollectors(listFlowLogCollectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`ListFlowLogCollectors(listFlowLogCollectorsOptions *ListFlowLogCollectorsOptions)`, func() {
		version := "testString"
		listFlowLogCollectorsPath := "/flow_log_collectors"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFlowLogCollectorsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target.resource_type"]).To(Equal([]string{"vpc"}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20"}, "flow_log_collectors": [{"active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListFlowLogCollectors successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := new(vpcv1.ListFlowLogCollectorsOptions)
				listFlowLogCollectorsOptionsModel.Start = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFlowLogCollectorsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Name = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCCRN = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCName = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetResourceType = core.StringPtr("vpc")
				listFlowLogCollectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.ListFlowLogCollectorsWithContext(ctx, listFlowLogCollectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.ListFlowLogCollectors(listFlowLogCollectorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.ListFlowLogCollectorsWithContext(ctx, listFlowLogCollectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(listFlowLogCollectorsPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					Expect(req.URL.Query()["start"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["limit"]).To(Equal([]string{fmt.Sprint(int64(1))}))
					Expect(req.URL.Query()["resource_group.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.crn"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["vpc.name"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target.id"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["target.resource_type"]).To(Equal([]string{"vpc"}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"first": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?limit=20"}, "flow_log_collectors": [{"active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}], "limit": 20, "next": {"href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors?start=9d5a91a3e2cbd233b5a5b33436855ed1&limit=20"}, "total_count": 132}`)
				}))
			})
			It(`Invoke ListFlowLogCollectors successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.ListFlowLogCollectors(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := new(vpcv1.ListFlowLogCollectorsOptions)
				listFlowLogCollectorsOptionsModel.Start = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFlowLogCollectorsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Name = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCCRN = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCName = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetResourceType = core.StringPtr("vpc")
				listFlowLogCollectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.ListFlowLogCollectors(listFlowLogCollectorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke ListFlowLogCollectors with error: Operation request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := new(vpcv1.ListFlowLogCollectorsOptions)
				listFlowLogCollectorsOptionsModel.Start = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFlowLogCollectorsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Name = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCCRN = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCName = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetResourceType = core.StringPtr("vpc")
				listFlowLogCollectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.ListFlowLogCollectors(listFlowLogCollectorsOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke ListFlowLogCollectors successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := new(vpcv1.ListFlowLogCollectorsOptions)
				listFlowLogCollectorsOptionsModel.Start = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Limit = core.Int64Ptr(int64(1))
				listFlowLogCollectorsOptionsModel.ResourceGroupID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.Name = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCCRN = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.VPCName = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetID = core.StringPtr("testString")
				listFlowLogCollectorsOptionsModel.TargetResourceType = core.StringPtr("vpc")
				listFlowLogCollectorsOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.ListFlowLogCollectors(listFlowLogCollectorsOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateFlowLogCollector(createFlowLogCollectorOptions *CreateFlowLogCollectorOptions) - Operation response error`, func() {
		version := "testString"
		createFlowLogCollectorPath := "/flow_log_collectors"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFlowLogCollectorPath))
					Expect(req.Method).To(Equal("POST"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke CreateFlowLogCollector with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")

				// Construct an instance of the FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorTargetPrototypeModel := new(vpcv1.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				flowLogCollectorTargetPrototypeModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateFlowLogCollectorOptions model
				createFlowLogCollectorOptionsModel := new(vpcv1.CreateFlowLogCollectorOptions)
				createFlowLogCollectorOptionsModel.StorageBucket = cloudObjectStorageBucketIdentityModel
				createFlowLogCollectorOptionsModel.Target = flowLogCollectorTargetPrototypeModel
				createFlowLogCollectorOptionsModel.Active = core.BoolPtr(false)
				createFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.CreateFlowLogCollector(createFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.CreateFlowLogCollector(createFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`CreateFlowLogCollector(createFlowLogCollectorOptions *CreateFlowLogCollectorOptions)`, func() {
		version := "testString"
		createFlowLogCollectorPath := "/flow_log_collectors"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFlowLogCollectorPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateFlowLogCollector successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")

				// Construct an instance of the FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorTargetPrototypeModel := new(vpcv1.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				flowLogCollectorTargetPrototypeModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateFlowLogCollectorOptions model
				createFlowLogCollectorOptionsModel := new(vpcv1.CreateFlowLogCollectorOptions)
				createFlowLogCollectorOptionsModel.StorageBucket = cloudObjectStorageBucketIdentityModel
				createFlowLogCollectorOptionsModel.Target = flowLogCollectorTargetPrototypeModel
				createFlowLogCollectorOptionsModel.Active = core.BoolPtr(false)
				createFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.CreateFlowLogCollectorWithContext(ctx, createFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.CreateFlowLogCollector(createFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.CreateFlowLogCollectorWithContext(ctx, createFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(createFlowLogCollectorPath))
					Expect(req.Method).To(Equal("POST"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(201)
					fmt.Fprintf(res, "%s", `{"active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke CreateFlowLogCollector successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.CreateFlowLogCollector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")

				// Construct an instance of the FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorTargetPrototypeModel := new(vpcv1.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				flowLogCollectorTargetPrototypeModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateFlowLogCollectorOptions model
				createFlowLogCollectorOptionsModel := new(vpcv1.CreateFlowLogCollectorOptions)
				createFlowLogCollectorOptionsModel.StorageBucket = cloudObjectStorageBucketIdentityModel
				createFlowLogCollectorOptionsModel.Target = flowLogCollectorTargetPrototypeModel
				createFlowLogCollectorOptionsModel.Active = core.BoolPtr(false)
				createFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.CreateFlowLogCollector(createFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke CreateFlowLogCollector with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")

				// Construct an instance of the FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorTargetPrototypeModel := new(vpcv1.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				flowLogCollectorTargetPrototypeModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateFlowLogCollectorOptions model
				createFlowLogCollectorOptionsModel := new(vpcv1.CreateFlowLogCollectorOptions)
				createFlowLogCollectorOptionsModel.StorageBucket = cloudObjectStorageBucketIdentityModel
				createFlowLogCollectorOptionsModel.Target = flowLogCollectorTargetPrototypeModel
				createFlowLogCollectorOptionsModel.Active = core.BoolPtr(false)
				createFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.CreateFlowLogCollector(createFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the CreateFlowLogCollectorOptions model with no property values
				createFlowLogCollectorOptionsModelNew := new(vpcv1.CreateFlowLogCollectorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.CreateFlowLogCollector(createFlowLogCollectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(201)
				}))
			})
			It(`Invoke CreateFlowLogCollector successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")

				// Construct an instance of the FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorTargetPrototypeModel := new(vpcv1.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				flowLogCollectorTargetPrototypeModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")

				// Construct an instance of the CreateFlowLogCollectorOptions model
				createFlowLogCollectorOptionsModel := new(vpcv1.CreateFlowLogCollectorOptions)
				createFlowLogCollectorOptionsModel.StorageBucket = cloudObjectStorageBucketIdentityModel
				createFlowLogCollectorOptionsModel.Target = flowLogCollectorTargetPrototypeModel
				createFlowLogCollectorOptionsModel.Active = core.BoolPtr(false)
				createFlowLogCollectorOptionsModel.Name = core.StringPtr("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.ResourceGroup = resourceGroupIdentityModel
				createFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.CreateFlowLogCollector(createFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`DeleteFlowLogCollector(deleteFlowLogCollectorOptions *DeleteFlowLogCollectorOptions)`, func() {
		version := "testString"
		deleteFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(deleteFlowLogCollectorPath))
					Expect(req.Method).To(Equal("DELETE"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.WriteHeader(204)
				}))
			})
			It(`Invoke DeleteFlowLogCollector successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				response, operationErr := vpcService.DeleteFlowLogCollector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())

				// Construct an instance of the DeleteFlowLogCollectorOptions model
				deleteFlowLogCollectorOptionsModel := new(vpcv1.DeleteFlowLogCollectorOptions)
				deleteFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				deleteFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				response, operationErr = vpcService.DeleteFlowLogCollector(deleteFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
			})
			It(`Invoke DeleteFlowLogCollector with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the DeleteFlowLogCollectorOptions model
				deleteFlowLogCollectorOptionsModel := new(vpcv1.DeleteFlowLogCollectorOptions)
				deleteFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				deleteFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				response, operationErr := vpcService.DeleteFlowLogCollector(deleteFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				// Construct a second instance of the DeleteFlowLogCollectorOptions model with no property values
				deleteFlowLogCollectorOptionsModelNew := new(vpcv1.DeleteFlowLogCollectorOptions)
				// Invoke operation with invalid model (negative test)
				response, operationErr = vpcService.DeleteFlowLogCollector(deleteFlowLogCollectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFlowLogCollector(getFlowLogCollectorOptions *GetFlowLogCollectorOptions) - Operation response error`, func() {
		version := "testString"
		getFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFlowLogCollectorPath))
					Expect(req.Method).To(Equal("GET"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke GetFlowLogCollector with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetFlowLogCollectorOptions model
				getFlowLogCollectorOptionsModel := new(vpcv1.GetFlowLogCollectorOptions)
				getFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				getFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.GetFlowLogCollector(getFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.GetFlowLogCollector(getFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`GetFlowLogCollector(getFlowLogCollectorOptions *GetFlowLogCollectorOptions)`, func() {
		version := "testString"
		getFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFlowLogCollectorPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetFlowLogCollector successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the GetFlowLogCollectorOptions model
				getFlowLogCollectorOptionsModel := new(vpcv1.GetFlowLogCollectorOptions)
				getFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				getFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.GetFlowLogCollectorWithContext(ctx, getFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.GetFlowLogCollector(getFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.GetFlowLogCollectorWithContext(ctx, getFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(getFlowLogCollectorPath))
					Expect(req.Method).To(Equal("GET"))

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke GetFlowLogCollector successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.GetFlowLogCollector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the GetFlowLogCollectorOptions model
				getFlowLogCollectorOptionsModel := new(vpcv1.GetFlowLogCollectorOptions)
				getFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				getFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.GetFlowLogCollector(getFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke GetFlowLogCollector with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetFlowLogCollectorOptions model
				getFlowLogCollectorOptionsModel := new(vpcv1.GetFlowLogCollectorOptions)
				getFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				getFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.GetFlowLogCollector(getFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the GetFlowLogCollectorOptions model with no property values
				getFlowLogCollectorOptionsModelNew := new(vpcv1.GetFlowLogCollectorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.GetFlowLogCollector(getFlowLogCollectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke GetFlowLogCollector successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the GetFlowLogCollectorOptions model
				getFlowLogCollectorOptionsModel := new(vpcv1.GetFlowLogCollectorOptions)
				getFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				getFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.GetFlowLogCollector(getFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFlowLogCollector(updateFlowLogCollectorOptions *UpdateFlowLogCollectorOptions) - Operation response error`, func() {
		version := "testString"
		updateFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint with invalid JSON response`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFlowLogCollectorPath))
					Expect(req.Method).To(Equal("PATCH"))
					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, `} this is not valid json {`)
				}))
			})
			It(`Invoke UpdateFlowLogCollector with error: Operation response processing error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the FlowLogCollectorPatch model
				flowLogCollectorPatchModel := new(vpcv1.FlowLogCollectorPatch)
				flowLogCollectorPatchModel.Active = core.BoolPtr(true)
				flowLogCollectorPatchModel.Name = core.StringPtr("my-flow-log-collector")
				flowLogCollectorPatchModelAsPatch, asPatchErr := flowLogCollectorPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFlowLogCollectorOptions model
				updateFlowLogCollectorOptionsModel := new(vpcv1.UpdateFlowLogCollectorOptions)
				updateFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				updateFlowLogCollectorOptionsModel.FlowLogCollectorPatch = flowLogCollectorPatchModelAsPatch
				updateFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Expect response parsing to fail since we are receiving a text/plain response
				result, response, operationErr := vpcService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())

				// Enable retries and test again
				vpcService.EnableRetries(0, 0)
				result, response, operationErr = vpcService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`UpdateFlowLogCollector(updateFlowLogCollectorOptions *UpdateFlowLogCollectorOptions)`, func() {
		version := "testString"
		updateFlowLogCollectorPath := "/flow_log_collectors/testString"
		Context(`Using mock server endpoint with timeout`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFlowLogCollectorPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Sleep a short time to support a timeout test
					time.Sleep(100 * time.Millisecond)

					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateFlowLogCollector successfully with retries`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())
				vpcService.EnableRetries(0, 0)

				// Construct an instance of the FlowLogCollectorPatch model
				flowLogCollectorPatchModel := new(vpcv1.FlowLogCollectorPatch)
				flowLogCollectorPatchModel.Active = core.BoolPtr(true)
				flowLogCollectorPatchModel.Name = core.StringPtr("my-flow-log-collector")
				flowLogCollectorPatchModelAsPatch, asPatchErr := flowLogCollectorPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFlowLogCollectorOptions model
				updateFlowLogCollectorOptionsModel := new(vpcv1.UpdateFlowLogCollectorOptions)
				updateFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				updateFlowLogCollectorOptionsModel.FlowLogCollectorPatch = flowLogCollectorPatchModelAsPatch
				updateFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with a Context to test a timeout error
				ctx, cancelFunc := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc()
				_, _, operationErr := vpcService.UpdateFlowLogCollectorWithContext(ctx, updateFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))

				// Disable retries and test again
				vpcService.DisableRetries()
				result, response, operationErr := vpcService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

				// Re-test the timeout error with retries disabled
				ctx, cancelFunc2 := context.WithTimeout(context.Background(), 80*time.Millisecond)
				defer cancelFunc2()
				_, _, operationErr = vpcService.UpdateFlowLogCollectorWithContext(ctx, updateFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring("deadline exceeded"))
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Verify the contents of the request
					Expect(req.URL.EscapedPath()).To(Equal(updateFlowLogCollectorPath))
					Expect(req.Method).To(Equal("PATCH"))

					// For gzip-disabled operation, verify Content-Encoding is not set.
					Expect(req.Header.Get("Content-Encoding")).To(BeEmpty())

					// If there is a body, then make sure we can read it
					bodyBuf := new(bytes.Buffer)
					if req.Header.Get("Content-Encoding") == "gzip" {
						body, err := core.NewGzipDecompressionReader(req.Body)
						Expect(err).To(BeNil())
						_, err = bodyBuf.ReadFrom(body)
						Expect(err).To(BeNil())
					} else {
						_, err := bodyBuf.ReadFrom(req.Body)
						Expect(err).To(BeNil())
					}
					fmt.Fprintf(GinkgoWriter, "  Request body: %s", bodyBuf.String())

					Expect(req.URL.Query()["version"]).To(Equal([]string{"testString"}))
					Expect(req.URL.Query()["generation"]).To(Equal([]string{fmt.Sprint(int64(2))}))
					// Set mock response
					res.Header().Set("Content-type", "application/json")
					res.WriteHeader(200)
					fmt.Fprintf(res, "%s", `{"active": true, "auto_delete": true, "created_at": "2019-01-01T12:00:00.000Z", "crn": "crn:v1:bluemix:public:is:us-south:a/123456::flow-log-collector:39300233-9995-4806-89a5-3c1b6eb88689", "href": "https://us-south.iaas.cloud.ibm.com/v1/flow_log_collectors/39300233-9995-4806-89a5-3c1b6eb88689", "id": "39300233-9995-4806-89a5-3c1b6eb88689", "lifecycle_state": "stable", "name": "my-flow-log-collector", "resource_group": {"href": "https://resource-controller.cloud.ibm.com/v2/resource_groups/fee82deba12e4c0fb69c3b09d1f12345", "id": "fee82deba12e4c0fb69c3b09d1f12345", "name": "my-resource-group"}, "storage_bucket": {"name": "bucket-27200-lwx4cfvcue"}, "target": {"deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e", "id": "10c02d81-0ecb-4dc5-897d-28392913b81e", "name": "my-network-interface", "resource_type": "network_interface"}, "vpc": {"crn": "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b", "deleted": {"more_info": "https://cloud.ibm.com/apidocs/vpc#deleted-resources"}, "href": "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b", "id": "4727d842-f94f-4a2d-824a-9bc9b02c523b", "name": "my-vpc"}}`)
				}))
			})
			It(`Invoke UpdateFlowLogCollector successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Invoke operation with nil options model (negative test)
				result, response, operationErr := vpcService.UpdateFlowLogCollector(nil)
				Expect(operationErr).NotTo(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())

				// Construct an instance of the FlowLogCollectorPatch model
				flowLogCollectorPatchModel := new(vpcv1.FlowLogCollectorPatch)
				flowLogCollectorPatchModel.Active = core.BoolPtr(true)
				flowLogCollectorPatchModel.Name = core.StringPtr("my-flow-log-collector")
				flowLogCollectorPatchModelAsPatch, asPatchErr := flowLogCollectorPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFlowLogCollectorOptions model
				updateFlowLogCollectorOptionsModel := new(vpcv1.UpdateFlowLogCollectorOptions)
				updateFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				updateFlowLogCollectorOptionsModel.FlowLogCollectorPatch = flowLogCollectorPatchModelAsPatch
				updateFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation with valid options model (positive test)
				result, response, operationErr = vpcService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())
				Expect(result).ToNot(BeNil())

			})
			It(`Invoke UpdateFlowLogCollector with error: Operation validation and request error`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the FlowLogCollectorPatch model
				flowLogCollectorPatchModel := new(vpcv1.FlowLogCollectorPatch)
				flowLogCollectorPatchModel.Active = core.BoolPtr(true)
				flowLogCollectorPatchModel.Name = core.StringPtr("my-flow-log-collector")
				flowLogCollectorPatchModelAsPatch, asPatchErr := flowLogCollectorPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFlowLogCollectorOptions model
				updateFlowLogCollectorOptionsModel := new(vpcv1.UpdateFlowLogCollectorOptions)
				updateFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				updateFlowLogCollectorOptionsModel.FlowLogCollectorPatch = flowLogCollectorPatchModelAsPatch
				updateFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}
				// Invoke operation with empty URL (negative test)
				err := vpcService.SetServiceURL("")
				Expect(err).To(BeNil())
				result, response, operationErr := vpcService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModel)
				Expect(operationErr).ToNot(BeNil())
				Expect(operationErr.Error()).To(ContainSubstring(core.ERRORMSG_SERVICE_URL_MISSING))
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
				// Construct a second instance of the UpdateFlowLogCollectorOptions model with no property values
				updateFlowLogCollectorOptionsModelNew := new(vpcv1.UpdateFlowLogCollectorOptions)
				// Invoke operation with invalid model (negative test)
				result, response, operationErr = vpcService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModelNew)
				Expect(operationErr).ToNot(BeNil())
				Expect(response).To(BeNil())
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
		Context(`Using mock server endpoint with missing response body`, func() {
			BeforeEach(func() {
				testServer = httptest.NewServer(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
					defer GinkgoRecover()

					// Set success status code with no respoonse body
					res.WriteHeader(200)
				}))
			})
			It(`Invoke UpdateFlowLogCollector successfully`, func() {
				vpcService, serviceErr := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
					URL:           testServer.URL,
					Authenticator: &core.NoAuthAuthenticator{},
					Version:       core.StringPtr(version),
				})
				Expect(serviceErr).To(BeNil())
				Expect(vpcService).ToNot(BeNil())

				// Construct an instance of the FlowLogCollectorPatch model
				flowLogCollectorPatchModel := new(vpcv1.FlowLogCollectorPatch)
				flowLogCollectorPatchModel.Active = core.BoolPtr(true)
				flowLogCollectorPatchModel.Name = core.StringPtr("my-flow-log-collector")
				flowLogCollectorPatchModelAsPatch, asPatchErr := flowLogCollectorPatchModel.AsPatch()
				Expect(asPatchErr).To(BeNil())

				// Construct an instance of the UpdateFlowLogCollectorOptions model
				updateFlowLogCollectorOptionsModel := new(vpcv1.UpdateFlowLogCollectorOptions)
				updateFlowLogCollectorOptionsModel.ID = core.StringPtr("testString")
				updateFlowLogCollectorOptionsModel.FlowLogCollectorPatch = flowLogCollectorPatchModelAsPatch
				updateFlowLogCollectorOptionsModel.Headers = map[string]string{"x-custom-header": "x-custom-value"}

				// Invoke operation
				result, response, operationErr := vpcService.UpdateFlowLogCollector(updateFlowLogCollectorOptionsModel)
				Expect(operationErr).To(BeNil())
				Expect(response).ToNot(BeNil())

				// Verify a nil result
				Expect(result).To(BeNil())
			})
			AfterEach(func() {
				testServer.Close()
			})
		})
	})
	Describe(`Model constructor tests`, func() {
		Context(`Using a service client instance`, func() {
			version := "testString"
			vpcService, _ := vpcv1.NewVpcV1(&vpcv1.VpcV1Options{
				URL:           "http://vpcv1modelgenerator.com",
				Authenticator: &core.NoAuthAuthenticator{},
				Version:       core.StringPtr(version),
			})
			It(`Invoke NewAddEndpointGatewayIPOptions successfully`, func() {
				// Construct an instance of the AddEndpointGatewayIPOptions model
				endpointGatewayID := "testString"
				id := "testString"
				addEndpointGatewayIPOptionsModel := vpcService.NewAddEndpointGatewayIPOptions(endpointGatewayID, id)
				addEndpointGatewayIPOptionsModel.SetEndpointGatewayID("testString")
				addEndpointGatewayIPOptionsModel.SetID("testString")
				addEndpointGatewayIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addEndpointGatewayIPOptionsModel).ToNot(BeNil())
				Expect(addEndpointGatewayIPOptionsModel.EndpointGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(addEndpointGatewayIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addEndpointGatewayIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddInstanceNetworkInterfaceFloatingIPOptions successfully`, func() {
				// Construct an instance of the AddInstanceNetworkInterfaceFloatingIPOptions model
				instanceID := "testString"
				networkInterfaceID := "testString"
				id := "testString"
				addInstanceNetworkInterfaceFloatingIPOptionsModel := vpcService.NewAddInstanceNetworkInterfaceFloatingIPOptions(instanceID, networkInterfaceID, id)
				addInstanceNetworkInterfaceFloatingIPOptionsModel.SetInstanceID("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.SetNetworkInterfaceID("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.SetID("testString")
				addInstanceNetworkInterfaceFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel).ToNot(BeNil())
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addInstanceNetworkInterfaceFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddSecurityGroupNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the AddSecurityGroupNetworkInterfaceOptions model
				securityGroupID := "testString"
				id := "testString"
				addSecurityGroupNetworkInterfaceOptionsModel := vpcService.NewAddSecurityGroupNetworkInterfaceOptions(securityGroupID, id)
				addSecurityGroupNetworkInterfaceOptionsModel.SetSecurityGroupID("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.SetID("testString")
				addSecurityGroupNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addSecurityGroupNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(addSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(addSecurityGroupNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addSecurityGroupNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddVPNGatewayConnectionLocalCIDROptions successfully`, func() {
				// Construct an instance of the AddVPNGatewayConnectionLocalCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				addVPNGatewayConnectionLocalCIDROptionsModel := vpcService.NewAddVPNGatewayConnectionLocalCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				addVPNGatewayConnectionLocalCIDROptionsModel.SetVPNGatewayID("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.SetID("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.SetCIDRPrefix("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.SetPrefixLength("testString")
				addVPNGatewayConnectionLocalCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel).ToNot(BeNil())
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionLocalCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewAddVPNGatewayConnectionPeerCIDROptions successfully`, func() {
				// Construct an instance of the AddVPNGatewayConnectionPeerCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				addVPNGatewayConnectionPeerCIDROptionsModel := vpcService.NewAddVPNGatewayConnectionPeerCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				addVPNGatewayConnectionPeerCIDROptionsModel.SetVPNGatewayID("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.SetID("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.SetCIDRPrefix("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.SetPrefixLength("testString")
				addVPNGatewayConnectionPeerCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel).ToNot(BeNil())
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(addVPNGatewayConnectionPeerCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCheckVPNGatewayConnectionLocalCIDROptions successfully`, func() {
				// Construct an instance of the CheckVPNGatewayConnectionLocalCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				checkVPNGatewayConnectionLocalCIDROptionsModel := vpcService.NewCheckVPNGatewayConnectionLocalCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetVPNGatewayID("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetID("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetCIDRPrefix("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetPrefixLength("testString")
				checkVPNGatewayConnectionLocalCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel).ToNot(BeNil())
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionLocalCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCheckVPNGatewayConnectionPeerCIDROptions successfully`, func() {
				// Construct an instance of the CheckVPNGatewayConnectionPeerCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				checkVPNGatewayConnectionPeerCIDROptionsModel := vpcService.NewCheckVPNGatewayConnectionPeerCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetVPNGatewayID("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetID("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetCIDRPrefix("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetPrefixLength("testString")
				checkVPNGatewayConnectionPeerCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel).ToNot(BeNil())
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(checkVPNGatewayConnectionPeerCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateDedicatedHostGroupOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the CreateDedicatedHostGroupOptions model
				createDedicatedHostGroupOptionsModel := vpcService.NewCreateDedicatedHostGroupOptions()
				createDedicatedHostGroupOptionsModel.SetClass("mx2")
				createDedicatedHostGroupOptionsModel.SetFamily("balanced")
				createDedicatedHostGroupOptionsModel.SetName("testString")
				createDedicatedHostGroupOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createDedicatedHostGroupOptionsModel.SetZone(zoneIdentityModel)
				createDedicatedHostGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDedicatedHostGroupOptionsModel).ToNot(BeNil())
				Expect(createDedicatedHostGroupOptionsModel.Class).To(Equal(core.StringPtr("mx2")))
				Expect(createDedicatedHostGroupOptionsModel.Family).To(Equal(core.StringPtr("balanced")))
				Expect(createDedicatedHostGroupOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createDedicatedHostGroupOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createDedicatedHostGroupOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createDedicatedHostGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateDedicatedHostOptions successfully`, func() {
				// Construct an instance of the DedicatedHostProfileIdentityByName model
				dedicatedHostProfileIdentityModel := new(vpcv1.DedicatedHostProfileIdentityByName)
				Expect(dedicatedHostProfileIdentityModel).ToNot(BeNil())
				dedicatedHostProfileIdentityModel.Name = core.StringPtr("mx2-host-152x1216")
				Expect(dedicatedHostProfileIdentityModel.Name).To(Equal(core.StringPtr("mx2-host-152x1216")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the DedicatedHostGroupIdentityByID model
				dedicatedHostGroupIdentityModel := new(vpcv1.DedicatedHostGroupIdentityByID)
				Expect(dedicatedHostGroupIdentityModel).ToNot(BeNil())
				dedicatedHostGroupIdentityModel.ID = core.StringPtr("bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0")
				Expect(dedicatedHostGroupIdentityModel.ID).To(Equal(core.StringPtr("bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0")))

				// Construct an instance of the DedicatedHostPrototypeDedicatedHostByGroup model
				dedicatedHostPrototypeModel := new(vpcv1.DedicatedHostPrototypeDedicatedHostByGroup)
				Expect(dedicatedHostPrototypeModel).ToNot(BeNil())
				dedicatedHostPrototypeModel.InstancePlacementEnabled = core.BoolPtr(true)
				dedicatedHostPrototypeModel.Name = core.StringPtr("my-host")
				dedicatedHostPrototypeModel.Profile = dedicatedHostProfileIdentityModel
				dedicatedHostPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				dedicatedHostPrototypeModel.Group = dedicatedHostGroupIdentityModel
				Expect(dedicatedHostPrototypeModel.InstancePlacementEnabled).To(Equal(core.BoolPtr(true)))
				Expect(dedicatedHostPrototypeModel.Name).To(Equal(core.StringPtr("my-host")))
				Expect(dedicatedHostPrototypeModel.Profile).To(Equal(dedicatedHostProfileIdentityModel))
				Expect(dedicatedHostPrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(dedicatedHostPrototypeModel.Group).To(Equal(dedicatedHostGroupIdentityModel))

				// Construct an instance of the CreateDedicatedHostOptions model
				var dedicatedHostPrototype vpcv1.DedicatedHostPrototypeIntf = nil
				createDedicatedHostOptionsModel := vpcService.NewCreateDedicatedHostOptions(dedicatedHostPrototype)
				createDedicatedHostOptionsModel.SetDedicatedHostPrototype(dedicatedHostPrototypeModel)
				createDedicatedHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createDedicatedHostOptionsModel).ToNot(BeNil())
				Expect(createDedicatedHostOptionsModel.DedicatedHostPrototype).To(Equal(dedicatedHostPrototypeModel))
				Expect(createDedicatedHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateEndpointGatewayOptions successfully`, func() {
				// Construct an instance of the EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN model
				endpointGatewayTargetPrototypeModel := new(vpcv1.EndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN)
				Expect(endpointGatewayTargetPrototypeModel).ToNot(BeNil())
				endpointGatewayTargetPrototypeModel.ResourceType = core.StringPtr("provider_infrastructure_service")
				endpointGatewayTargetPrototypeModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::")
				Expect(endpointGatewayTargetPrototypeModel.ResourceType).To(Equal(core.StringPtr("provider_infrastructure_service")))
				Expect(endpointGatewayTargetPrototypeModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("f025b503-ae66-46de-a011-3bd08fd5f7bf")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("f025b503-ae66-46de-a011-3bd08fd5f7bf")))

				// Construct an instance of the EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID model
				endpointGatewayReservedIPModel := new(vpcv1.EndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID)
				Expect(endpointGatewayReservedIPModel).ToNot(BeNil())
				endpointGatewayReservedIPModel.ID = core.StringPtr("6d353a0f-aeb1-4ae1-832e-1110d10981bb")
				Expect(endpointGatewayReservedIPModel.ID).To(Equal(core.StringPtr("6d353a0f-aeb1-4ae1-832e-1110d10981bb")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateEndpointGatewayOptions model
				var createEndpointGatewayOptionsTarget vpcv1.EndpointGatewayTargetPrototypeIntf = nil
				var createEndpointGatewayOptionsVPC vpcv1.VPCIdentityIntf = nil
				createEndpointGatewayOptionsModel := vpcService.NewCreateEndpointGatewayOptions(createEndpointGatewayOptionsTarget, createEndpointGatewayOptionsVPC)
				createEndpointGatewayOptionsModel.SetTarget(endpointGatewayTargetPrototypeModel)
				createEndpointGatewayOptionsModel.SetVPC(vpcIdentityModel)
				createEndpointGatewayOptionsModel.SetIps([]vpcv1.EndpointGatewayReservedIPIntf{endpointGatewayReservedIPModel})
				createEndpointGatewayOptionsModel.SetName("testString")
				createEndpointGatewayOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createEndpointGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createEndpointGatewayOptionsModel).ToNot(BeNil())
				Expect(createEndpointGatewayOptionsModel.Target).To(Equal(endpointGatewayTargetPrototypeModel))
				Expect(createEndpointGatewayOptionsModel.VPC).To(Equal(vpcIdentityModel))
				Expect(createEndpointGatewayOptionsModel.Ips).To(Equal([]vpcv1.EndpointGatewayReservedIPIntf{endpointGatewayReservedIPModel}))
				Expect(createEndpointGatewayOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(createEndpointGatewayOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createEndpointGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateFloatingIPOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the FloatingIPByTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				floatingIPByTargetNetworkInterfaceIdentityModel := new(vpcv1.FloatingIPByTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				Expect(floatingIPByTargetNetworkInterfaceIdentityModel).ToNot(BeNil())
				floatingIPByTargetNetworkInterfaceIdentityModel.ID = core.StringPtr("69e55145-cc7d-4d8e-9e1f-cc3fb60b1793")
				Expect(floatingIPByTargetNetworkInterfaceIdentityModel.ID).To(Equal(core.StringPtr("69e55145-cc7d-4d8e-9e1f-cc3fb60b1793")))

				// Construct an instance of the FloatingIPPrototypeFloatingIPByTarget model
				floatingIPPrototypeModel := new(vpcv1.FloatingIPPrototypeFloatingIPByTarget)
				Expect(floatingIPPrototypeModel).ToNot(BeNil())
				floatingIPPrototypeModel.Name = core.StringPtr("my-new-floating-ip")
				floatingIPPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				floatingIPPrototypeModel.Target = floatingIPByTargetNetworkInterfaceIdentityModel
				Expect(floatingIPPrototypeModel.Name).To(Equal(core.StringPtr("my-new-floating-ip")))
				Expect(floatingIPPrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(floatingIPPrototypeModel.Target).To(Equal(floatingIPByTargetNetworkInterfaceIdentityModel))

				// Construct an instance of the CreateFloatingIPOptions model
				var floatingIPPrototype vpcv1.FloatingIPPrototypeIntf = nil
				createFloatingIPOptionsModel := vpcService.NewCreateFloatingIPOptions(floatingIPPrototype)
				createFloatingIPOptionsModel.SetFloatingIPPrototype(floatingIPPrototypeModel)
				createFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createFloatingIPOptionsModel).ToNot(BeNil())
				Expect(createFloatingIPOptionsModel.FloatingIPPrototype).To(Equal(floatingIPPrototypeModel))
				Expect(createFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateFlowLogCollectorOptions successfully`, func() {
				// Construct an instance of the CloudObjectStorageBucketIdentityByName model
				cloudObjectStorageBucketIdentityModel := new(vpcv1.CloudObjectStorageBucketIdentityByName)
				Expect(cloudObjectStorageBucketIdentityModel).ToNot(BeNil())
				cloudObjectStorageBucketIdentityModel.Name = core.StringPtr("bucket-27200-lwx4cfvcue")
				Expect(cloudObjectStorageBucketIdentityModel.Name).To(Equal(core.StringPtr("bucket-27200-lwx4cfvcue")))

				// Construct an instance of the FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID model
				flowLogCollectorTargetPrototypeModel := new(vpcv1.FlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID)
				Expect(flowLogCollectorTargetPrototypeModel).ToNot(BeNil())
				flowLogCollectorTargetPrototypeModel.ID = core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")
				Expect(flowLogCollectorTargetPrototypeModel.ID).To(Equal(core.StringPtr("10c02d81-0ecb-4dc5-897d-28392913b81e")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateFlowLogCollectorOptions model
				var createFlowLogCollectorOptionsStorageBucket vpcv1.CloudObjectStorageBucketIdentityIntf = nil
				var createFlowLogCollectorOptionsTarget vpcv1.FlowLogCollectorTargetPrototypeIntf = nil
				createFlowLogCollectorOptionsModel := vpcService.NewCreateFlowLogCollectorOptions(createFlowLogCollectorOptionsStorageBucket, createFlowLogCollectorOptionsTarget)
				createFlowLogCollectorOptionsModel.SetStorageBucket(cloudObjectStorageBucketIdentityModel)
				createFlowLogCollectorOptionsModel.SetTarget(flowLogCollectorTargetPrototypeModel)
				createFlowLogCollectorOptionsModel.SetActive(false)
				createFlowLogCollectorOptionsModel.SetName("my-flow-log-collector")
				createFlowLogCollectorOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createFlowLogCollectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createFlowLogCollectorOptionsModel).ToNot(BeNil())
				Expect(createFlowLogCollectorOptionsModel.StorageBucket).To(Equal(cloudObjectStorageBucketIdentityModel))
				Expect(createFlowLogCollectorOptionsModel.Target).To(Equal(flowLogCollectorTargetPrototypeModel))
				Expect(createFlowLogCollectorOptionsModel.Active).To(Equal(core.BoolPtr(false)))
				Expect(createFlowLogCollectorOptionsModel.Name).To(Equal(core.StringPtr("my-flow-log-collector")))
				Expect(createFlowLogCollectorOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createFlowLogCollectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateIkePolicyOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateIkePolicyOptions model
				createIkePolicyOptionsAuthenticationAlgorithm := "md5"
				createIkePolicyOptionsDhGroup := int64(2)
				createIkePolicyOptionsEncryptionAlgorithm := "triple_des"
				createIkePolicyOptionsIkeVersion := int64(1)
				createIkePolicyOptionsModel := vpcService.NewCreateIkePolicyOptions(createIkePolicyOptionsAuthenticationAlgorithm, createIkePolicyOptionsDhGroup, createIkePolicyOptionsEncryptionAlgorithm, createIkePolicyOptionsIkeVersion)
				createIkePolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				createIkePolicyOptionsModel.SetDhGroup(int64(2))
				createIkePolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				createIkePolicyOptionsModel.SetIkeVersion(int64(1))
				createIkePolicyOptionsModel.SetKeyLifetime(int64(28800))
				createIkePolicyOptionsModel.SetName("my-ike-policy")
				createIkePolicyOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createIkePolicyOptionsModel).ToNot(BeNil())
				Expect(createIkePolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(createIkePolicyOptionsModel.DhGroup).To(Equal(core.Int64Ptr(int64(2))))
				Expect(createIkePolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(createIkePolicyOptionsModel.IkeVersion).To(Equal(core.Int64Ptr(int64(1))))
				Expect(createIkePolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(28800))))
				Expect(createIkePolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ike-policy")))
				Expect(createIkePolicyOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateImageOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				Expect(encryptionKeyIdentityModel).ToNot(BeNil())
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
				Expect(encryptionKeyIdentityModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")))

				// Construct an instance of the ImageFilePrototype model
				imageFilePrototypeModel := new(vpcv1.ImageFilePrototype)
				Expect(imageFilePrototypeModel).ToNot(BeNil())
				imageFilePrototypeModel.Href = core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")
				Expect(imageFilePrototypeModel.Href).To(Equal(core.StringPtr("cos://us-south/custom-image-vpc-bucket/customImage-0.vhd")))

				// Construct an instance of the OperatingSystemIdentityByName model
				operatingSystemIdentityModel := new(vpcv1.OperatingSystemIdentityByName)
				Expect(operatingSystemIdentityModel).ToNot(BeNil())
				operatingSystemIdentityModel.Name = core.StringPtr("ubuntu-16-amd64")
				Expect(operatingSystemIdentityModel.Name).To(Equal(core.StringPtr("ubuntu-16-amd64")))

				// Construct an instance of the ImagePrototypeImageByFile model
				imagePrototypeModel := new(vpcv1.ImagePrototypeImageByFile)
				Expect(imagePrototypeModel).ToNot(BeNil())
				imagePrototypeModel.Name = core.StringPtr("my-image")
				imagePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				imagePrototypeModel.EncryptedDataKey = core.StringPtr("testString")
				imagePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				imagePrototypeModel.File = imageFilePrototypeModel
				imagePrototypeModel.OperatingSystem = operatingSystemIdentityModel
				Expect(imagePrototypeModel.Name).To(Equal(core.StringPtr("my-image")))
				Expect(imagePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(imagePrototypeModel.EncryptedDataKey).To(Equal(core.StringPtr("testString")))
				Expect(imagePrototypeModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))
				Expect(imagePrototypeModel.File).To(Equal(imageFilePrototypeModel))
				Expect(imagePrototypeModel.OperatingSystem).To(Equal(operatingSystemIdentityModel))

				// Construct an instance of the CreateImageOptions model
				var imagePrototype vpcv1.ImagePrototypeIntf = nil
				createImageOptionsModel := vpcService.NewCreateImageOptions(imagePrototype)
				createImageOptionsModel.SetImagePrototype(imagePrototypeModel)
				createImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createImageOptionsModel).ToNot(BeNil())
				Expect(createImageOptionsModel.ImagePrototype).To(Equal(imagePrototypeModel))
				Expect(createImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceActionOptions successfully`, func() {
				// Construct an instance of the CreateInstanceActionOptions model
				instanceID := "testString"
				createInstanceActionOptionsType := "reboot"
				createInstanceActionOptionsModel := vpcService.NewCreateInstanceActionOptions(instanceID, createInstanceActionOptionsType)
				createInstanceActionOptionsModel.SetInstanceID("testString")
				createInstanceActionOptionsModel.SetType("reboot")
				createInstanceActionOptionsModel.SetForce(true)
				createInstanceActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceActionOptionsModel).ToNot(BeNil())
				Expect(createInstanceActionOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceActionOptionsModel.Type).To(Equal(core.StringPtr("reboot")))
				Expect(createInstanceActionOptionsModel.Force).To(Equal(core.BoolPtr(true)))
				Expect(createInstanceActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceConsoleAccessTokenOptions successfully`, func() {
				// Construct an instance of the CreateInstanceConsoleAccessTokenOptions model
				instanceID := "testString"
				createInstanceConsoleAccessTokenOptionsConsoleType := "serial"
				createInstanceConsoleAccessTokenOptionsModel := vpcService.NewCreateInstanceConsoleAccessTokenOptions(instanceID, createInstanceConsoleAccessTokenOptionsConsoleType)
				createInstanceConsoleAccessTokenOptionsModel.SetInstanceID("testString")
				createInstanceConsoleAccessTokenOptionsModel.SetConsoleType("serial")
				createInstanceConsoleAccessTokenOptionsModel.SetForce(false)
				createInstanceConsoleAccessTokenOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceConsoleAccessTokenOptionsModel).ToNot(BeNil())
				Expect(createInstanceConsoleAccessTokenOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceConsoleAccessTokenOptionsModel.ConsoleType).To(Equal(core.StringPtr("serial")))
				Expect(createInstanceConsoleAccessTokenOptionsModel.Force).To(Equal(core.BoolPtr(false)))
				Expect(createInstanceConsoleAccessTokenOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceGroupManagerActionOptions successfully`, func() {
				// Construct an instance of the InstanceGroupManagerScheduledActionGroupPrototype model
				instanceGroupManagerScheduledActionGroupPrototypeModel := new(vpcv1.InstanceGroupManagerScheduledActionGroupPrototype)
				Expect(instanceGroupManagerScheduledActionGroupPrototypeModel).ToNot(BeNil())
				instanceGroupManagerScheduledActionGroupPrototypeModel.MembershipCount = core.Int64Ptr(int64(10))
				Expect(instanceGroupManagerScheduledActionGroupPrototypeModel.MembershipCount).To(Equal(core.Int64Ptr(int64(10))))

				// Construct an instance of the InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup model
				instanceGroupManagerActionPrototypeModel := new(vpcv1.InstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup)
				Expect(instanceGroupManagerActionPrototypeModel).ToNot(BeNil())
				instanceGroupManagerActionPrototypeModel.Name = core.StringPtr("my-instance-group-manager-action")
				instanceGroupManagerActionPrototypeModel.RunAt = CreateMockDateTime("2019-01-01T12:00:00.000Z")
				instanceGroupManagerActionPrototypeModel.Group = instanceGroupManagerScheduledActionGroupPrototypeModel
				Expect(instanceGroupManagerActionPrototypeModel.Name).To(Equal(core.StringPtr("my-instance-group-manager-action")))
				Expect(instanceGroupManagerActionPrototypeModel.RunAt).To(Equal(CreateMockDateTime("2019-01-01T12:00:00.000Z")))
				Expect(instanceGroupManagerActionPrototypeModel.Group).To(Equal(instanceGroupManagerScheduledActionGroupPrototypeModel))

				// Construct an instance of the CreateInstanceGroupManagerActionOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				var instanceGroupManagerActionPrototype vpcv1.InstanceGroupManagerActionPrototypeIntf = nil
				createInstanceGroupManagerActionOptionsModel := vpcService.NewCreateInstanceGroupManagerActionOptions(instanceGroupID, instanceGroupManagerID, instanceGroupManagerActionPrototype)
				createInstanceGroupManagerActionOptionsModel.SetInstanceGroupID("testString")
				createInstanceGroupManagerActionOptionsModel.SetInstanceGroupManagerID("testString")
				createInstanceGroupManagerActionOptionsModel.SetInstanceGroupManagerActionPrototype(instanceGroupManagerActionPrototypeModel)
				createInstanceGroupManagerActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceGroupManagerActionOptionsModel).ToNot(BeNil())
				Expect(createInstanceGroupManagerActionOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPrototype).To(Equal(instanceGroupManagerActionPrototypeModel))
				Expect(createInstanceGroupManagerActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceGroupManagerOptions successfully`, func() {
				// Construct an instance of the InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype model
				instanceGroupManagerPrototypeModel := new(vpcv1.InstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype)
				Expect(instanceGroupManagerPrototypeModel).ToNot(BeNil())
				instanceGroupManagerPrototypeModel.ManagementEnabled = core.BoolPtr(true)
				instanceGroupManagerPrototypeModel.Name = core.StringPtr("my-instance-group-manager")
				instanceGroupManagerPrototypeModel.AggregationWindow = core.Int64Ptr(int64(120))
				instanceGroupManagerPrototypeModel.Cooldown = core.Int64Ptr(int64(210))
				instanceGroupManagerPrototypeModel.ManagerType = core.StringPtr("autoscale")
				instanceGroupManagerPrototypeModel.MaxMembershipCount = core.Int64Ptr(int64(10))
				instanceGroupManagerPrototypeModel.MinMembershipCount = core.Int64Ptr(int64(10))
				Expect(instanceGroupManagerPrototypeModel.ManagementEnabled).To(Equal(core.BoolPtr(true)))
				Expect(instanceGroupManagerPrototypeModel.Name).To(Equal(core.StringPtr("my-instance-group-manager")))
				Expect(instanceGroupManagerPrototypeModel.AggregationWindow).To(Equal(core.Int64Ptr(int64(120))))
				Expect(instanceGroupManagerPrototypeModel.Cooldown).To(Equal(core.Int64Ptr(int64(210))))
				Expect(instanceGroupManagerPrototypeModel.ManagerType).To(Equal(core.StringPtr("autoscale")))
				Expect(instanceGroupManagerPrototypeModel.MaxMembershipCount).To(Equal(core.Int64Ptr(int64(10))))
				Expect(instanceGroupManagerPrototypeModel.MinMembershipCount).To(Equal(core.Int64Ptr(int64(10))))

				// Construct an instance of the CreateInstanceGroupManagerOptions model
				instanceGroupID := "testString"
				var instanceGroupManagerPrototype vpcv1.InstanceGroupManagerPrototypeIntf = nil
				createInstanceGroupManagerOptionsModel := vpcService.NewCreateInstanceGroupManagerOptions(instanceGroupID, instanceGroupManagerPrototype)
				createInstanceGroupManagerOptionsModel.SetInstanceGroupID("testString")
				createInstanceGroupManagerOptionsModel.SetInstanceGroupManagerPrototype(instanceGroupManagerPrototypeModel)
				createInstanceGroupManagerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceGroupManagerOptionsModel).ToNot(BeNil())
				Expect(createInstanceGroupManagerOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceGroupManagerOptionsModel.InstanceGroupManagerPrototype).To(Equal(instanceGroupManagerPrototypeModel))
				Expect(createInstanceGroupManagerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceGroupManagerPolicyOptions successfully`, func() {
				// Construct an instance of the InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype model
				instanceGroupManagerPolicyPrototypeModel := new(vpcv1.InstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype)
				Expect(instanceGroupManagerPolicyPrototypeModel).ToNot(BeNil())
				instanceGroupManagerPolicyPrototypeModel.Name = core.StringPtr("my-instance-group-manager-policy")
				instanceGroupManagerPolicyPrototypeModel.MetricType = core.StringPtr("cpu")
				instanceGroupManagerPolicyPrototypeModel.MetricValue = core.Int64Ptr(int64(38))
				instanceGroupManagerPolicyPrototypeModel.PolicyType = core.StringPtr("target")
				Expect(instanceGroupManagerPolicyPrototypeModel.Name).To(Equal(core.StringPtr("my-instance-group-manager-policy")))
				Expect(instanceGroupManagerPolicyPrototypeModel.MetricType).To(Equal(core.StringPtr("cpu")))
				Expect(instanceGroupManagerPolicyPrototypeModel.MetricValue).To(Equal(core.Int64Ptr(int64(38))))
				Expect(instanceGroupManagerPolicyPrototypeModel.PolicyType).To(Equal(core.StringPtr("target")))

				// Construct an instance of the CreateInstanceGroupManagerPolicyOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				var instanceGroupManagerPolicyPrototype vpcv1.InstanceGroupManagerPolicyPrototypeIntf = nil
				createInstanceGroupManagerPolicyOptionsModel := vpcService.NewCreateInstanceGroupManagerPolicyOptions(instanceGroupID, instanceGroupManagerID, instanceGroupManagerPolicyPrototype)
				createInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupID("testString")
				createInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerID("testString")
				createInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerPolicyPrototype(instanceGroupManagerPolicyPrototypeModel)
				createInstanceGroupManagerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceGroupManagerPolicyOptionsModel).ToNot(BeNil())
				Expect(createInstanceGroupManagerPolicyOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPrototype).To(Equal(instanceGroupManagerPolicyPrototypeModel))
				Expect(createInstanceGroupManagerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceGroupOptions successfully`, func() {
				// Construct an instance of the InstanceTemplateIdentityByID model
				instanceTemplateIdentityModel := new(vpcv1.InstanceTemplateIdentityByID)
				Expect(instanceTemplateIdentityModel).ToNot(BeNil())
				instanceTemplateIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")
				Expect(instanceTemplateIdentityModel.ID).To(Equal(core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the LoadBalancerIdentityByID model
				loadBalancerIdentityModel := new(vpcv1.LoadBalancerIdentityByID)
				Expect(loadBalancerIdentityModel).ToNot(BeNil())
				loadBalancerIdentityModel.ID = core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")
				Expect(loadBalancerIdentityModel.ID).To(Equal(core.StringPtr("dd754295-e9e0-4c9d-bf6c-58fbc59e5727")))

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				Expect(loadBalancerPoolIdentityModel).ToNot(BeNil())
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerPoolIdentityModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateInstanceGroupOptions model
				var createInstanceGroupOptionsInstanceTemplate vpcv1.InstanceTemplateIdentityIntf = nil
				createInstanceGroupOptionsSubnets := []vpcv1.SubnetIdentityIntf{}
				createInstanceGroupOptionsModel := vpcService.NewCreateInstanceGroupOptions(createInstanceGroupOptionsInstanceTemplate, createInstanceGroupOptionsSubnets)
				createInstanceGroupOptionsModel.SetInstanceTemplate(instanceTemplateIdentityModel)
				createInstanceGroupOptionsModel.SetSubnets([]vpcv1.SubnetIdentityIntf{subnetIdentityModel})
				createInstanceGroupOptionsModel.SetApplicationPort(int64(22))
				createInstanceGroupOptionsModel.SetLoadBalancer(loadBalancerIdentityModel)
				createInstanceGroupOptionsModel.SetLoadBalancerPool(loadBalancerPoolIdentityModel)
				createInstanceGroupOptionsModel.SetMembershipCount(int64(10))
				createInstanceGroupOptionsModel.SetName("my-instance-group")
				createInstanceGroupOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createInstanceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceGroupOptionsModel).ToNot(BeNil())
				Expect(createInstanceGroupOptionsModel.InstanceTemplate).To(Equal(instanceTemplateIdentityModel))
				Expect(createInstanceGroupOptionsModel.Subnets).To(Equal([]vpcv1.SubnetIdentityIntf{subnetIdentityModel}))
				Expect(createInstanceGroupOptionsModel.ApplicationPort).To(Equal(core.Int64Ptr(int64(22))))
				Expect(createInstanceGroupOptionsModel.LoadBalancer).To(Equal(loadBalancerIdentityModel))
				Expect(createInstanceGroupOptionsModel.LoadBalancerPool).To(Equal(loadBalancerPoolIdentityModel))
				Expect(createInstanceGroupOptionsModel.MembershipCount).To(Equal(core.Int64Ptr(int64(10))))
				Expect(createInstanceGroupOptionsModel.Name).To(Equal(core.StringPtr("my-instance-group")))
				Expect(createInstanceGroupOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createInstanceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				Expect(securityGroupIdentityModel).ToNot(BeNil())
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
				Expect(securityGroupIdentityModel.ID).To(Equal(core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")))

				// Construct an instance of the CreateInstanceNetworkInterfaceOptions model
				instanceID := "testString"
				var createInstanceNetworkInterfaceOptionsSubnet vpcv1.SubnetIdentityIntf = nil
				createInstanceNetworkInterfaceOptionsModel := vpcService.NewCreateInstanceNetworkInterfaceOptions(instanceID, createInstanceNetworkInterfaceOptionsSubnet)
				createInstanceNetworkInterfaceOptionsModel.SetInstanceID("testString")
				createInstanceNetworkInterfaceOptionsModel.SetSubnet(subnetIdentityModel)
				createInstanceNetworkInterfaceOptionsModel.SetAllowIPSpoofing(true)
				createInstanceNetworkInterfaceOptionsModel.SetName("my-network-interface")
				createInstanceNetworkInterfaceOptionsModel.SetPrimaryIpv4Address("10.0.0.5")
				createInstanceNetworkInterfaceOptionsModel.SetSecurityGroups([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel})
				createInstanceNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(createInstanceNetworkInterfaceOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceNetworkInterfaceOptionsModel.Subnet).To(Equal(subnetIdentityModel))
				Expect(createInstanceNetworkInterfaceOptionsModel.AllowIPSpoofing).To(Equal(core.BoolPtr(true)))
				Expect(createInstanceNetworkInterfaceOptionsModel.Name).To(Equal(core.StringPtr("my-network-interface")))
				Expect(createInstanceNetworkInterfaceOptionsModel.PrimaryIpv4Address).To(Equal(core.StringPtr("10.0.0.5")))
				Expect(createInstanceNetworkInterfaceOptionsModel.SecurityGroups).To(Equal([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}))
				Expect(createInstanceNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceOptions successfully`, func() {
				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				Expect(keyIdentityModel).ToNot(BeNil())
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")
				Expect(keyIdentityModel.ID).To(Equal(core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")))

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				Expect(securityGroupIdentityModel).ToNot(BeNil())
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
				Expect(securityGroupIdentityModel.ID).To(Equal(core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				Expect(networkInterfacePrototypeModel).ToNot(BeNil())
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel
				Expect(networkInterfacePrototypeModel.AllowIPSpoofing).To(Equal(core.BoolPtr(true)))
				Expect(networkInterfacePrototypeModel.Name).To(Equal(core.StringPtr("my-network-interface")))
				Expect(networkInterfacePrototypeModel.PrimaryIpv4Address).To(Equal(core.StringPtr("10.0.0.5")))
				Expect(networkInterfacePrototypeModel.SecurityGroups).To(Equal([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}))
				Expect(networkInterfacePrototypeModel.Subnet).To(Equal(subnetIdentityModel))

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				Expect(instancePlacementTargetPrototypeModel).ToNot(BeNil())
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(instancePlacementTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				Expect(instanceProfileIdentityModel).ToNot(BeNil())
				instanceProfileIdentityModel.Name = core.StringPtr("cc1-16x32")
				Expect(instanceProfileIdentityModel.Name).To(Equal(core.StringPtr("cc1-16x32")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID)
				Expect(volumeAttachmentVolumePrototypeInstanceContextModel).ToNot(BeNil())
				volumeAttachmentVolumePrototypeInstanceContextModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
				Expect(volumeAttachmentVolumePrototypeInstanceContextModel.ID).To(Equal(core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				Expect(volumeAttachmentPrototypeInstanceContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel
				Expect(volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Volume).To(Equal(volumeAttachmentVolumePrototypeInstanceContextModel))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				Expect(encryptionKeyIdentityModel).ToNot(BeNil())
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
				Expect(encryptionKeyIdentityModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")))

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				Expect(volumeProfileIdentityModel).ToNot(BeNil())
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")
				Expect(volumeProfileIdentityModel.Name).To(Equal(core.StringPtr("general-purpose")))

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				Expect(volumePrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				Expect(volumePrototypeInstanceByImageContextModel.Capacity).To(Equal(core.Int64Ptr(int64(100))))
				Expect(volumePrototypeInstanceByImageContextModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))
				Expect(volumePrototypeInstanceByImageContextModel.Iops).To(Equal(core.Int64Ptr(int64(10000))))
				Expect(volumePrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(volumePrototypeInstanceByImageContextModel.Profile).To(Equal(volumeProfileIdentityModel))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Volume).To(Equal(volumePrototypeInstanceByImageContextModel))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				Expect(imageIdentityModel).ToNot(BeNil())
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
				Expect(imageIdentityModel.ID).To(Equal(core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the InstancePrototypeInstanceByImage model
				instancePrototypeModel := new(vpcv1.InstancePrototypeInstanceByImage)
				Expect(instancePrototypeModel).ToNot(BeNil())
				instancePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instancePrototypeModel.Name = core.StringPtr("my-instance")
				instancePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instancePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instancePrototypeModel.Profile = instanceProfileIdentityModel
				instancePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instancePrototypeModel.UserData = core.StringPtr("testString")
				instancePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instancePrototypeModel.VPC = vpcIdentityModel
				instancePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instancePrototypeModel.Image = imageIdentityModel
				instancePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instancePrototypeModel.Zone = zoneIdentityModel
				Expect(instancePrototypeModel.Keys).To(Equal([]vpcv1.KeyIdentityIntf{keyIdentityModel}))
				Expect(instancePrototypeModel.Name).To(Equal(core.StringPtr("my-instance")))
				Expect(instancePrototypeModel.NetworkInterfaces).To(Equal([]vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}))
				Expect(instancePrototypeModel.PlacementTarget).To(Equal(instancePlacementTargetPrototypeModel))
				Expect(instancePrototypeModel.Profile).To(Equal(instanceProfileIdentityModel))
				Expect(instancePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(instancePrototypeModel.UserData).To(Equal(core.StringPtr("testString")))
				Expect(instancePrototypeModel.VolumeAttachments).To(Equal([]vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}))
				Expect(instancePrototypeModel.VPC).To(Equal(vpcIdentityModel))
				Expect(instancePrototypeModel.BootVolumeAttachment).To(Equal(volumeAttachmentPrototypeInstanceByImageContextModel))
				Expect(instancePrototypeModel.Image).To(Equal(imageIdentityModel))
				Expect(instancePrototypeModel.PrimaryNetworkInterface).To(Equal(networkInterfacePrototypeModel))
				Expect(instancePrototypeModel.Zone).To(Equal(zoneIdentityModel))

				// Construct an instance of the CreateInstanceOptions model
				var instancePrototype vpcv1.InstancePrototypeIntf = nil
				createInstanceOptionsModel := vpcService.NewCreateInstanceOptions(instancePrototype)
				createInstanceOptionsModel.SetInstancePrototype(instancePrototypeModel)
				createInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceOptionsModel).ToNot(BeNil())
				Expect(createInstanceOptionsModel.InstancePrototype).To(Equal(instancePrototypeModel))
				Expect(createInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceTemplateOptions successfully`, func() {
				// Construct an instance of the KeyIdentityByID model
				keyIdentityModel := new(vpcv1.KeyIdentityByID)
				Expect(keyIdentityModel).ToNot(BeNil())
				keyIdentityModel.ID = core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")
				Expect(keyIdentityModel.ID).To(Equal(core.StringPtr("a6b1a881-2ce8-41a3-80fc-36316a73f803")))

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				Expect(securityGroupIdentityModel).ToNot(BeNil())
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
				Expect(securityGroupIdentityModel.ID).To(Equal(core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the NetworkInterfacePrototype model
				networkInterfacePrototypeModel := new(vpcv1.NetworkInterfacePrototype)
				Expect(networkInterfacePrototypeModel).ToNot(BeNil())
				networkInterfacePrototypeModel.AllowIPSpoofing = core.BoolPtr(true)
				networkInterfacePrototypeModel.Name = core.StringPtr("my-network-interface")
				networkInterfacePrototypeModel.PrimaryIpv4Address = core.StringPtr("10.0.0.5")
				networkInterfacePrototypeModel.SecurityGroups = []vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}
				networkInterfacePrototypeModel.Subnet = subnetIdentityModel
				Expect(networkInterfacePrototypeModel.AllowIPSpoofing).To(Equal(core.BoolPtr(true)))
				Expect(networkInterfacePrototypeModel.Name).To(Equal(core.StringPtr("my-network-interface")))
				Expect(networkInterfacePrototypeModel.PrimaryIpv4Address).To(Equal(core.StringPtr("10.0.0.5")))
				Expect(networkInterfacePrototypeModel.SecurityGroups).To(Equal([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}))
				Expect(networkInterfacePrototypeModel.Subnet).To(Equal(subnetIdentityModel))

				// Construct an instance of the InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID model
				instancePlacementTargetPrototypeModel := new(vpcv1.InstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID)
				Expect(instancePlacementTargetPrototypeModel).ToNot(BeNil())
				instancePlacementTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(instancePlacementTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the InstanceProfileIdentityByName model
				instanceProfileIdentityModel := new(vpcv1.InstanceProfileIdentityByName)
				Expect(instanceProfileIdentityModel).ToNot(BeNil())
				instanceProfileIdentityModel.Name = core.StringPtr("cc1-16x32")
				Expect(instanceProfileIdentityModel.Name).To(Equal(core.StringPtr("cc1-16x32")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID model
				volumeAttachmentVolumePrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID)
				Expect(volumeAttachmentVolumePrototypeInstanceContextModel).ToNot(BeNil())
				volumeAttachmentVolumePrototypeInstanceContextModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
				Expect(volumeAttachmentVolumePrototypeInstanceContextModel.ID).To(Equal(core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceContext model
				volumeAttachmentPrototypeInstanceContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceContext)
				Expect(volumeAttachmentPrototypeInstanceContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceContextModel.Volume = volumeAttachmentVolumePrototypeInstanceContextModel
				Expect(volumeAttachmentPrototypeInstanceContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceContextModel.Volume).To(Equal(volumeAttachmentVolumePrototypeInstanceContextModel))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				Expect(encryptionKeyIdentityModel).ToNot(BeNil())
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
				Expect(encryptionKeyIdentityModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")))

				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				Expect(volumeProfileIdentityModel).ToNot(BeNil())
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")
				Expect(volumeProfileIdentityModel.Name).To(Equal(core.StringPtr("general-purpose")))

				// Construct an instance of the VolumePrototypeInstanceByImageContext model
				volumePrototypeInstanceByImageContextModel := new(vpcv1.VolumePrototypeInstanceByImageContext)
				Expect(volumePrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumePrototypeInstanceByImageContextModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeInstanceByImageContextModel.EncryptionKey = encryptionKeyIdentityModel
				volumePrototypeInstanceByImageContextModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume")
				volumePrototypeInstanceByImageContextModel.Profile = volumeProfileIdentityModel
				Expect(volumePrototypeInstanceByImageContextModel.Capacity).To(Equal(core.Int64Ptr(int64(100))))
				Expect(volumePrototypeInstanceByImageContextModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))
				Expect(volumePrototypeInstanceByImageContextModel.Iops).To(Equal(core.Int64Ptr(int64(10000))))
				Expect(volumePrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(volumePrototypeInstanceByImageContextModel.Profile).To(Equal(volumeProfileIdentityModel))

				// Construct an instance of the VolumeAttachmentPrototypeInstanceByImageContext model
				volumeAttachmentPrototypeInstanceByImageContextModel := new(vpcv1.VolumeAttachmentPrototypeInstanceByImageContext)
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel).ToNot(BeNil())
				volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete = core.BoolPtr(true)
				volumeAttachmentPrototypeInstanceByImageContextModel.Name = core.StringPtr("my-volume-attachment")
				volumeAttachmentPrototypeInstanceByImageContextModel.Volume = volumePrototypeInstanceByImageContextModel
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(volumeAttachmentPrototypeInstanceByImageContextModel.Volume).To(Equal(volumePrototypeInstanceByImageContextModel))

				// Construct an instance of the ImageIdentityByID model
				imageIdentityModel := new(vpcv1.ImageIdentityByID)
				Expect(imageIdentityModel).ToNot(BeNil())
				imageIdentityModel.ID = core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")
				Expect(imageIdentityModel.ID).To(Equal(core.StringPtr("72b27b5c-f4b0-48bb-b954-5becc7c1dcb8")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the InstanceTemplatePrototypeInstanceByImage model
				instanceTemplatePrototypeModel := new(vpcv1.InstanceTemplatePrototypeInstanceByImage)
				Expect(instanceTemplatePrototypeModel).ToNot(BeNil())
				instanceTemplatePrototypeModel.Keys = []vpcv1.KeyIdentityIntf{keyIdentityModel}
				instanceTemplatePrototypeModel.Name = core.StringPtr("my-instance")
				instanceTemplatePrototypeModel.NetworkInterfaces = []vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}
				instanceTemplatePrototypeModel.PlacementTarget = instancePlacementTargetPrototypeModel
				instanceTemplatePrototypeModel.Profile = instanceProfileIdentityModel
				instanceTemplatePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				instanceTemplatePrototypeModel.UserData = core.StringPtr("testString")
				instanceTemplatePrototypeModel.VolumeAttachments = []vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}
				instanceTemplatePrototypeModel.VPC = vpcIdentityModel
				instanceTemplatePrototypeModel.BootVolumeAttachment = volumeAttachmentPrototypeInstanceByImageContextModel
				instanceTemplatePrototypeModel.Image = imageIdentityModel
				instanceTemplatePrototypeModel.PrimaryNetworkInterface = networkInterfacePrototypeModel
				instanceTemplatePrototypeModel.Zone = zoneIdentityModel
				Expect(instanceTemplatePrototypeModel.Keys).To(Equal([]vpcv1.KeyIdentityIntf{keyIdentityModel}))
				Expect(instanceTemplatePrototypeModel.Name).To(Equal(core.StringPtr("my-instance")))
				Expect(instanceTemplatePrototypeModel.NetworkInterfaces).To(Equal([]vpcv1.NetworkInterfacePrototype{*networkInterfacePrototypeModel}))
				Expect(instanceTemplatePrototypeModel.PlacementTarget).To(Equal(instancePlacementTargetPrototypeModel))
				Expect(instanceTemplatePrototypeModel.Profile).To(Equal(instanceProfileIdentityModel))
				Expect(instanceTemplatePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(instanceTemplatePrototypeModel.UserData).To(Equal(core.StringPtr("testString")))
				Expect(instanceTemplatePrototypeModel.VolumeAttachments).To(Equal([]vpcv1.VolumeAttachmentPrototypeInstanceContext{*volumeAttachmentPrototypeInstanceContextModel}))
				Expect(instanceTemplatePrototypeModel.VPC).To(Equal(vpcIdentityModel))
				Expect(instanceTemplatePrototypeModel.BootVolumeAttachment).To(Equal(volumeAttachmentPrototypeInstanceByImageContextModel))
				Expect(instanceTemplatePrototypeModel.Image).To(Equal(imageIdentityModel))
				Expect(instanceTemplatePrototypeModel.PrimaryNetworkInterface).To(Equal(networkInterfacePrototypeModel))
				Expect(instanceTemplatePrototypeModel.Zone).To(Equal(zoneIdentityModel))

				// Construct an instance of the CreateInstanceTemplateOptions model
				var instanceTemplatePrototype vpcv1.InstanceTemplatePrototypeIntf = nil
				createInstanceTemplateOptionsModel := vpcService.NewCreateInstanceTemplateOptions(instanceTemplatePrototype)
				createInstanceTemplateOptionsModel.SetInstanceTemplatePrototype(instanceTemplatePrototypeModel)
				createInstanceTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceTemplateOptionsModel).ToNot(BeNil())
				Expect(createInstanceTemplateOptionsModel.InstanceTemplatePrototype).To(Equal(instanceTemplatePrototypeModel))
				Expect(createInstanceTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateInstanceVolumeAttachmentOptions successfully`, func() {
				// Construct an instance of the VolumeIdentityByID model
				volumeIdentityModel := new(vpcv1.VolumeIdentityByID)
				Expect(volumeIdentityModel).ToNot(BeNil())
				volumeIdentityModel.ID = core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")
				Expect(volumeIdentityModel.ID).To(Equal(core.StringPtr("1a6b7274-678d-4dfb-8981-c71dd9d4daa5")))

				// Construct an instance of the CreateInstanceVolumeAttachmentOptions model
				instanceID := "testString"
				var createInstanceVolumeAttachmentOptionsVolume vpcv1.VolumeIdentityIntf = nil
				createInstanceVolumeAttachmentOptionsModel := vpcService.NewCreateInstanceVolumeAttachmentOptions(instanceID, createInstanceVolumeAttachmentOptionsVolume)
				createInstanceVolumeAttachmentOptionsModel.SetInstanceID("testString")
				createInstanceVolumeAttachmentOptionsModel.SetVolume(volumeIdentityModel)
				createInstanceVolumeAttachmentOptionsModel.SetDeleteVolumeOnInstanceDelete(true)
				createInstanceVolumeAttachmentOptionsModel.SetName("my-volume-attachment")
				createInstanceVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createInstanceVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(createInstanceVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(createInstanceVolumeAttachmentOptionsModel.Volume).To(Equal(volumeIdentityModel))
				Expect(createInstanceVolumeAttachmentOptionsModel.DeleteVolumeOnInstanceDelete).To(Equal(core.BoolPtr(true)))
				Expect(createInstanceVolumeAttachmentOptionsModel.Name).To(Equal(core.StringPtr("my-volume-attachment")))
				Expect(createInstanceVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateIpsecPolicyOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateIpsecPolicyOptions model
				createIpsecPolicyOptionsAuthenticationAlgorithm := "md5"
				createIpsecPolicyOptionsEncryptionAlgorithm := "triple_des"
				createIpsecPolicyOptionsPfs := "disabled"
				createIpsecPolicyOptionsModel := vpcService.NewCreateIpsecPolicyOptions(createIpsecPolicyOptionsAuthenticationAlgorithm, createIpsecPolicyOptionsEncryptionAlgorithm, createIpsecPolicyOptionsPfs)
				createIpsecPolicyOptionsModel.SetAuthenticationAlgorithm("md5")
				createIpsecPolicyOptionsModel.SetEncryptionAlgorithm("triple_des")
				createIpsecPolicyOptionsModel.SetPfs("disabled")
				createIpsecPolicyOptionsModel.SetKeyLifetime(int64(3600))
				createIpsecPolicyOptionsModel.SetName("my-ipsec-policy")
				createIpsecPolicyOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(createIpsecPolicyOptionsModel.AuthenticationAlgorithm).To(Equal(core.StringPtr("md5")))
				Expect(createIpsecPolicyOptionsModel.EncryptionAlgorithm).To(Equal(core.StringPtr("triple_des")))
				Expect(createIpsecPolicyOptionsModel.Pfs).To(Equal(core.StringPtr("disabled")))
				Expect(createIpsecPolicyOptionsModel.KeyLifetime).To(Equal(core.Int64Ptr(int64(3600))))
				Expect(createIpsecPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-ipsec-policy")))
				Expect(createIpsecPolicyOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateKeyOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateKeyOptions model
				createKeyOptionsPublicKey := "AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En"
				createKeyOptionsModel := vpcService.NewCreateKeyOptions(createKeyOptionsPublicKey)
				createKeyOptionsModel.SetPublicKey("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")
				createKeyOptionsModel.SetName("my-key")
				createKeyOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createKeyOptionsModel.SetType("rsa")
				createKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createKeyOptionsModel).ToNot(BeNil())
				Expect(createKeyOptionsModel.PublicKey).To(Equal(core.StringPtr("AAAAB3NzaC1yc2EAAAADAQABAAABAQDDGe50Bxa5T5NDddrrtbx2Y4/VGbiCgXqnBsYToIUKoFSHTQl5IX3PasGnneKanhcLwWz5M5MoCRvhxTp66NKzIfAz7r+FX9rxgR+ZgcM253YAqOVeIpOU408simDZKriTlN8kYsXL7P34tsWuAJf4MgZtJAQxous/2byetpdCv8ddnT4X3ltOg9w+LqSCPYfNivqH00Eh7S1Ldz7I8aw5WOp5a+sQFP/RbwfpwHp+ny7DfeIOokcuI42tJkoBn7UsLTVpCSmXr2EDRlSWe/1M/iHNRBzaT3CK0+SwZWd2AEjePxSnWKNGIEUJDlUYp7hKhiQcgT5ZAnWU121oc5En")))
				Expect(createKeyOptionsModel.Name).To(Equal(core.StringPtr("my-key")))
				Expect(createKeyOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createKeyOptionsModel.Type).To(Equal(core.StringPtr("rsa")))
				Expect(createKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the CertificateInstanceIdentityByCRN model
				certificateInstanceIdentityModel := new(vpcv1.CertificateInstanceIdentityByCRN)
				Expect(certificateInstanceIdentityModel).ToNot(BeNil())
				certificateInstanceIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")
				Expect(certificateInstanceIdentityModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758")))

				// Construct an instance of the LoadBalancerPoolIdentityByID model
				loadBalancerPoolIdentityModel := new(vpcv1.LoadBalancerPoolIdentityByID)
				Expect(loadBalancerPoolIdentityModel).ToNot(BeNil())
				loadBalancerPoolIdentityModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerPoolIdentityModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				Expect(loadBalancerListenerPolicyRulePrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Type).To(Equal(core.StringPtr("header")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				Expect(loadBalancerListenerPolicyTargetPrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerListenerPolicyTargetPrototypeModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the LoadBalancerListenerPolicyPrototype model
				loadBalancerListenerPolicyPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyPrototype)
				Expect(loadBalancerListenerPolicyPrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyPrototypeModel.Action = core.StringPtr("forward")
				loadBalancerListenerPolicyPrototypeModel.Name = core.StringPtr("my-policy")
				loadBalancerListenerPolicyPrototypeModel.Priority = core.Int64Ptr(int64(5))
				loadBalancerListenerPolicyPrototypeModel.Rules = []vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}
				loadBalancerListenerPolicyPrototypeModel.Target = loadBalancerListenerPolicyTargetPrototypeModel
				Expect(loadBalancerListenerPolicyPrototypeModel.Action).To(Equal(core.StringPtr("forward")))
				Expect(loadBalancerListenerPolicyPrototypeModel.Name).To(Equal(core.StringPtr("my-policy")))
				Expect(loadBalancerListenerPolicyPrototypeModel.Priority).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerListenerPolicyPrototypeModel.Rules).To(Equal([]vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}))
				Expect(loadBalancerListenerPolicyPrototypeModel.Target).To(Equal(loadBalancerListenerPolicyTargetPrototypeModel))

				// Construct an instance of the CreateLoadBalancerListenerOptions model
				loadBalancerID := "testString"
				createLoadBalancerListenerOptionsPort := int64(443)
				createLoadBalancerListenerOptionsProtocol := "http"
				createLoadBalancerListenerOptionsModel := vpcService.NewCreateLoadBalancerListenerOptions(loadBalancerID, createLoadBalancerListenerOptionsPort, createLoadBalancerListenerOptionsProtocol)
				createLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerListenerOptionsModel.SetPort(int64(443))
				createLoadBalancerListenerOptionsModel.SetProtocol("http")
				createLoadBalancerListenerOptionsModel.SetAcceptProxyProtocol(true)
				createLoadBalancerListenerOptionsModel.SetCertificateInstance(certificateInstanceIdentityModel)
				createLoadBalancerListenerOptionsModel.SetConnectionLimit(int64(2000))
				createLoadBalancerListenerOptionsModel.SetDefaultPool(loadBalancerPoolIdentityModel)
				createLoadBalancerListenerOptionsModel.SetPolicies([]vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel})
				createLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerOptionsModel.Port).To(Equal(core.Int64Ptr(int64(443))))
				Expect(createLoadBalancerListenerOptionsModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(createLoadBalancerListenerOptionsModel.AcceptProxyProtocol).To(Equal(core.BoolPtr(true)))
				Expect(createLoadBalancerListenerOptionsModel.CertificateInstance).To(Equal(certificateInstanceIdentityModel))
				Expect(createLoadBalancerListenerOptionsModel.ConnectionLimit).To(Equal(core.Int64Ptr(int64(2000))))
				Expect(createLoadBalancerListenerOptionsModel.DefaultPool).To(Equal(loadBalancerPoolIdentityModel))
				Expect(createLoadBalancerListenerOptionsModel.Policies).To(Equal([]vpcv1.LoadBalancerListenerPolicyPrototype{*loadBalancerListenerPolicyPrototypeModel}))
				Expect(createLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the LoadBalancerListenerPolicyRulePrototype model
				loadBalancerListenerPolicyRulePrototypeModel := new(vpcv1.LoadBalancerListenerPolicyRulePrototype)
				Expect(loadBalancerListenerPolicyRulePrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyRulePrototypeModel.Condition = core.StringPtr("contains")
				loadBalancerListenerPolicyRulePrototypeModel.Field = core.StringPtr("MY-APP-HEADER")
				loadBalancerListenerPolicyRulePrototypeModel.Type = core.StringPtr("header")
				loadBalancerListenerPolicyRulePrototypeModel.Value = core.StringPtr("testString")
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Type).To(Equal(core.StringPtr("header")))
				Expect(loadBalancerListenerPolicyRulePrototypeModel.Value).To(Equal(core.StringPtr("testString")))

				// Construct an instance of the LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID model
				loadBalancerListenerPolicyTargetPrototypeModel := new(vpcv1.LoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID)
				Expect(loadBalancerListenerPolicyTargetPrototypeModel).ToNot(BeNil())
				loadBalancerListenerPolicyTargetPrototypeModel.ID = core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")
				Expect(loadBalancerListenerPolicyTargetPrototypeModel.ID).To(Equal(core.StringPtr("70294e14-4e61-11e8-bcf4-0242ac110004")))

				// Construct an instance of the CreateLoadBalancerListenerPolicyOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				createLoadBalancerListenerPolicyOptionsAction := "forward"
				createLoadBalancerListenerPolicyOptionsPriority := int64(5)
				createLoadBalancerListenerPolicyOptionsModel := vpcService.NewCreateLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, createLoadBalancerListenerPolicyOptionsAction, createLoadBalancerListenerPolicyOptionsPriority)
				createLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				createLoadBalancerListenerPolicyOptionsModel.SetAction("forward")
				createLoadBalancerListenerPolicyOptionsModel.SetPriority(int64(5))
				createLoadBalancerListenerPolicyOptionsModel.SetName("my-policy")
				createLoadBalancerListenerPolicyOptionsModel.SetRules([]vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel})
				createLoadBalancerListenerPolicyOptionsModel.SetTarget(loadBalancerListenerPolicyTargetPrototypeModel)
				createLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Action).To(Equal(core.StringPtr("forward")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Priority).To(Equal(core.Int64Ptr(int64(5))))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Name).To(Equal(core.StringPtr("my-policy")))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Rules).To(Equal([]vpcv1.LoadBalancerListenerPolicyRulePrototype{*loadBalancerListenerPolicyRulePrototypeModel}))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Target).To(Equal(loadBalancerListenerPolicyTargetPrototypeModel))
				Expect(createLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				// Construct an instance of the CreateLoadBalancerListenerPolicyRuleOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				createLoadBalancerListenerPolicyRuleOptionsCondition := "contains"
				createLoadBalancerListenerPolicyRuleOptionsType := "header"
				createLoadBalancerListenerPolicyRuleOptionsValue := "testString"
				createLoadBalancerListenerPolicyRuleOptionsModel := vpcService.NewCreateLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, createLoadBalancerListenerPolicyRuleOptionsCondition, createLoadBalancerListenerPolicyRuleOptionsType, createLoadBalancerListenerPolicyRuleOptionsValue)
				createLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetCondition("contains")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetType("header")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetValue("testString")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetField("MY-APP-HEADER")
				createLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Condition).To(Equal(core.StringPtr("contains")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Type).To(Equal(core.StringPtr("header")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Value).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Field).To(Equal(core.StringPtr("MY-APP-HEADER")))
				Expect(createLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerOptions successfully`, func() {
				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the LoadBalancerPoolIdentityByName model
				loadBalancerPoolIdentityByNameModel := new(vpcv1.LoadBalancerPoolIdentityByName)
				Expect(loadBalancerPoolIdentityByNameModel).ToNot(BeNil())
				loadBalancerPoolIdentityByNameModel.Name = core.StringPtr("my-load-balancer-pool")
				Expect(loadBalancerPoolIdentityByNameModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))

				// Construct an instance of the LoadBalancerListenerPrototypeLoadBalancerContext model
				loadBalancerListenerPrototypeLoadBalancerContextModel := new(vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext)
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel).ToNot(BeNil())
				loadBalancerListenerPrototypeLoadBalancerContextModel.AcceptProxyProtocol = core.BoolPtr(true)
				loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit = core.Int64Ptr(int64(2000))
				loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool = loadBalancerPoolIdentityByNameModel
				loadBalancerListenerPrototypeLoadBalancerContextModel.Port = core.Int64Ptr(int64(443))
				loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol = core.StringPtr("http")
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.AcceptProxyProtocol).To(Equal(core.BoolPtr(true)))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.ConnectionLimit).To(Equal(core.Int64Ptr(int64(2000))))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.DefaultPool).To(Equal(loadBalancerPoolIdentityByNameModel))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.Port).To(Equal(core.Int64Ptr(int64(443))))
				Expect(loadBalancerListenerPrototypeLoadBalancerContextModel.Protocol).To(Equal(core.StringPtr("http")))

				// Construct an instance of the LoadBalancerLoggingDatapath model
				loadBalancerLoggingDatapathModel := new(vpcv1.LoadBalancerLoggingDatapath)
				Expect(loadBalancerLoggingDatapathModel).ToNot(BeNil())
				loadBalancerLoggingDatapathModel.Active = core.BoolPtr(true)
				Expect(loadBalancerLoggingDatapathModel.Active).To(Equal(core.BoolPtr(true)))

				// Construct an instance of the LoadBalancerLogging model
				loadBalancerLoggingModel := new(vpcv1.LoadBalancerLogging)
				Expect(loadBalancerLoggingModel).ToNot(BeNil())
				loadBalancerLoggingModel.Datapath = loadBalancerLoggingDatapathModel
				Expect(loadBalancerLoggingModel.Datapath).To(Equal(loadBalancerLoggingDatapathModel))

				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				Expect(loadBalancerPoolHealthMonitorPrototypeModel).ToNot(BeNil())
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Delay).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(22))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Type).To(Equal(core.StringPtr("http")))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.URLPath).To(Equal(core.StringPtr("/")))

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				Expect(loadBalancerPoolMemberPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				Expect(loadBalancerPoolMemberPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(loadBalancerPoolMemberPrototypeModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(loadBalancerPoolMemberPrototypeModel.Weight).To(Equal(core.Int64Ptr(int64(50))))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				Expect(loadBalancerPoolSessionPersistencePrototypeModel).ToNot(BeNil())
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")
				Expect(loadBalancerPoolSessionPersistencePrototypeModel.Type).To(Equal(core.StringPtr("source_ip")))

				// Construct an instance of the LoadBalancerPoolPrototype model
				loadBalancerPoolPrototypeModel := new(vpcv1.LoadBalancerPoolPrototype)
				Expect(loadBalancerPoolPrototypeModel).ToNot(BeNil())
				loadBalancerPoolPrototypeModel.Algorithm = core.StringPtr("least_connections")
				loadBalancerPoolPrototypeModel.HealthMonitor = loadBalancerPoolHealthMonitorPrototypeModel
				loadBalancerPoolPrototypeModel.Members = []vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}
				loadBalancerPoolPrototypeModel.Name = core.StringPtr("my-load-balancer-pool")
				loadBalancerPoolPrototypeModel.Protocol = core.StringPtr("http")
				loadBalancerPoolPrototypeModel.ProxyProtocol = core.StringPtr("disabled")
				loadBalancerPoolPrototypeModel.SessionPersistence = loadBalancerPoolSessionPersistencePrototypeModel
				Expect(loadBalancerPoolPrototypeModel.Algorithm).To(Equal(core.StringPtr("least_connections")))
				Expect(loadBalancerPoolPrototypeModel.HealthMonitor).To(Equal(loadBalancerPoolHealthMonitorPrototypeModel))
				Expect(loadBalancerPoolPrototypeModel.Members).To(Equal([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}))
				Expect(loadBalancerPoolPrototypeModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))
				Expect(loadBalancerPoolPrototypeModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(loadBalancerPoolPrototypeModel.ProxyProtocol).To(Equal(core.StringPtr("disabled")))
				Expect(loadBalancerPoolPrototypeModel.SessionPersistence).To(Equal(loadBalancerPoolSessionPersistencePrototypeModel))

				// Construct an instance of the LoadBalancerProfileIdentityByName model
				loadBalancerProfileIdentityModel := new(vpcv1.LoadBalancerProfileIdentityByName)
				Expect(loadBalancerProfileIdentityModel).ToNot(BeNil())
				loadBalancerProfileIdentityModel.Name = core.StringPtr("network-fixed")
				Expect(loadBalancerProfileIdentityModel.Name).To(Equal(core.StringPtr("network-fixed")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SecurityGroupIdentityByID model
				securityGroupIdentityModel := new(vpcv1.SecurityGroupIdentityByID)
				Expect(securityGroupIdentityModel).ToNot(BeNil())
				securityGroupIdentityModel.ID = core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")
				Expect(securityGroupIdentityModel.ID).To(Equal(core.StringPtr("be5df5ca-12a0-494b-907e-aa6ec2bfa271")))

				// Construct an instance of the CreateLoadBalancerOptions model
				createLoadBalancerOptionsIsPublic := true
				createLoadBalancerOptionsSubnets := []vpcv1.SubnetIdentityIntf{}
				createLoadBalancerOptionsModel := vpcService.NewCreateLoadBalancerOptions(createLoadBalancerOptionsIsPublic, createLoadBalancerOptionsSubnets)
				createLoadBalancerOptionsModel.SetIsPublic(true)
				createLoadBalancerOptionsModel.SetSubnets([]vpcv1.SubnetIdentityIntf{subnetIdentityModel})
				createLoadBalancerOptionsModel.SetListeners([]vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel})
				createLoadBalancerOptionsModel.SetLogging(loadBalancerLoggingModel)
				createLoadBalancerOptionsModel.SetName("my-load-balancer")
				createLoadBalancerOptionsModel.SetPools([]vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel})
				createLoadBalancerOptionsModel.SetProfile(loadBalancerProfileIdentityModel)
				createLoadBalancerOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createLoadBalancerOptionsModel.SetSecurityGroups([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel})
				createLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerOptionsModel.IsPublic).To(Equal(core.BoolPtr(true)))
				Expect(createLoadBalancerOptionsModel.Subnets).To(Equal([]vpcv1.SubnetIdentityIntf{subnetIdentityModel}))
				Expect(createLoadBalancerOptionsModel.Listeners).To(Equal([]vpcv1.LoadBalancerListenerPrototypeLoadBalancerContext{*loadBalancerListenerPrototypeLoadBalancerContextModel}))
				Expect(createLoadBalancerOptionsModel.Logging).To(Equal(loadBalancerLoggingModel))
				Expect(createLoadBalancerOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer")))
				Expect(createLoadBalancerOptionsModel.Pools).To(Equal([]vpcv1.LoadBalancerPoolPrototype{*loadBalancerPoolPrototypeModel}))
				Expect(createLoadBalancerOptionsModel.Profile).To(Equal(loadBalancerProfileIdentityModel))
				Expect(createLoadBalancerOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createLoadBalancerOptionsModel.SecurityGroups).To(Equal([]vpcv1.SecurityGroupIdentityIntf{securityGroupIdentityModel}))
				Expect(createLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the CreateLoadBalancerPoolMemberOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				createLoadBalancerPoolMemberOptionsPort := int64(80)
				var createLoadBalancerPoolMemberOptionsTarget vpcv1.LoadBalancerPoolMemberTargetPrototypeIntf = nil
				createLoadBalancerPoolMemberOptionsModel := vpcService.NewCreateLoadBalancerPoolMemberOptions(loadBalancerID, poolID, createLoadBalancerPoolMemberOptionsPort, createLoadBalancerPoolMemberOptionsTarget)
				createLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				createLoadBalancerPoolMemberOptionsModel.SetPort(int64(80))
				createLoadBalancerPoolMemberOptionsModel.SetTarget(loadBalancerPoolMemberTargetPrototypeModel)
				createLoadBalancerPoolMemberOptionsModel.SetWeight(int64(50))
				createLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerPoolMemberOptionsModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(createLoadBalancerPoolMemberOptionsModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(createLoadBalancerPoolMemberOptionsModel.Weight).To(Equal(core.Int64Ptr(int64(50))))
				Expect(createLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolHealthMonitorPrototype model
				loadBalancerPoolHealthMonitorPrototypeModel := new(vpcv1.LoadBalancerPoolHealthMonitorPrototype)
				Expect(loadBalancerPoolHealthMonitorPrototypeModel).ToNot(BeNil())
				loadBalancerPoolHealthMonitorPrototypeModel.Delay = core.Int64Ptr(int64(5))
				loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Port = core.Int64Ptr(int64(22))
				loadBalancerPoolHealthMonitorPrototypeModel.Timeout = core.Int64Ptr(int64(2))
				loadBalancerPoolHealthMonitorPrototypeModel.Type = core.StringPtr("http")
				loadBalancerPoolHealthMonitorPrototypeModel.URLPath = core.StringPtr("/")
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Delay).To(Equal(core.Int64Ptr(int64(5))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.MaxRetries).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(22))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(2))))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.Type).To(Equal(core.StringPtr("http")))
				Expect(loadBalancerPoolHealthMonitorPrototypeModel.URLPath).To(Equal(core.StringPtr("/")))

				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				Expect(loadBalancerPoolMemberPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				Expect(loadBalancerPoolMemberPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(loadBalancerPoolMemberPrototypeModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(loadBalancerPoolMemberPrototypeModel.Weight).To(Equal(core.Int64Ptr(int64(50))))

				// Construct an instance of the LoadBalancerPoolSessionPersistencePrototype model
				loadBalancerPoolSessionPersistencePrototypeModel := new(vpcv1.LoadBalancerPoolSessionPersistencePrototype)
				Expect(loadBalancerPoolSessionPersistencePrototypeModel).ToNot(BeNil())
				loadBalancerPoolSessionPersistencePrototypeModel.Type = core.StringPtr("source_ip")
				Expect(loadBalancerPoolSessionPersistencePrototypeModel.Type).To(Equal(core.StringPtr("source_ip")))

				// Construct an instance of the CreateLoadBalancerPoolOptions model
				loadBalancerID := "testString"
				createLoadBalancerPoolOptionsAlgorithm := "least_connections"
				var createLoadBalancerPoolOptionsHealthMonitor *vpcv1.LoadBalancerPoolHealthMonitorPrototype = nil
				createLoadBalancerPoolOptionsProtocol := "http"
				createLoadBalancerPoolOptionsModel := vpcService.NewCreateLoadBalancerPoolOptions(loadBalancerID, createLoadBalancerPoolOptionsAlgorithm, createLoadBalancerPoolOptionsHealthMonitor, createLoadBalancerPoolOptionsProtocol)
				createLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				createLoadBalancerPoolOptionsModel.SetAlgorithm("least_connections")
				createLoadBalancerPoolOptionsModel.SetHealthMonitor(loadBalancerPoolHealthMonitorPrototypeModel)
				createLoadBalancerPoolOptionsModel.SetProtocol("http")
				createLoadBalancerPoolOptionsModel.SetMembers([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel})
				createLoadBalancerPoolOptionsModel.SetName("my-load-balancer-pool")
				createLoadBalancerPoolOptionsModel.SetProxyProtocol("disabled")
				createLoadBalancerPoolOptionsModel.SetSessionPersistence(loadBalancerPoolSessionPersistencePrototypeModel)
				createLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(createLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(createLoadBalancerPoolOptionsModel.Algorithm).To(Equal(core.StringPtr("least_connections")))
				Expect(createLoadBalancerPoolOptionsModel.HealthMonitor).To(Equal(loadBalancerPoolHealthMonitorPrototypeModel))
				Expect(createLoadBalancerPoolOptionsModel.Protocol).To(Equal(core.StringPtr("http")))
				Expect(createLoadBalancerPoolOptionsModel.Members).To(Equal([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}))
				Expect(createLoadBalancerPoolOptionsModel.Name).To(Equal(core.StringPtr("my-load-balancer-pool")))
				Expect(createLoadBalancerPoolOptionsModel.ProxyProtocol).To(Equal(core.StringPtr("disabled")))
				Expect(createLoadBalancerPoolOptionsModel.SessionPersistence).To(Equal(loadBalancerPoolSessionPersistencePrototypeModel))
				Expect(createLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNetworkACLOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("cf7cd5a-2f30-4336-a495-6addc820cd61")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("cf7cd5a-2f30-4336-a495-6addc820cd61")))

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp model
				networkACLRulePrototypeNetworkACLContextModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp)
				Expect(networkACLRulePrototypeNetworkACLContextModel).ToNot(BeNil())
				networkACLRulePrototypeNetworkACLContextModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeNetworkACLContextModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeNetworkACLContextModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeNetworkACLContextModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeNetworkACLContextModel.Code = core.Int64Ptr(int64(0))
				networkACLRulePrototypeNetworkACLContextModel.Protocol = core.StringPtr("icmp")
				networkACLRulePrototypeNetworkACLContextModel.Type = core.Int64Ptr(int64(8))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Action).To(Equal(core.StringPtr("allow")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Destination).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Name).To(Equal(core.StringPtr("my-rule-2")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Source).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Code).To(Equal(core.Int64Ptr(int64(0))))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Protocol).To(Equal(core.StringPtr("icmp")))
				Expect(networkACLRulePrototypeNetworkACLContextModel.Type).To(Equal(core.Int64Ptr(int64(8))))

				// Construct an instance of the NetworkACLPrototypeNetworkACLByRules model
				networkACLPrototypeModel := new(vpcv1.NetworkACLPrototypeNetworkACLByRules)
				Expect(networkACLPrototypeModel).ToNot(BeNil())
				networkACLPrototypeModel.Name = core.StringPtr("my-network-acl")
				networkACLPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				networkACLPrototypeModel.VPC = vpcIdentityModel
				networkACLPrototypeModel.Rules = []vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}
				Expect(networkACLPrototypeModel.Name).To(Equal(core.StringPtr("my-network-acl")))
				Expect(networkACLPrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(networkACLPrototypeModel.VPC).To(Equal(vpcIdentityModel))
				Expect(networkACLPrototypeModel.Rules).To(Equal([]vpcv1.NetworkACLRulePrototypeNetworkACLContextIntf{networkACLRulePrototypeNetworkACLContextModel}))

				// Construct an instance of the CreateNetworkACLOptions model
				createNetworkACLOptionsModel := vpcService.NewCreateNetworkACLOptions()
				createNetworkACLOptionsModel.SetNetworkACLPrototype(networkACLPrototypeModel)
				createNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createNetworkACLOptionsModel).ToNot(BeNil())
				Expect(createNetworkACLOptionsModel.NetworkACLPrototype).To(Equal(networkACLPrototypeModel))
				Expect(createNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateNetworkACLRuleOptions successfully`, func() {
				// Construct an instance of the NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID model
				networkACLRuleBeforePrototypeModel := new(vpcv1.NetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID)
				Expect(networkACLRuleBeforePrototypeModel).ToNot(BeNil())
				networkACLRuleBeforePrototypeModel.ID = core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")
				Expect(networkACLRuleBeforePrototypeModel.ID).To(Equal(core.StringPtr("8daca77a-4980-4d33-8f3e-7038797be8f9")))

				// Construct an instance of the NetworkACLRulePrototypeNetworkACLRuleProtocolAll model
				networkACLRulePrototypeModel := new(vpcv1.NetworkACLRulePrototypeNetworkACLRuleProtocolAll)
				Expect(networkACLRulePrototypeModel).ToNot(BeNil())
				networkACLRulePrototypeModel.Action = core.StringPtr("allow")
				networkACLRulePrototypeModel.Before = networkACLRuleBeforePrototypeModel
				networkACLRulePrototypeModel.Destination = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Direction = core.StringPtr("inbound")
				networkACLRulePrototypeModel.Name = core.StringPtr("my-rule-2")
				networkACLRulePrototypeModel.Source = core.StringPtr("192.168.3.2/32")
				networkACLRulePrototypeModel.Protocol = core.StringPtr("all")
				Expect(networkACLRulePrototypeModel.Action).To(Equal(core.StringPtr("allow")))
				Expect(networkACLRulePrototypeModel.Before).To(Equal(networkACLRuleBeforePrototypeModel))
				Expect(networkACLRulePrototypeModel.Destination).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(networkACLRulePrototypeModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(networkACLRulePrototypeModel.Name).To(Equal(core.StringPtr("my-rule-2")))
				Expect(networkACLRulePrototypeModel.Source).To(Equal(core.StringPtr("192.168.3.2/32")))
				Expect(networkACLRulePrototypeModel.Protocol).To(Equal(core.StringPtr("all")))

				// Construct an instance of the CreateNetworkACLRuleOptions model
				networkACLID := "testString"
				var networkACLRulePrototype vpcv1.NetworkACLRulePrototypeIntf = nil
				createNetworkACLRuleOptionsModel := vpcService.NewCreateNetworkACLRuleOptions(networkACLID, networkACLRulePrototype)
				createNetworkACLRuleOptionsModel.SetNetworkACLID("testString")
				createNetworkACLRuleOptionsModel.SetNetworkACLRulePrototype(networkACLRulePrototypeModel)
				createNetworkACLRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createNetworkACLRuleOptionsModel).ToNot(BeNil())
				Expect(createNetworkACLRuleOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(createNetworkACLRuleOptionsModel.NetworkACLRulePrototype).To(Equal(networkACLRulePrototypeModel))
				Expect(createNetworkACLRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreatePublicGatewayOptions successfully`, func() {
				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID model
				publicGatewayFloatingIPPrototypeModel := new(vpcv1.PublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID)
				Expect(publicGatewayFloatingIPPrototypeModel).ToNot(BeNil())
				publicGatewayFloatingIPPrototypeModel.ID = core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")
				Expect(publicGatewayFloatingIPPrototypeModel.ID).To(Equal(core.StringPtr("39300233-9995-4806-89a5-3c1b6eb88689")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreatePublicGatewayOptions model
				var createPublicGatewayOptionsVPC vpcv1.VPCIdentityIntf = nil
				var createPublicGatewayOptionsZone vpcv1.ZoneIdentityIntf = nil
				createPublicGatewayOptionsModel := vpcService.NewCreatePublicGatewayOptions(createPublicGatewayOptionsVPC, createPublicGatewayOptionsZone)
				createPublicGatewayOptionsModel.SetVPC(vpcIdentityModel)
				createPublicGatewayOptionsModel.SetZone(zoneIdentityModel)
				createPublicGatewayOptionsModel.SetFloatingIP(publicGatewayFloatingIPPrototypeModel)
				createPublicGatewayOptionsModel.SetName("my-public-gateway")
				createPublicGatewayOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(createPublicGatewayOptionsModel.VPC).To(Equal(vpcIdentityModel))
				Expect(createPublicGatewayOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createPublicGatewayOptionsModel.FloatingIP).To(Equal(publicGatewayFloatingIPPrototypeModel))
				Expect(createPublicGatewayOptionsModel.Name).To(Equal(core.StringPtr("my-public-gateway")))
				Expect(createPublicGatewayOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSecurityGroupOptions successfully`, func() {
				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				Expect(securityGroupRuleRemotePrototypeModel).ToNot(BeNil())
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(securityGroupRuleRemotePrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				Expect(securityGroupRulePrototypeModel).ToNot(BeNil())
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")
				Expect(securityGroupRulePrototypeModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(securityGroupRulePrototypeModel.IPVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(securityGroupRulePrototypeModel.Remote).To(Equal(securityGroupRuleRemotePrototypeModel))
				Expect(securityGroupRulePrototypeModel.PortMax).To(Equal(core.Int64Ptr(int64(22))))
				Expect(securityGroupRulePrototypeModel.PortMin).To(Equal(core.Int64Ptr(int64(22))))
				Expect(securityGroupRulePrototypeModel.Protocol).To(Equal(core.StringPtr("udp")))

				// Construct an instance of the CreateSecurityGroupOptions model
				var createSecurityGroupOptionsVPC vpcv1.VPCIdentityIntf = nil
				createSecurityGroupOptionsModel := vpcService.NewCreateSecurityGroupOptions(createSecurityGroupOptionsVPC)
				createSecurityGroupOptionsModel.SetVPC(vpcIdentityModel)
				createSecurityGroupOptionsModel.SetName("my-security-group")
				createSecurityGroupOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createSecurityGroupOptionsModel.SetRules([]vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel})
				createSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(createSecurityGroupOptionsModel.VPC).To(Equal(vpcIdentityModel))
				Expect(createSecurityGroupOptionsModel.Name).To(Equal(core.StringPtr("my-security-group")))
				Expect(createSecurityGroupOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createSecurityGroupOptionsModel.Rules).To(Equal([]vpcv1.SecurityGroupRulePrototypeIntf{securityGroupRulePrototypeModel}))
				Expect(createSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the SecurityGroupRuleRemotePrototypeIP model
				securityGroupRuleRemotePrototypeModel := new(vpcv1.SecurityGroupRuleRemotePrototypeIP)
				Expect(securityGroupRuleRemotePrototypeModel).ToNot(BeNil())
				securityGroupRuleRemotePrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(securityGroupRuleRemotePrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp model
				securityGroupRulePrototypeModel := new(vpcv1.SecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp)
				Expect(securityGroupRulePrototypeModel).ToNot(BeNil())
				securityGroupRulePrototypeModel.Direction = core.StringPtr("inbound")
				securityGroupRulePrototypeModel.IPVersion = core.StringPtr("ipv4")
				securityGroupRulePrototypeModel.Remote = securityGroupRuleRemotePrototypeModel
				securityGroupRulePrototypeModel.PortMax = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.PortMin = core.Int64Ptr(int64(22))
				securityGroupRulePrototypeModel.Protocol = core.StringPtr("udp")
				Expect(securityGroupRulePrototypeModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(securityGroupRulePrototypeModel.IPVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(securityGroupRulePrototypeModel.Remote).To(Equal(securityGroupRuleRemotePrototypeModel))
				Expect(securityGroupRulePrototypeModel.PortMax).To(Equal(core.Int64Ptr(int64(22))))
				Expect(securityGroupRulePrototypeModel.PortMin).To(Equal(core.Int64Ptr(int64(22))))
				Expect(securityGroupRulePrototypeModel.Protocol).To(Equal(core.StringPtr("udp")))

				// Construct an instance of the CreateSecurityGroupRuleOptions model
				securityGroupID := "testString"
				var securityGroupRulePrototype vpcv1.SecurityGroupRulePrototypeIntf = nil
				createSecurityGroupRuleOptionsModel := vpcService.NewCreateSecurityGroupRuleOptions(securityGroupID, securityGroupRulePrototype)
				createSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				createSecurityGroupRuleOptionsModel.SetSecurityGroupRulePrototype(securityGroupRulePrototypeModel)
				createSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(createSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createSecurityGroupRuleOptionsModel.SecurityGroupRulePrototype).To(Equal(securityGroupRulePrototypeModel))
				Expect(createSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSecurityGroupTargetBindingOptions successfully`, func() {
				// Construct an instance of the CreateSecurityGroupTargetBindingOptions model
				securityGroupID := "testString"
				id := "testString"
				createSecurityGroupTargetBindingOptionsModel := vpcService.NewCreateSecurityGroupTargetBindingOptions(securityGroupID, id)
				createSecurityGroupTargetBindingOptionsModel.SetSecurityGroupID("testString")
				createSecurityGroupTargetBindingOptionsModel.SetID("testString")
				createSecurityGroupTargetBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSecurityGroupTargetBindingOptionsModel).ToNot(BeNil())
				Expect(createSecurityGroupTargetBindingOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(createSecurityGroupTargetBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(createSecurityGroupTargetBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSubnetOptions successfully`, func() {
				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				Expect(networkACLIdentityModel).ToNot(BeNil())
				networkACLIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
				Expect(networkACLIdentityModel.ID).To(Equal(core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")))

				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				Expect(publicGatewayIdentityModel).ToNot(BeNil())
				publicGatewayIdentityModel.ID = core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")
				Expect(publicGatewayIdentityModel.ID).To(Equal(core.StringPtr("dc5431ef-1fc6-4861-adc9-a59d077d1241")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				Expect(routingTableIdentityModel).ToNot(BeNil())
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")
				Expect(routingTableIdentityModel.ID).To(Equal(core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")))

				// Construct an instance of the VPCIdentityByID model
				vpcIdentityModel := new(vpcv1.VPCIdentityByID)
				Expect(vpcIdentityModel).ToNot(BeNil())
				vpcIdentityModel.ID = core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")
				Expect(vpcIdentityModel.ID).To(Equal(core.StringPtr("4727d842-f94f-4a2d-824a-9bc9b02c523b")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the SubnetPrototypeSubnetByTotalCount model
				subnetPrototypeModel := new(vpcv1.SubnetPrototypeSubnetByTotalCount)
				Expect(subnetPrototypeModel).ToNot(BeNil())
				subnetPrototypeModel.IPVersion = core.StringPtr("ipv4")
				subnetPrototypeModel.Name = core.StringPtr("my-subnet")
				subnetPrototypeModel.NetworkACL = networkACLIdentityModel
				subnetPrototypeModel.PublicGateway = publicGatewayIdentityModel
				subnetPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				subnetPrototypeModel.RoutingTable = routingTableIdentityModel
				subnetPrototypeModel.VPC = vpcIdentityModel
				subnetPrototypeModel.TotalIpv4AddressCount = core.Int64Ptr(int64(256))
				subnetPrototypeModel.Zone = zoneIdentityModel
				Expect(subnetPrototypeModel.IPVersion).To(Equal(core.StringPtr("ipv4")))
				Expect(subnetPrototypeModel.Name).To(Equal(core.StringPtr("my-subnet")))
				Expect(subnetPrototypeModel.NetworkACL).To(Equal(networkACLIdentityModel))
				Expect(subnetPrototypeModel.PublicGateway).To(Equal(publicGatewayIdentityModel))
				Expect(subnetPrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(subnetPrototypeModel.RoutingTable).To(Equal(routingTableIdentityModel))
				Expect(subnetPrototypeModel.VPC).To(Equal(vpcIdentityModel))
				Expect(subnetPrototypeModel.TotalIpv4AddressCount).To(Equal(core.Int64Ptr(int64(256))))
				Expect(subnetPrototypeModel.Zone).To(Equal(zoneIdentityModel))

				// Construct an instance of the CreateSubnetOptions model
				var subnetPrototype vpcv1.SubnetPrototypeIntf = nil
				createSubnetOptionsModel := vpcService.NewCreateSubnetOptions(subnetPrototype)
				createSubnetOptionsModel.SetSubnetPrototype(subnetPrototypeModel)
				createSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSubnetOptionsModel).ToNot(BeNil())
				Expect(createSubnetOptionsModel.SubnetPrototype).To(Equal(subnetPrototypeModel))
				Expect(createSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateSubnetReservedIPOptions successfully`, func() {
				// Construct an instance of the ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID model
				reservedIPTargetPrototypeModel := new(vpcv1.ReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID)
				Expect(reservedIPTargetPrototypeModel).ToNot(BeNil())
				reservedIPTargetPrototypeModel.ID = core.StringPtr("d7cc5196-9864-48c4-82d8-3f30da41fcc5")
				Expect(reservedIPTargetPrototypeModel.ID).To(Equal(core.StringPtr("d7cc5196-9864-48c4-82d8-3f30da41fcc5")))

				// Construct an instance of the CreateSubnetReservedIPOptions model
				subnetID := "testString"
				createSubnetReservedIPOptionsModel := vpcService.NewCreateSubnetReservedIPOptions(subnetID)
				createSubnetReservedIPOptionsModel.SetSubnetID("testString")
				createSubnetReservedIPOptionsModel.SetAutoDelete(false)
				createSubnetReservedIPOptionsModel.SetName("my-reserved-ip")
				createSubnetReservedIPOptionsModel.SetTarget(reservedIPTargetPrototypeModel)
				createSubnetReservedIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createSubnetReservedIPOptionsModel).ToNot(BeNil())
				Expect(createSubnetReservedIPOptionsModel.SubnetID).To(Equal(core.StringPtr("testString")))
				Expect(createSubnetReservedIPOptionsModel.AutoDelete).To(Equal(core.BoolPtr(false)))
				Expect(createSubnetReservedIPOptionsModel.Name).To(Equal(core.StringPtr("my-reserved-ip")))
				Expect(createSubnetReservedIPOptionsModel.Target).To(Equal(reservedIPTargetPrototypeModel))
				Expect(createSubnetReservedIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVolumeOptions successfully`, func() {
				// Construct an instance of the VolumeProfileIdentityByName model
				volumeProfileIdentityModel := new(vpcv1.VolumeProfileIdentityByName)
				Expect(volumeProfileIdentityModel).ToNot(BeNil())
				volumeProfileIdentityModel.Name = core.StringPtr("general-purpose")
				Expect(volumeProfileIdentityModel.Name).To(Equal(core.StringPtr("general-purpose")))

				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the EncryptionKeyIdentityByCRN model
				encryptionKeyIdentityModel := new(vpcv1.EncryptionKeyIdentityByCRN)
				Expect(encryptionKeyIdentityModel).ToNot(BeNil())
				encryptionKeyIdentityModel.CRN = core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")
				Expect(encryptionKeyIdentityModel.CRN).To(Equal(core.StringPtr("crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179")))

				// Construct an instance of the VolumePrototypeVolumeByCapacity model
				volumePrototypeModel := new(vpcv1.VolumePrototypeVolumeByCapacity)
				Expect(volumePrototypeModel).ToNot(BeNil())
				volumePrototypeModel.Iops = core.Int64Ptr(int64(10000))
				volumePrototypeModel.Name = core.StringPtr("my-volume")
				volumePrototypeModel.Profile = volumeProfileIdentityModel
				volumePrototypeModel.ResourceGroup = resourceGroupIdentityModel
				volumePrototypeModel.Zone = zoneIdentityModel
				volumePrototypeModel.Capacity = core.Int64Ptr(int64(100))
				volumePrototypeModel.EncryptionKey = encryptionKeyIdentityModel
				Expect(volumePrototypeModel.Iops).To(Equal(core.Int64Ptr(int64(10000))))
				Expect(volumePrototypeModel.Name).To(Equal(core.StringPtr("my-volume")))
				Expect(volumePrototypeModel.Profile).To(Equal(volumeProfileIdentityModel))
				Expect(volumePrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(volumePrototypeModel.Zone).To(Equal(zoneIdentityModel))
				Expect(volumePrototypeModel.Capacity).To(Equal(core.Int64Ptr(int64(100))))
				Expect(volumePrototypeModel.EncryptionKey).To(Equal(encryptionKeyIdentityModel))

				// Construct an instance of the CreateVolumeOptions model
				var volumePrototype vpcv1.VolumePrototypeIntf = nil
				createVolumeOptionsModel := vpcService.NewCreateVolumeOptions(volumePrototype)
				createVolumeOptionsModel.SetVolumePrototype(volumePrototypeModel)
				createVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVolumeOptionsModel).ToNot(BeNil())
				Expect(createVolumeOptionsModel.VolumePrototype).To(Equal(volumePrototypeModel))
				Expect(createVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPCAddressPrefixOptions successfully`, func() {
				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the CreateVPCAddressPrefixOptions model
				vpcID := "testString"
				createVPCAddressPrefixOptionsCIDR := "10.0.0.0/24"
				var createVPCAddressPrefixOptionsZone vpcv1.ZoneIdentityIntf = nil
				createVPCAddressPrefixOptionsModel := vpcService.NewCreateVPCAddressPrefixOptions(vpcID, createVPCAddressPrefixOptionsCIDR, createVPCAddressPrefixOptionsZone)
				createVPCAddressPrefixOptionsModel.SetVPCID("testString")
				createVPCAddressPrefixOptionsModel.SetCIDR("10.0.0.0/24")
				createVPCAddressPrefixOptionsModel.SetZone(zoneIdentityModel)
				createVPCAddressPrefixOptionsModel.SetIsDefault(true)
				createVPCAddressPrefixOptionsModel.SetName("my-address-prefix-2")
				createVPCAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPCAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(createVPCAddressPrefixOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(createVPCAddressPrefixOptionsModel.CIDR).To(Equal(core.StringPtr("10.0.0.0/24")))
				Expect(createVPCAddressPrefixOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createVPCAddressPrefixOptionsModel.IsDefault).To(Equal(core.BoolPtr(true)))
				Expect(createVPCAddressPrefixOptionsModel.Name).To(Equal(core.StringPtr("my-address-prefix-2")))
				Expect(createVPCAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPCOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the CreateVPCOptions model
				createVPCOptionsModel := vpcService.NewCreateVPCOptions()
				createVPCOptionsModel.SetAddressPrefixManagement("manual")
				createVPCOptionsModel.SetClassicAccess(false)
				createVPCOptionsModel.SetName("my-vpc")
				createVPCOptionsModel.SetResourceGroup(resourceGroupIdentityModel)
				createVPCOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPCOptionsModel).ToNot(BeNil())
				Expect(createVPCOptionsModel.AddressPrefixManagement).To(Equal(core.StringPtr("manual")))
				Expect(createVPCOptionsModel.ClassicAccess).To(Equal(core.BoolPtr(false)))
				Expect(createVPCOptionsModel.Name).To(Equal(core.StringPtr("my-vpc")))
				Expect(createVPCOptionsModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(createVPCOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPCRouteOptions successfully`, func() {
				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				Expect(routeNextHopPrototypeModel).ToNot(BeNil())
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(routeNextHopPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the CreateVPCRouteOptions model
				vpcID := "testString"
				createVPCRouteOptionsDestination := "192.168.3.0/24"
				var createVPCRouteOptionsZone vpcv1.ZoneIdentityIntf = nil
				createVPCRouteOptionsModel := vpcService.NewCreateVPCRouteOptions(vpcID, createVPCRouteOptionsDestination, createVPCRouteOptionsZone)
				createVPCRouteOptionsModel.SetVPCID("testString")
				createVPCRouteOptionsModel.SetDestination("192.168.3.0/24")
				createVPCRouteOptionsModel.SetZone(zoneIdentityModel)
				createVPCRouteOptionsModel.SetAction("delegate")
				createVPCRouteOptionsModel.SetName("my-route-2")
				createVPCRouteOptionsModel.SetNextHop(routeNextHopPrototypeModel)
				createVPCRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPCRouteOptionsModel).ToNot(BeNil())
				Expect(createVPCRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(createVPCRouteOptionsModel.Destination).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(createVPCRouteOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createVPCRouteOptionsModel.Action).To(Equal(core.StringPtr("delegate")))
				Expect(createVPCRouteOptionsModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(createVPCRouteOptionsModel.NextHop).To(Equal(routeNextHopPrototypeModel))
				Expect(createVPCRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPCRoutingTableOptions successfully`, func() {
				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				Expect(routeNextHopPrototypeModel).ToNot(BeNil())
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(routeNextHopPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the RoutePrototype model
				routePrototypeModel := new(vpcv1.RoutePrototype)
				Expect(routePrototypeModel).ToNot(BeNil())
				routePrototypeModel.Action = core.StringPtr("delegate")
				routePrototypeModel.Destination = core.StringPtr("192.168.3.0/24")
				routePrototypeModel.Name = core.StringPtr("my-route-2")
				routePrototypeModel.NextHop = routeNextHopPrototypeModel
				routePrototypeModel.Zone = zoneIdentityModel
				Expect(routePrototypeModel.Action).To(Equal(core.StringPtr("delegate")))
				Expect(routePrototypeModel.Destination).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(routePrototypeModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(routePrototypeModel.NextHop).To(Equal(routeNextHopPrototypeModel))
				Expect(routePrototypeModel.Zone).To(Equal(zoneIdentityModel))

				// Construct an instance of the CreateVPCRoutingTableOptions model
				vpcID := "testString"
				createVPCRoutingTableOptionsModel := vpcService.NewCreateVPCRoutingTableOptions(vpcID)
				createVPCRoutingTableOptionsModel.SetVPCID("testString")
				createVPCRoutingTableOptionsModel.SetName("my-routing-table-2")
				createVPCRoutingTableOptionsModel.SetRouteDirectLinkIngress(true)
				createVPCRoutingTableOptionsModel.SetRouteTransitGatewayIngress(true)
				createVPCRoutingTableOptionsModel.SetRouteVPCZoneIngress(true)
				createVPCRoutingTableOptionsModel.SetRoutes([]vpcv1.RoutePrototype{*routePrototypeModel})
				createVPCRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPCRoutingTableOptionsModel).ToNot(BeNil())
				Expect(createVPCRoutingTableOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(createVPCRoutingTableOptionsModel.Name).To(Equal(core.StringPtr("my-routing-table-2")))
				Expect(createVPCRoutingTableOptionsModel.RouteDirectLinkIngress).To(Equal(core.BoolPtr(true)))
				Expect(createVPCRoutingTableOptionsModel.RouteTransitGatewayIngress).To(Equal(core.BoolPtr(true)))
				Expect(createVPCRoutingTableOptionsModel.RouteVPCZoneIngress).To(Equal(core.BoolPtr(true)))
				Expect(createVPCRoutingTableOptionsModel.Routes).To(Equal([]vpcv1.RoutePrototype{*routePrototypeModel}))
				Expect(createVPCRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPCRoutingTableRouteOptions successfully`, func() {
				// Construct an instance of the ZoneIdentityByName model
				zoneIdentityModel := new(vpcv1.ZoneIdentityByName)
				Expect(zoneIdentityModel).ToNot(BeNil())
				zoneIdentityModel.Name = core.StringPtr("us-south-1")
				Expect(zoneIdentityModel.Name).To(Equal(core.StringPtr("us-south-1")))

				// Construct an instance of the RouteNextHopPrototypeRouteNextHopIP model
				routeNextHopPrototypeModel := new(vpcv1.RouteNextHopPrototypeRouteNextHopIP)
				Expect(routeNextHopPrototypeModel).ToNot(BeNil())
				routeNextHopPrototypeModel.Address = core.StringPtr("192.168.3.4")
				Expect(routeNextHopPrototypeModel.Address).To(Equal(core.StringPtr("192.168.3.4")))

				// Construct an instance of the CreateVPCRoutingTableRouteOptions model
				vpcID := "testString"
				routingTableID := "testString"
				createVPCRoutingTableRouteOptionsDestination := "192.168.3.0/24"
				var createVPCRoutingTableRouteOptionsZone vpcv1.ZoneIdentityIntf = nil
				createVPCRoutingTableRouteOptionsModel := vpcService.NewCreateVPCRoutingTableRouteOptions(vpcID, routingTableID, createVPCRoutingTableRouteOptionsDestination, createVPCRoutingTableRouteOptionsZone)
				createVPCRoutingTableRouteOptionsModel.SetVPCID("testString")
				createVPCRoutingTableRouteOptionsModel.SetRoutingTableID("testString")
				createVPCRoutingTableRouteOptionsModel.SetDestination("192.168.3.0/24")
				createVPCRoutingTableRouteOptionsModel.SetZone(zoneIdentityModel)
				createVPCRoutingTableRouteOptionsModel.SetAction("delegate")
				createVPCRoutingTableRouteOptionsModel.SetName("my-route-2")
				createVPCRoutingTableRouteOptionsModel.SetNextHop(routeNextHopPrototypeModel)
				createVPCRoutingTableRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPCRoutingTableRouteOptionsModel).ToNot(BeNil())
				Expect(createVPCRoutingTableRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(createVPCRoutingTableRouteOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(createVPCRoutingTableRouteOptionsModel.Destination).To(Equal(core.StringPtr("192.168.3.0/24")))
				Expect(createVPCRoutingTableRouteOptionsModel.Zone).To(Equal(zoneIdentityModel))
				Expect(createVPCRoutingTableRouteOptionsModel.Action).To(Equal(core.StringPtr("delegate")))
				Expect(createVPCRoutingTableRouteOptionsModel.Name).To(Equal(core.StringPtr("my-route-2")))
				Expect(createVPCRoutingTableRouteOptionsModel.NextHop).To(Equal(routeNextHopPrototypeModel))
				Expect(createVPCRoutingTableRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPNGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the VPNGatewayConnectionDpdPrototype model
				vpnGatewayConnectionDpdPrototypeModel := new(vpcv1.VPNGatewayConnectionDpdPrototype)
				Expect(vpnGatewayConnectionDpdPrototypeModel).ToNot(BeNil())
				vpnGatewayConnectionDpdPrototypeModel.Action = core.StringPtr("restart")
				vpnGatewayConnectionDpdPrototypeModel.Interval = core.Int64Ptr(int64(30))
				vpnGatewayConnectionDpdPrototypeModel.Timeout = core.Int64Ptr(int64(120))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Action).To(Equal(core.StringPtr("restart")))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Interval).To(Equal(core.Int64Ptr(int64(30))))
				Expect(vpnGatewayConnectionDpdPrototypeModel.Timeout).To(Equal(core.Int64Ptr(int64(120))))

				// Construct an instance of the IkePolicyIdentityByID model
				ikePolicyIdentityModel := new(vpcv1.IkePolicyIdentityByID)
				Expect(ikePolicyIdentityModel).ToNot(BeNil())
				ikePolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(ikePolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the IPsecPolicyIdentityByID model
				iPsecPolicyIdentityModel := new(vpcv1.IPsecPolicyIdentityByID)
				Expect(iPsecPolicyIdentityModel).ToNot(BeNil())
				iPsecPolicyIdentityModel.ID = core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")
				Expect(iPsecPolicyIdentityModel.ID).To(Equal(core.StringPtr("ddf51bec-3424-11e8-b467-0ed5f89f718b")))

				// Construct an instance of the VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype model
				vpnGatewayConnectionPrototypeModel := new(vpcv1.VPNGatewayConnectionPrototypeVPNGatewayConnectionStaticRouteModePrototype)
				Expect(vpnGatewayConnectionPrototypeModel).ToNot(BeNil())
				vpnGatewayConnectionPrototypeModel.AdminStateUp = core.BoolPtr(true)
				vpnGatewayConnectionPrototypeModel.DeadPeerDetection = vpnGatewayConnectionDpdPrototypeModel
				vpnGatewayConnectionPrototypeModel.IkePolicy = ikePolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.IpsecPolicy = iPsecPolicyIdentityModel
				vpnGatewayConnectionPrototypeModel.Name = core.StringPtr("my-vpn-connection")
				vpnGatewayConnectionPrototypeModel.PeerAddress = core.StringPtr("169.21.50.5")
				vpnGatewayConnectionPrototypeModel.Psk = core.StringPtr("lkj14b1oi0alcniejkso")
				vpnGatewayConnectionPrototypeModel.RoutingProtocol = core.StringPtr("none")
				Expect(vpnGatewayConnectionPrototypeModel.AdminStateUp).To(Equal(core.BoolPtr(true)))
				Expect(vpnGatewayConnectionPrototypeModel.DeadPeerDetection).To(Equal(vpnGatewayConnectionDpdPrototypeModel))
				Expect(vpnGatewayConnectionPrototypeModel.IkePolicy).To(Equal(ikePolicyIdentityModel))
				Expect(vpnGatewayConnectionPrototypeModel.IpsecPolicy).To(Equal(iPsecPolicyIdentityModel))
				Expect(vpnGatewayConnectionPrototypeModel.Name).To(Equal(core.StringPtr("my-vpn-connection")))
				Expect(vpnGatewayConnectionPrototypeModel.PeerAddress).To(Equal(core.StringPtr("169.21.50.5")))
				Expect(vpnGatewayConnectionPrototypeModel.Psk).To(Equal(core.StringPtr("lkj14b1oi0alcniejkso")))
				Expect(vpnGatewayConnectionPrototypeModel.RoutingProtocol).To(Equal(core.StringPtr("none")))

				// Construct an instance of the CreateVPNGatewayConnectionOptions model
				vpnGatewayID := "testString"
				var vpnGatewayConnectionPrototype vpcv1.VPNGatewayConnectionPrototypeIntf = nil
				createVPNGatewayConnectionOptionsModel := vpcService.NewCreateVPNGatewayConnectionOptions(vpnGatewayID, vpnGatewayConnectionPrototype)
				createVPNGatewayConnectionOptionsModel.SetVPNGatewayID("testString")
				createVPNGatewayConnectionOptionsModel.SetVPNGatewayConnectionPrototype(vpnGatewayConnectionPrototypeModel)
				createVPNGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPNGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(createVPNGatewayConnectionOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(createVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPrototype).To(Equal(vpnGatewayConnectionPrototypeModel))
				Expect(createVPNGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewCreateVPNGatewayOptions successfully`, func() {
				// Construct an instance of the ResourceGroupIdentityByID model
				resourceGroupIdentityModel := new(vpcv1.ResourceGroupIdentityByID)
				Expect(resourceGroupIdentityModel).ToNot(BeNil())
				resourceGroupIdentityModel.ID = core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")
				Expect(resourceGroupIdentityModel.ID).To(Equal(core.StringPtr("fee82deba12e4c0fb69c3b09d1f12345")))

				// Construct an instance of the SubnetIdentityByID model
				subnetIdentityModel := new(vpcv1.SubnetIdentityByID)
				Expect(subnetIdentityModel).ToNot(BeNil())
				subnetIdentityModel.ID = core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")
				Expect(subnetIdentityModel.ID).To(Equal(core.StringPtr("7ec86020-1c6e-4889-b3f0-a15f2e50f87e")))

				// Construct an instance of the VPNGatewayPrototypeVPNGatewayRouteModePrototype model
				vpnGatewayPrototypeModel := new(vpcv1.VPNGatewayPrototypeVPNGatewayRouteModePrototype)
				Expect(vpnGatewayPrototypeModel).ToNot(BeNil())
				vpnGatewayPrototypeModel.Name = core.StringPtr("my-vpn-gateway")
				vpnGatewayPrototypeModel.ResourceGroup = resourceGroupIdentityModel
				vpnGatewayPrototypeModel.Subnet = subnetIdentityModel
				vpnGatewayPrototypeModel.Mode = core.StringPtr("route")
				Expect(vpnGatewayPrototypeModel.Name).To(Equal(core.StringPtr("my-vpn-gateway")))
				Expect(vpnGatewayPrototypeModel.ResourceGroup).To(Equal(resourceGroupIdentityModel))
				Expect(vpnGatewayPrototypeModel.Subnet).To(Equal(subnetIdentityModel))
				Expect(vpnGatewayPrototypeModel.Mode).To(Equal(core.StringPtr("route")))

				// Construct an instance of the CreateVPNGatewayOptions model
				var vpnGatewayPrototype vpcv1.VPNGatewayPrototypeIntf = nil
				createVPNGatewayOptionsModel := vpcService.NewCreateVPNGatewayOptions(vpnGatewayPrototype)
				createVPNGatewayOptionsModel.SetVPNGatewayPrototype(vpnGatewayPrototypeModel)
				createVPNGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(createVPNGatewayOptionsModel).ToNot(BeNil())
				Expect(createVPNGatewayOptionsModel.VPNGatewayPrototype).To(Equal(vpnGatewayPrototypeModel))
				Expect(createVPNGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteDedicatedHostGroupOptions successfully`, func() {
				// Construct an instance of the DeleteDedicatedHostGroupOptions model
				id := "testString"
				deleteDedicatedHostGroupOptionsModel := vpcService.NewDeleteDedicatedHostGroupOptions(id)
				deleteDedicatedHostGroupOptionsModel.SetID("testString")
				deleteDedicatedHostGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDedicatedHostGroupOptionsModel).ToNot(BeNil())
				Expect(deleteDedicatedHostGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteDedicatedHostGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteDedicatedHostOptions successfully`, func() {
				// Construct an instance of the DeleteDedicatedHostOptions model
				id := "testString"
				deleteDedicatedHostOptionsModel := vpcService.NewDeleteDedicatedHostOptions(id)
				deleteDedicatedHostOptionsModel.SetID("testString")
				deleteDedicatedHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteDedicatedHostOptionsModel).ToNot(BeNil())
				Expect(deleteDedicatedHostOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteDedicatedHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteEndpointGatewayOptions successfully`, func() {
				// Construct an instance of the DeleteEndpointGatewayOptions model
				id := "testString"
				deleteEndpointGatewayOptionsModel := vpcService.NewDeleteEndpointGatewayOptions(id)
				deleteEndpointGatewayOptionsModel.SetID("testString")
				deleteEndpointGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteEndpointGatewayOptionsModel).ToNot(BeNil())
				Expect(deleteEndpointGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteEndpointGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFloatingIPOptions successfully`, func() {
				// Construct an instance of the DeleteFloatingIPOptions model
				id := "testString"
				deleteFloatingIPOptionsModel := vpcService.NewDeleteFloatingIPOptions(id)
				deleteFloatingIPOptionsModel.SetID("testString")
				deleteFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFloatingIPOptionsModel).ToNot(BeNil())
				Expect(deleteFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteFlowLogCollectorOptions successfully`, func() {
				// Construct an instance of the DeleteFlowLogCollectorOptions model
				id := "testString"
				deleteFlowLogCollectorOptionsModel := vpcService.NewDeleteFlowLogCollectorOptions(id)
				deleteFlowLogCollectorOptionsModel.SetID("testString")
				deleteFlowLogCollectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteFlowLogCollectorOptionsModel).ToNot(BeNil())
				Expect(deleteFlowLogCollectorOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteFlowLogCollectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteIkePolicyOptions successfully`, func() {
				// Construct an instance of the DeleteIkePolicyOptions model
				id := "testString"
				deleteIkePolicyOptionsModel := vpcService.NewDeleteIkePolicyOptions(id)
				deleteIkePolicyOptionsModel.SetID("testString")
				deleteIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteIkePolicyOptionsModel).ToNot(BeNil())
				Expect(deleteIkePolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteImageOptions successfully`, func() {
				// Construct an instance of the DeleteImageOptions model
				id := "testString"
				deleteImageOptionsModel := vpcService.NewDeleteImageOptions(id)
				deleteImageOptionsModel.SetID("testString")
				deleteImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteImageOptionsModel).ToNot(BeNil())
				Expect(deleteImageOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupLoadBalancerOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceGroupLoadBalancerOptions model
				instanceGroupID := "testString"
				deleteInstanceGroupLoadBalancerOptionsModel := vpcService.NewDeleteInstanceGroupLoadBalancerOptions(instanceGroupID)
				deleteInstanceGroupLoadBalancerOptionsModel.SetInstanceGroupID("testString")
				deleteInstanceGroupLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupLoadBalancerOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupManagerActionOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceGroupManagerActionOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				id := "testString"
				deleteInstanceGroupManagerActionOptionsModel := vpcService.NewDeleteInstanceGroupManagerActionOptions(instanceGroupID, instanceGroupManagerID, id)
				deleteInstanceGroupManagerActionOptionsModel.SetInstanceGroupID("testString")
				deleteInstanceGroupManagerActionOptionsModel.SetInstanceGroupManagerID("testString")
				deleteInstanceGroupManagerActionOptionsModel.SetID("testString")
				deleteInstanceGroupManagerActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupManagerActionOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupManagerActionOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerActionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupManagerOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceGroupManagerOptions model
				instanceGroupID := "testString"
				id := "testString"
				deleteInstanceGroupManagerOptionsModel := vpcService.NewDeleteInstanceGroupManagerOptions(instanceGroupID, id)
				deleteInstanceGroupManagerOptionsModel.SetInstanceGroupID("testString")
				deleteInstanceGroupManagerOptionsModel.SetID("testString")
				deleteInstanceGroupManagerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupManagerOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupManagerOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupManagerPolicyOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceGroupManagerPolicyOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				id := "testString"
				deleteInstanceGroupManagerPolicyOptionsModel := vpcService.NewDeleteInstanceGroupManagerPolicyOptions(instanceGroupID, instanceGroupManagerID, id)
				deleteInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupID("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerID("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.SetID("testString")
				deleteInstanceGroupManagerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupManagerPolicyOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupManagerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupMembershipOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceGroupMembershipOptions model
				instanceGroupID := "testString"
				id := "testString"
				deleteInstanceGroupMembershipOptionsModel := vpcService.NewDeleteInstanceGroupMembershipOptions(instanceGroupID, id)
				deleteInstanceGroupMembershipOptionsModel.SetInstanceGroupID("testString")
				deleteInstanceGroupMembershipOptionsModel.SetID("testString")
				deleteInstanceGroupMembershipOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupMembershipOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupMembershipOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupMembershipOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupMembershipOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupMembershipsOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceGroupMembershipsOptions model
				instanceGroupID := "testString"
				deleteInstanceGroupMembershipsOptionsModel := vpcService.NewDeleteInstanceGroupMembershipsOptions(instanceGroupID)
				deleteInstanceGroupMembershipsOptionsModel.SetInstanceGroupID("testString")
				deleteInstanceGroupMembershipsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupMembershipsOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupMembershipsOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupMembershipsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceGroupOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceGroupOptions model
				id := "testString"
				deleteInstanceGroupOptionsModel := vpcService.NewDeleteInstanceGroupOptions(id)
				deleteInstanceGroupOptionsModel.SetID("testString")
				deleteInstanceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceGroupOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceNetworkInterfaceOptions model
				instanceID := "testString"
				id := "testString"
				deleteInstanceNetworkInterfaceOptionsModel := vpcService.NewDeleteInstanceNetworkInterfaceOptions(instanceID, id)
				deleteInstanceNetworkInterfaceOptionsModel.SetInstanceID("testString")
				deleteInstanceNetworkInterfaceOptionsModel.SetID("testString")
				deleteInstanceNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceNetworkInterfaceOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceOptions model
				id := "testString"
				deleteInstanceOptionsModel := vpcService.NewDeleteInstanceOptions(id)
				deleteInstanceOptionsModel.SetID("testString")
				deleteInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceTemplateOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceTemplateOptions model
				id := "testString"
				deleteInstanceTemplateOptionsModel := vpcService.NewDeleteInstanceTemplateOptions(id)
				deleteInstanceTemplateOptionsModel.SetID("testString")
				deleteInstanceTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceTemplateOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceTemplateOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteInstanceVolumeAttachmentOptions successfully`, func() {
				// Construct an instance of the DeleteInstanceVolumeAttachmentOptions model
				instanceID := "testString"
				id := "testString"
				deleteInstanceVolumeAttachmentOptionsModel := vpcService.NewDeleteInstanceVolumeAttachmentOptions(instanceID, id)
				deleteInstanceVolumeAttachmentOptionsModel.SetInstanceID("testString")
				deleteInstanceVolumeAttachmentOptionsModel.SetID("testString")
				deleteInstanceVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteInstanceVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(deleteInstanceVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceVolumeAttachmentOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteInstanceVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteIpsecPolicyOptions successfully`, func() {
				// Construct an instance of the DeleteIpsecPolicyOptions model
				id := "testString"
				deleteIpsecPolicyOptionsModel := vpcService.NewDeleteIpsecPolicyOptions(id)
				deleteIpsecPolicyOptionsModel.SetID("testString")
				deleteIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(deleteIpsecPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteKeyOptions successfully`, func() {
				// Construct an instance of the DeleteKeyOptions model
				id := "testString"
				deleteKeyOptionsModel := vpcService.NewDeleteKeyOptions(id)
				deleteKeyOptionsModel.SetID("testString")
				deleteKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteKeyOptionsModel).ToNot(BeNil())
				Expect(deleteKeyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerListenerOptions model
				loadBalancerID := "testString"
				id := "testString"
				deleteLoadBalancerListenerOptionsModel := vpcService.NewDeleteLoadBalancerListenerOptions(loadBalancerID, id)
				deleteLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerListenerOptionsModel.SetID("testString")
				deleteLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerListenerPolicyOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				id := "testString"
				deleteLoadBalancerListenerPolicyOptionsModel := vpcService.NewDeleteLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, id)
				deleteLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.SetID("testString")
				deleteLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerListenerPolicyRuleOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				id := "testString"
				deleteLoadBalancerListenerPolicyRuleOptionsModel := vpcService.NewDeleteLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, id)
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetID("testString")
				deleteLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerOptions model
				id := "testString"
				deleteLoadBalancerOptionsModel := vpcService.NewDeleteLoadBalancerOptions(id)
				deleteLoadBalancerOptionsModel.SetID("testString")
				deleteLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerPoolMemberOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				id := "testString"
				deleteLoadBalancerPoolMemberOptionsModel := vpcService.NewDeleteLoadBalancerPoolMemberOptions(loadBalancerID, poolID, id)
				deleteLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				deleteLoadBalancerPoolMemberOptionsModel.SetID("testString")
				deleteLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolMemberOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the DeleteLoadBalancerPoolOptions model
				loadBalancerID := "testString"
				id := "testString"
				deleteLoadBalancerPoolOptionsModel := vpcService.NewDeleteLoadBalancerPoolOptions(loadBalancerID, id)
				deleteLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				deleteLoadBalancerPoolOptionsModel.SetID("testString")
				deleteLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(deleteLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteNetworkACLOptions successfully`, func() {
				// Construct an instance of the DeleteNetworkACLOptions model
				id := "testString"
				deleteNetworkACLOptionsModel := vpcService.NewDeleteNetworkACLOptions(id)
				deleteNetworkACLOptionsModel.SetID("testString")
				deleteNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteNetworkACLOptionsModel).ToNot(BeNil())
				Expect(deleteNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteNetworkACLRuleOptions successfully`, func() {
				// Construct an instance of the DeleteNetworkACLRuleOptions model
				networkACLID := "testString"
				id := "testString"
				deleteNetworkACLRuleOptionsModel := vpcService.NewDeleteNetworkACLRuleOptions(networkACLID, id)
				deleteNetworkACLRuleOptionsModel.SetNetworkACLID("testString")
				deleteNetworkACLRuleOptionsModel.SetID("testString")
				deleteNetworkACLRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteNetworkACLRuleOptionsModel).ToNot(BeNil())
				Expect(deleteNetworkACLRuleOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkACLRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteNetworkACLRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeletePublicGatewayOptions successfully`, func() {
				// Construct an instance of the DeletePublicGatewayOptions model
				id := "testString"
				deletePublicGatewayOptionsModel := vpcService.NewDeletePublicGatewayOptions(id)
				deletePublicGatewayOptionsModel.SetID("testString")
				deletePublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deletePublicGatewayOptionsModel).ToNot(BeNil())
				Expect(deletePublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deletePublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSecurityGroupOptions successfully`, func() {
				// Construct an instance of the DeleteSecurityGroupOptions model
				id := "testString"
				deleteSecurityGroupOptionsModel := vpcService.NewDeleteSecurityGroupOptions(id)
				deleteSecurityGroupOptionsModel.SetID("testString")
				deleteSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(deleteSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the DeleteSecurityGroupRuleOptions model
				securityGroupID := "testString"
				id := "testString"
				deleteSecurityGroupRuleOptionsModel := vpcService.NewDeleteSecurityGroupRuleOptions(securityGroupID, id)
				deleteSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				deleteSecurityGroupRuleOptionsModel.SetID("testString")
				deleteSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(deleteSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSecurityGroupTargetBindingOptions successfully`, func() {
				// Construct an instance of the DeleteSecurityGroupTargetBindingOptions model
				securityGroupID := "testString"
				id := "testString"
				deleteSecurityGroupTargetBindingOptionsModel := vpcService.NewDeleteSecurityGroupTargetBindingOptions(securityGroupID, id)
				deleteSecurityGroupTargetBindingOptionsModel.SetSecurityGroupID("testString")
				deleteSecurityGroupTargetBindingOptionsModel.SetID("testString")
				deleteSecurityGroupTargetBindingOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSecurityGroupTargetBindingOptionsModel).ToNot(BeNil())
				Expect(deleteSecurityGroupTargetBindingOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupTargetBindingOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSecurityGroupTargetBindingOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSubnetOptions successfully`, func() {
				// Construct an instance of the DeleteSubnetOptions model
				id := "testString"
				deleteSubnetOptionsModel := vpcService.NewDeleteSubnetOptions(id)
				deleteSubnetOptionsModel.SetID("testString")
				deleteSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSubnetOptionsModel).ToNot(BeNil())
				Expect(deleteSubnetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteSubnetReservedIPOptions successfully`, func() {
				// Construct an instance of the DeleteSubnetReservedIPOptions model
				subnetID := "testString"
				id := "testString"
				deleteSubnetReservedIPOptionsModel := vpcService.NewDeleteSubnetReservedIPOptions(subnetID, id)
				deleteSubnetReservedIPOptionsModel.SetSubnetID("testString")
				deleteSubnetReservedIPOptionsModel.SetID("testString")
				deleteSubnetReservedIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteSubnetReservedIPOptionsModel).ToNot(BeNil())
				Expect(deleteSubnetReservedIPOptionsModel.SubnetID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSubnetReservedIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteSubnetReservedIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVolumeOptions successfully`, func() {
				// Construct an instance of the DeleteVolumeOptions model
				id := "testString"
				deleteVolumeOptionsModel := vpcService.NewDeleteVolumeOptions(id)
				deleteVolumeOptionsModel.SetID("testString")
				deleteVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVolumeOptionsModel).ToNot(BeNil())
				Expect(deleteVolumeOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPCAddressPrefixOptions successfully`, func() {
				// Construct an instance of the DeleteVPCAddressPrefixOptions model
				vpcID := "testString"
				id := "testString"
				deleteVPCAddressPrefixOptionsModel := vpcService.NewDeleteVPCAddressPrefixOptions(vpcID, id)
				deleteVPCAddressPrefixOptionsModel.SetVPCID("testString")
				deleteVPCAddressPrefixOptionsModel.SetID("testString")
				deleteVPCAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPCAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(deleteVPCAddressPrefixOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCAddressPrefixOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPCOptions successfully`, func() {
				// Construct an instance of the DeleteVPCOptions model
				id := "testString"
				deleteVPCOptionsModel := vpcService.NewDeleteVPCOptions(id)
				deleteVPCOptionsModel.SetID("testString")
				deleteVPCOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPCOptionsModel).ToNot(BeNil())
				Expect(deleteVPCOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPCRouteOptions successfully`, func() {
				// Construct an instance of the DeleteVPCRouteOptions model
				vpcID := "testString"
				id := "testString"
				deleteVPCRouteOptionsModel := vpcService.NewDeleteVPCRouteOptions(vpcID, id)
				deleteVPCRouteOptionsModel.SetVPCID("testString")
				deleteVPCRouteOptionsModel.SetID("testString")
				deleteVPCRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPCRouteOptionsModel).ToNot(BeNil())
				Expect(deleteVPCRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPCRoutingTableOptions successfully`, func() {
				// Construct an instance of the DeleteVPCRoutingTableOptions model
				vpcID := "testString"
				id := "testString"
				deleteVPCRoutingTableOptionsModel := vpcService.NewDeleteVPCRoutingTableOptions(vpcID, id)
				deleteVPCRoutingTableOptionsModel.SetVPCID("testString")
				deleteVPCRoutingTableOptionsModel.SetID("testString")
				deleteVPCRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPCRoutingTableOptionsModel).ToNot(BeNil())
				Expect(deleteVPCRoutingTableOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPCRoutingTableRouteOptions successfully`, func() {
				// Construct an instance of the DeleteVPCRoutingTableRouteOptions model
				vpcID := "testString"
				routingTableID := "testString"
				id := "testString"
				deleteVPCRoutingTableRouteOptionsModel := vpcService.NewDeleteVPCRoutingTableRouteOptions(vpcID, routingTableID, id)
				deleteVPCRoutingTableRouteOptionsModel.SetVPCID("testString")
				deleteVPCRoutingTableRouteOptionsModel.SetRoutingTableID("testString")
				deleteVPCRoutingTableRouteOptionsModel.SetID("testString")
				deleteVPCRoutingTableRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPCRoutingTableRouteOptionsModel).ToNot(BeNil())
				Expect(deleteVPCRoutingTableRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCRoutingTableRouteOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCRoutingTableRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPCRoutingTableRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPNGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the DeleteVPNGatewayConnectionOptions model
				vpnGatewayID := "testString"
				id := "testString"
				deleteVPNGatewayConnectionOptionsModel := vpcService.NewDeleteVPNGatewayConnectionOptions(vpnGatewayID, id)
				deleteVPNGatewayConnectionOptionsModel.SetVPNGatewayID("testString")
				deleteVPNGatewayConnectionOptionsModel.SetID("testString")
				deleteVPNGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPNGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(deleteVPNGatewayConnectionOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPNGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPNGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewDeleteVPNGatewayOptions successfully`, func() {
				// Construct an instance of the DeleteVPNGatewayOptions model
				id := "testString"
				deleteVPNGatewayOptionsModel := vpcService.NewDeleteVPNGatewayOptions(id)
				deleteVPNGatewayOptionsModel.SetID("testString")
				deleteVPNGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(deleteVPNGatewayOptionsModel).ToNot(BeNil())
				Expect(deleteVPNGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(deleteVPNGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDedicatedHostDiskOptions successfully`, func() {
				// Construct an instance of the GetDedicatedHostDiskOptions model
				dedicatedHostID := "testString"
				id := "testString"
				getDedicatedHostDiskOptionsModel := vpcService.NewGetDedicatedHostDiskOptions(dedicatedHostID, id)
				getDedicatedHostDiskOptionsModel.SetDedicatedHostID("testString")
				getDedicatedHostDiskOptionsModel.SetID("testString")
				getDedicatedHostDiskOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDedicatedHostDiskOptionsModel).ToNot(BeNil())
				Expect(getDedicatedHostDiskOptionsModel.DedicatedHostID).To(Equal(core.StringPtr("testString")))
				Expect(getDedicatedHostDiskOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getDedicatedHostDiskOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDedicatedHostGroupOptions successfully`, func() {
				// Construct an instance of the GetDedicatedHostGroupOptions model
				id := "testString"
				getDedicatedHostGroupOptionsModel := vpcService.NewGetDedicatedHostGroupOptions(id)
				getDedicatedHostGroupOptionsModel.SetID("testString")
				getDedicatedHostGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDedicatedHostGroupOptionsModel).ToNot(BeNil())
				Expect(getDedicatedHostGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getDedicatedHostGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDedicatedHostOptions successfully`, func() {
				// Construct an instance of the GetDedicatedHostOptions model
				id := "testString"
				getDedicatedHostOptionsModel := vpcService.NewGetDedicatedHostOptions(id)
				getDedicatedHostOptionsModel.SetID("testString")
				getDedicatedHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDedicatedHostOptionsModel).ToNot(BeNil())
				Expect(getDedicatedHostOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getDedicatedHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetDedicatedHostProfileOptions successfully`, func() {
				// Construct an instance of the GetDedicatedHostProfileOptions model
				name := "testString"
				getDedicatedHostProfileOptionsModel := vpcService.NewGetDedicatedHostProfileOptions(name)
				getDedicatedHostProfileOptionsModel.SetName("testString")
				getDedicatedHostProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getDedicatedHostProfileOptionsModel).ToNot(BeNil())
				Expect(getDedicatedHostProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getDedicatedHostProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetEndpointGatewayIPOptions successfully`, func() {
				// Construct an instance of the GetEndpointGatewayIPOptions model
				endpointGatewayID := "testString"
				id := "testString"
				getEndpointGatewayIPOptionsModel := vpcService.NewGetEndpointGatewayIPOptions(endpointGatewayID, id)
				getEndpointGatewayIPOptionsModel.SetEndpointGatewayID("testString")
				getEndpointGatewayIPOptionsModel.SetID("testString")
				getEndpointGatewayIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getEndpointGatewayIPOptionsModel).ToNot(BeNil())
				Expect(getEndpointGatewayIPOptionsModel.EndpointGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getEndpointGatewayIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getEndpointGatewayIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetEndpointGatewayOptions successfully`, func() {
				// Construct an instance of the GetEndpointGatewayOptions model
				id := "testString"
				getEndpointGatewayOptionsModel := vpcService.NewGetEndpointGatewayOptions(id)
				getEndpointGatewayOptionsModel.SetID("testString")
				getEndpointGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getEndpointGatewayOptionsModel).ToNot(BeNil())
				Expect(getEndpointGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getEndpointGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFloatingIPOptions successfully`, func() {
				// Construct an instance of the GetFloatingIPOptions model
				id := "testString"
				getFloatingIPOptionsModel := vpcService.NewGetFloatingIPOptions(id)
				getFloatingIPOptionsModel.SetID("testString")
				getFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFloatingIPOptionsModel).ToNot(BeNil())
				Expect(getFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetFlowLogCollectorOptions successfully`, func() {
				// Construct an instance of the GetFlowLogCollectorOptions model
				id := "testString"
				getFlowLogCollectorOptionsModel := vpcService.NewGetFlowLogCollectorOptions(id)
				getFlowLogCollectorOptionsModel.SetID("testString")
				getFlowLogCollectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getFlowLogCollectorOptionsModel).ToNot(BeNil())
				Expect(getFlowLogCollectorOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getFlowLogCollectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetIkePolicyOptions successfully`, func() {
				// Construct an instance of the GetIkePolicyOptions model
				id := "testString"
				getIkePolicyOptionsModel := vpcService.NewGetIkePolicyOptions(id)
				getIkePolicyOptionsModel.SetID("testString")
				getIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getIkePolicyOptionsModel).ToNot(BeNil())
				Expect(getIkePolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetImageOptions successfully`, func() {
				// Construct an instance of the GetImageOptions model
				id := "testString"
				getImageOptionsModel := vpcService.NewGetImageOptions(id)
				getImageOptionsModel.SetID("testString")
				getImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getImageOptionsModel).ToNot(BeNil())
				Expect(getImageOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceDiskOptions successfully`, func() {
				// Construct an instance of the GetInstanceDiskOptions model
				instanceID := "testString"
				id := "testString"
				getInstanceDiskOptionsModel := vpcService.NewGetInstanceDiskOptions(instanceID, id)
				getInstanceDiskOptionsModel.SetInstanceID("testString")
				getInstanceDiskOptionsModel.SetID("testString")
				getInstanceDiskOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceDiskOptionsModel).ToNot(BeNil())
				Expect(getInstanceDiskOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceDiskOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceDiskOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceGroupManagerActionOptions successfully`, func() {
				// Construct an instance of the GetInstanceGroupManagerActionOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				id := "testString"
				getInstanceGroupManagerActionOptionsModel := vpcService.NewGetInstanceGroupManagerActionOptions(instanceGroupID, instanceGroupManagerID, id)
				getInstanceGroupManagerActionOptionsModel.SetInstanceGroupID("testString")
				getInstanceGroupManagerActionOptionsModel.SetInstanceGroupManagerID("testString")
				getInstanceGroupManagerActionOptionsModel.SetID("testString")
				getInstanceGroupManagerActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceGroupManagerActionOptionsModel).ToNot(BeNil())
				Expect(getInstanceGroupManagerActionOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerActionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceGroupManagerOptions successfully`, func() {
				// Construct an instance of the GetInstanceGroupManagerOptions model
				instanceGroupID := "testString"
				id := "testString"
				getInstanceGroupManagerOptionsModel := vpcService.NewGetInstanceGroupManagerOptions(instanceGroupID, id)
				getInstanceGroupManagerOptionsModel.SetInstanceGroupID("testString")
				getInstanceGroupManagerOptionsModel.SetID("testString")
				getInstanceGroupManagerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceGroupManagerOptionsModel).ToNot(BeNil())
				Expect(getInstanceGroupManagerOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceGroupManagerPolicyOptions successfully`, func() {
				// Construct an instance of the GetInstanceGroupManagerPolicyOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				id := "testString"
				getInstanceGroupManagerPolicyOptionsModel := vpcService.NewGetInstanceGroupManagerPolicyOptions(instanceGroupID, instanceGroupManagerID, id)
				getInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupID("testString")
				getInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerID("testString")
				getInstanceGroupManagerPolicyOptionsModel.SetID("testString")
				getInstanceGroupManagerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceGroupManagerPolicyOptionsModel).ToNot(BeNil())
				Expect(getInstanceGroupManagerPolicyOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupManagerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceGroupMembershipOptions successfully`, func() {
				// Construct an instance of the GetInstanceGroupMembershipOptions model
				instanceGroupID := "testString"
				id := "testString"
				getInstanceGroupMembershipOptionsModel := vpcService.NewGetInstanceGroupMembershipOptions(instanceGroupID, id)
				getInstanceGroupMembershipOptionsModel.SetInstanceGroupID("testString")
				getInstanceGroupMembershipOptionsModel.SetID("testString")
				getInstanceGroupMembershipOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceGroupMembershipOptionsModel).ToNot(BeNil())
				Expect(getInstanceGroupMembershipOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupMembershipOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupMembershipOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceGroupOptions successfully`, func() {
				// Construct an instance of the GetInstanceGroupOptions model
				id := "testString"
				getInstanceGroupOptionsModel := vpcService.NewGetInstanceGroupOptions(id)
				getInstanceGroupOptionsModel.SetID("testString")
				getInstanceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceGroupOptionsModel).ToNot(BeNil())
				Expect(getInstanceGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceInitializationOptions successfully`, func() {
				// Construct an instance of the GetInstanceInitializationOptions model
				id := "testString"
				getInstanceInitializationOptionsModel := vpcService.NewGetInstanceInitializationOptions(id)
				getInstanceInitializationOptionsModel.SetID("testString")
				getInstanceInitializationOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceInitializationOptionsModel).ToNot(BeNil())
				Expect(getInstanceInitializationOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceInitializationOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceNetworkInterfaceFloatingIPOptions successfully`, func() {
				// Construct an instance of the GetInstanceNetworkInterfaceFloatingIPOptions model
				instanceID := "testString"
				networkInterfaceID := "testString"
				id := "testString"
				getInstanceNetworkInterfaceFloatingIPOptionsModel := vpcService.NewGetInstanceNetworkInterfaceFloatingIPOptions(instanceID, networkInterfaceID, id)
				getInstanceNetworkInterfaceFloatingIPOptionsModel.SetInstanceID("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.SetNetworkInterfaceID("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.SetID("testString")
				getInstanceNetworkInterfaceFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel).ToNot(BeNil())
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the GetInstanceNetworkInterfaceOptions model
				instanceID := "testString"
				id := "testString"
				getInstanceNetworkInterfaceOptionsModel := vpcService.NewGetInstanceNetworkInterfaceOptions(instanceID, id)
				getInstanceNetworkInterfaceOptionsModel.SetInstanceID("testString")
				getInstanceNetworkInterfaceOptionsModel.SetID("testString")
				getInstanceNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(getInstanceNetworkInterfaceOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceOptions successfully`, func() {
				// Construct an instance of the GetInstanceOptions model
				id := "testString"
				getInstanceOptionsModel := vpcService.NewGetInstanceOptions(id)
				getInstanceOptionsModel.SetID("testString")
				getInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceOptionsModel).ToNot(BeNil())
				Expect(getInstanceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceProfileOptions successfully`, func() {
				// Construct an instance of the GetInstanceProfileOptions model
				name := "testString"
				getInstanceProfileOptionsModel := vpcService.NewGetInstanceProfileOptions(name)
				getInstanceProfileOptionsModel.SetName("testString")
				getInstanceProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceProfileOptionsModel).ToNot(BeNil())
				Expect(getInstanceProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceTemplateOptions successfully`, func() {
				// Construct an instance of the GetInstanceTemplateOptions model
				id := "testString"
				getInstanceTemplateOptionsModel := vpcService.NewGetInstanceTemplateOptions(id)
				getInstanceTemplateOptionsModel.SetID("testString")
				getInstanceTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceTemplateOptionsModel).ToNot(BeNil())
				Expect(getInstanceTemplateOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetInstanceVolumeAttachmentOptions successfully`, func() {
				// Construct an instance of the GetInstanceVolumeAttachmentOptions model
				instanceID := "testString"
				id := "testString"
				getInstanceVolumeAttachmentOptionsModel := vpcService.NewGetInstanceVolumeAttachmentOptions(instanceID, id)
				getInstanceVolumeAttachmentOptionsModel.SetInstanceID("testString")
				getInstanceVolumeAttachmentOptionsModel.SetID("testString")
				getInstanceVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getInstanceVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(getInstanceVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceVolumeAttachmentOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getInstanceVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetIpsecPolicyOptions successfully`, func() {
				// Construct an instance of the GetIpsecPolicyOptions model
				id := "testString"
				getIpsecPolicyOptionsModel := vpcService.NewGetIpsecPolicyOptions(id)
				getIpsecPolicyOptionsModel.SetID("testString")
				getIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(getIpsecPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetKeyOptions successfully`, func() {
				// Construct an instance of the GetKeyOptions model
				id := "testString"
				getKeyOptionsModel := vpcService.NewGetKeyOptions(id)
				getKeyOptionsModel.SetID("testString")
				getKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getKeyOptionsModel).ToNot(BeNil())
				Expect(getKeyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerListenerOptions model
				loadBalancerID := "testString"
				id := "testString"
				getLoadBalancerListenerOptionsModel := vpcService.NewGetLoadBalancerListenerOptions(loadBalancerID, id)
				getLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerListenerOptionsModel.SetID("testString")
				getLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerListenerPolicyOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				id := "testString"
				getLoadBalancerListenerPolicyOptionsModel := vpcService.NewGetLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, id)
				getLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				getLoadBalancerListenerPolicyOptionsModel.SetID("testString")
				getLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerListenerPolicyRuleOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				id := "testString"
				getLoadBalancerListenerPolicyRuleOptionsModel := vpcService.NewGetLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, id)
				getLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetID("testString")
				getLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerOptions model
				id := "testString"
				getLoadBalancerOptionsModel := vpcService.NewGetLoadBalancerOptions(id)
				getLoadBalancerOptionsModel.SetID("testString")
				getLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerPoolMemberOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				id := "testString"
				getLoadBalancerPoolMemberOptionsModel := vpcService.NewGetLoadBalancerPoolMemberOptions(loadBalancerID, poolID, id)
				getLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				getLoadBalancerPoolMemberOptionsModel.SetID("testString")
				getLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolMemberOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerPoolOptions model
				loadBalancerID := "testString"
				id := "testString"
				getLoadBalancerPoolOptionsModel := vpcService.NewGetLoadBalancerPoolOptions(loadBalancerID, id)
				getLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				getLoadBalancerPoolOptionsModel.SetID("testString")
				getLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerProfileOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerProfileOptions model
				name := "testString"
				getLoadBalancerProfileOptionsModel := vpcService.NewGetLoadBalancerProfileOptions(name)
				getLoadBalancerProfileOptionsModel.SetName("testString")
				getLoadBalancerProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerProfileOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetLoadBalancerStatisticsOptions successfully`, func() {
				// Construct an instance of the GetLoadBalancerStatisticsOptions model
				id := "testString"
				getLoadBalancerStatisticsOptionsModel := vpcService.NewGetLoadBalancerStatisticsOptions(id)
				getLoadBalancerStatisticsOptionsModel.SetID("testString")
				getLoadBalancerStatisticsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getLoadBalancerStatisticsOptionsModel).ToNot(BeNil())
				Expect(getLoadBalancerStatisticsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getLoadBalancerStatisticsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNetworkACLOptions successfully`, func() {
				// Construct an instance of the GetNetworkACLOptions model
				id := "testString"
				getNetworkACLOptionsModel := vpcService.NewGetNetworkACLOptions(id)
				getNetworkACLOptionsModel.SetID("testString")
				getNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNetworkACLOptionsModel).ToNot(BeNil())
				Expect(getNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetNetworkACLRuleOptions successfully`, func() {
				// Construct an instance of the GetNetworkACLRuleOptions model
				networkACLID := "testString"
				id := "testString"
				getNetworkACLRuleOptionsModel := vpcService.NewGetNetworkACLRuleOptions(networkACLID, id)
				getNetworkACLRuleOptionsModel.SetNetworkACLID("testString")
				getNetworkACLRuleOptionsModel.SetID("testString")
				getNetworkACLRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getNetworkACLRuleOptionsModel).ToNot(BeNil())
				Expect(getNetworkACLRuleOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkACLRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getNetworkACLRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetOperatingSystemOptions successfully`, func() {
				// Construct an instance of the GetOperatingSystemOptions model
				name := "testString"
				getOperatingSystemOptionsModel := vpcService.NewGetOperatingSystemOptions(name)
				getOperatingSystemOptionsModel.SetName("testString")
				getOperatingSystemOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getOperatingSystemOptionsModel).ToNot(BeNil())
				Expect(getOperatingSystemOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getOperatingSystemOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetPublicGatewayOptions successfully`, func() {
				// Construct an instance of the GetPublicGatewayOptions model
				id := "testString"
				getPublicGatewayOptionsModel := vpcService.NewGetPublicGatewayOptions(id)
				getPublicGatewayOptionsModel.SetID("testString")
				getPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(getPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRegionOptions successfully`, func() {
				// Construct an instance of the GetRegionOptions model
				name := "testString"
				getRegionOptionsModel := vpcService.NewGetRegionOptions(name)
				getRegionOptionsModel.SetName("testString")
				getRegionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRegionOptionsModel).ToNot(BeNil())
				Expect(getRegionOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getRegionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetRegionZoneOptions successfully`, func() {
				// Construct an instance of the GetRegionZoneOptions model
				regionName := "testString"
				name := "testString"
				getRegionZoneOptionsModel := vpcService.NewGetRegionZoneOptions(regionName, name)
				getRegionZoneOptionsModel.SetRegionName("testString")
				getRegionZoneOptionsModel.SetName("testString")
				getRegionZoneOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getRegionZoneOptionsModel).ToNot(BeNil())
				Expect(getRegionZoneOptionsModel.RegionName).To(Equal(core.StringPtr("testString")))
				Expect(getRegionZoneOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getRegionZoneOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the GetSecurityGroupNetworkInterfaceOptions model
				securityGroupID := "testString"
				id := "testString"
				getSecurityGroupNetworkInterfaceOptionsModel := vpcService.NewGetSecurityGroupNetworkInterfaceOptions(securityGroupID, id)
				getSecurityGroupNetworkInterfaceOptionsModel.SetSecurityGroupID("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.SetID("testString")
				getSecurityGroupNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupOptions successfully`, func() {
				// Construct an instance of the GetSecurityGroupOptions model
				id := "testString"
				getSecurityGroupOptionsModel := vpcService.NewGetSecurityGroupOptions(id)
				getSecurityGroupOptionsModel.SetID("testString")
				getSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the GetSecurityGroupRuleOptions model
				securityGroupID := "testString"
				id := "testString"
				getSecurityGroupRuleOptionsModel := vpcService.NewGetSecurityGroupRuleOptions(securityGroupID, id)
				getSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				getSecurityGroupRuleOptionsModel.SetID("testString")
				getSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSecurityGroupTargetOptions successfully`, func() {
				// Construct an instance of the GetSecurityGroupTargetOptions model
				securityGroupID := "testString"
				id := "testString"
				getSecurityGroupTargetOptionsModel := vpcService.NewGetSecurityGroupTargetOptions(securityGroupID, id)
				getSecurityGroupTargetOptionsModel.SetSecurityGroupID("testString")
				getSecurityGroupTargetOptionsModel.SetID("testString")
				getSecurityGroupTargetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSecurityGroupTargetOptionsModel).ToNot(BeNil())
				Expect(getSecurityGroupTargetOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupTargetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSecurityGroupTargetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetNetworkACLOptions successfully`, func() {
				// Construct an instance of the GetSubnetNetworkACLOptions model
				id := "testString"
				getSubnetNetworkACLOptionsModel := vpcService.NewGetSubnetNetworkACLOptions(id)
				getSubnetNetworkACLOptionsModel.SetID("testString")
				getSubnetNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetNetworkACLOptionsModel).ToNot(BeNil())
				Expect(getSubnetNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetOptions successfully`, func() {
				// Construct an instance of the GetSubnetOptions model
				id := "testString"
				getSubnetOptionsModel := vpcService.NewGetSubnetOptions(id)
				getSubnetOptionsModel.SetID("testString")
				getSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetOptionsModel).ToNot(BeNil())
				Expect(getSubnetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetPublicGatewayOptions successfully`, func() {
				// Construct an instance of the GetSubnetPublicGatewayOptions model
				id := "testString"
				getSubnetPublicGatewayOptionsModel := vpcService.NewGetSubnetPublicGatewayOptions(id)
				getSubnetPublicGatewayOptionsModel.SetID("testString")
				getSubnetPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(getSubnetPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetReservedIPOptions successfully`, func() {
				// Construct an instance of the GetSubnetReservedIPOptions model
				subnetID := "testString"
				id := "testString"
				getSubnetReservedIPOptionsModel := vpcService.NewGetSubnetReservedIPOptions(subnetID, id)
				getSubnetReservedIPOptionsModel.SetSubnetID("testString")
				getSubnetReservedIPOptionsModel.SetID("testString")
				getSubnetReservedIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetReservedIPOptionsModel).ToNot(BeNil())
				Expect(getSubnetReservedIPOptionsModel.SubnetID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetReservedIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetReservedIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetSubnetRoutingTableOptions successfully`, func() {
				// Construct an instance of the GetSubnetRoutingTableOptions model
				id := "testString"
				getSubnetRoutingTableOptionsModel := vpcService.NewGetSubnetRoutingTableOptions(id)
				getSubnetRoutingTableOptionsModel.SetID("testString")
				getSubnetRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getSubnetRoutingTableOptionsModel).ToNot(BeNil())
				Expect(getSubnetRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getSubnetRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVolumeOptions successfully`, func() {
				// Construct an instance of the GetVolumeOptions model
				id := "testString"
				getVolumeOptionsModel := vpcService.NewGetVolumeOptions(id)
				getVolumeOptionsModel.SetID("testString")
				getVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVolumeOptionsModel).ToNot(BeNil())
				Expect(getVolumeOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVolumeProfileOptions successfully`, func() {
				// Construct an instance of the GetVolumeProfileOptions model
				name := "testString"
				getVolumeProfileOptionsModel := vpcService.NewGetVolumeProfileOptions(name)
				getVolumeProfileOptionsModel.SetName("testString")
				getVolumeProfileOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVolumeProfileOptionsModel).ToNot(BeNil())
				Expect(getVolumeProfileOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(getVolumeProfileOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCAddressPrefixOptions successfully`, func() {
				// Construct an instance of the GetVPCAddressPrefixOptions model
				vpcID := "testString"
				id := "testString"
				getVPCAddressPrefixOptionsModel := vpcService.NewGetVPCAddressPrefixOptions(vpcID, id)
				getVPCAddressPrefixOptionsModel.SetVPCID("testString")
				getVPCAddressPrefixOptionsModel.SetID("testString")
				getVPCAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(getVPCAddressPrefixOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCAddressPrefixOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCDefaultNetworkACLOptions successfully`, func() {
				// Construct an instance of the GetVPCDefaultNetworkACLOptions model
				id := "testString"
				getVPCDefaultNetworkACLOptionsModel := vpcService.NewGetVPCDefaultNetworkACLOptions(id)
				getVPCDefaultNetworkACLOptionsModel.SetID("testString")
				getVPCDefaultNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCDefaultNetworkACLOptionsModel).ToNot(BeNil())
				Expect(getVPCDefaultNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCDefaultNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCDefaultRoutingTableOptions successfully`, func() {
				// Construct an instance of the GetVPCDefaultRoutingTableOptions model
				id := "testString"
				getVPCDefaultRoutingTableOptionsModel := vpcService.NewGetVPCDefaultRoutingTableOptions(id)
				getVPCDefaultRoutingTableOptionsModel.SetID("testString")
				getVPCDefaultRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCDefaultRoutingTableOptionsModel).ToNot(BeNil())
				Expect(getVPCDefaultRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCDefaultRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCDefaultSecurityGroupOptions successfully`, func() {
				// Construct an instance of the GetVPCDefaultSecurityGroupOptions model
				id := "testString"
				getVPCDefaultSecurityGroupOptionsModel := vpcService.NewGetVPCDefaultSecurityGroupOptions(id)
				getVPCDefaultSecurityGroupOptionsModel.SetID("testString")
				getVPCDefaultSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCDefaultSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(getVPCDefaultSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCDefaultSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCOptions successfully`, func() {
				// Construct an instance of the GetVPCOptions model
				id := "testString"
				getVPCOptionsModel := vpcService.NewGetVPCOptions(id)
				getVPCOptionsModel.SetID("testString")
				getVPCOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCOptionsModel).ToNot(BeNil())
				Expect(getVPCOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCRouteOptions successfully`, func() {
				// Construct an instance of the GetVPCRouteOptions model
				vpcID := "testString"
				id := "testString"
				getVPCRouteOptionsModel := vpcService.NewGetVPCRouteOptions(vpcID, id)
				getVPCRouteOptionsModel.SetVPCID("testString")
				getVPCRouteOptionsModel.SetID("testString")
				getVPCRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCRouteOptionsModel).ToNot(BeNil())
				Expect(getVPCRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCRoutingTableOptions successfully`, func() {
				// Construct an instance of the GetVPCRoutingTableOptions model
				vpcID := "testString"
				id := "testString"
				getVPCRoutingTableOptionsModel := vpcService.NewGetVPCRoutingTableOptions(vpcID, id)
				getVPCRoutingTableOptionsModel.SetVPCID("testString")
				getVPCRoutingTableOptionsModel.SetID("testString")
				getVPCRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCRoutingTableOptionsModel).ToNot(BeNil())
				Expect(getVPCRoutingTableOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPCRoutingTableRouteOptions successfully`, func() {
				// Construct an instance of the GetVPCRoutingTableRouteOptions model
				vpcID := "testString"
				routingTableID := "testString"
				id := "testString"
				getVPCRoutingTableRouteOptionsModel := vpcService.NewGetVPCRoutingTableRouteOptions(vpcID, routingTableID, id)
				getVPCRoutingTableRouteOptionsModel.SetVPCID("testString")
				getVPCRoutingTableRouteOptionsModel.SetRoutingTableID("testString")
				getVPCRoutingTableRouteOptionsModel.SetID("testString")
				getVPCRoutingTableRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPCRoutingTableRouteOptionsModel).ToNot(BeNil())
				Expect(getVPCRoutingTableRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCRoutingTableRouteOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCRoutingTableRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPCRoutingTableRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPNGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the GetVPNGatewayConnectionOptions model
				vpnGatewayID := "testString"
				id := "testString"
				getVPNGatewayConnectionOptionsModel := vpcService.NewGetVPNGatewayConnectionOptions(vpnGatewayID, id)
				getVPNGatewayConnectionOptionsModel.SetVPNGatewayID("testString")
				getVPNGatewayConnectionOptionsModel.SetID("testString")
				getVPNGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPNGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(getVPNGatewayConnectionOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(getVPNGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPNGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewGetVPNGatewayOptions successfully`, func() {
				// Construct an instance of the GetVPNGatewayOptions model
				id := "testString"
				getVPNGatewayOptionsModel := vpcService.NewGetVPNGatewayOptions(id)
				getVPNGatewayOptionsModel.SetID("testString")
				getVPNGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(getVPNGatewayOptionsModel).ToNot(BeNil())
				Expect(getVPNGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(getVPNGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewImageFilePrototype successfully`, func() {
				href := "cos://us-south/custom-image-vpc-bucket/customImage-0.vhd"
				model, err := vpcService.NewImageFilePrototype(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerScheduledActionGroupPrototype successfully`, func() {
				membershipCount := int64(10)
				model, err := vpcService.NewInstanceGroupManagerScheduledActionGroupPrototype(membershipCount)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewListDedicatedHostDisksOptions successfully`, func() {
				// Construct an instance of the ListDedicatedHostDisksOptions model
				dedicatedHostID := "testString"
				listDedicatedHostDisksOptionsModel := vpcService.NewListDedicatedHostDisksOptions(dedicatedHostID)
				listDedicatedHostDisksOptionsModel.SetDedicatedHostID("testString")
				listDedicatedHostDisksOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDedicatedHostDisksOptionsModel).ToNot(BeNil())
				Expect(listDedicatedHostDisksOptionsModel.DedicatedHostID).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostDisksOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDedicatedHostGroupsOptions successfully`, func() {
				// Construct an instance of the ListDedicatedHostGroupsOptions model
				listDedicatedHostGroupsOptionsModel := vpcService.NewListDedicatedHostGroupsOptions()
				listDedicatedHostGroupsOptionsModel.SetStart("testString")
				listDedicatedHostGroupsOptionsModel.SetLimit(int64(1))
				listDedicatedHostGroupsOptionsModel.SetResourceGroupID("testString")
				listDedicatedHostGroupsOptionsModel.SetZoneName("testString")
				listDedicatedHostGroupsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDedicatedHostGroupsOptionsModel).ToNot(BeNil())
				Expect(listDedicatedHostGroupsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostGroupsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listDedicatedHostGroupsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostGroupsOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostGroupsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDedicatedHostProfilesOptions successfully`, func() {
				// Construct an instance of the ListDedicatedHostProfilesOptions model
				listDedicatedHostProfilesOptionsModel := vpcService.NewListDedicatedHostProfilesOptions()
				listDedicatedHostProfilesOptionsModel.SetStart("testString")
				listDedicatedHostProfilesOptionsModel.SetLimit(int64(1))
				listDedicatedHostProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDedicatedHostProfilesOptionsModel).ToNot(BeNil())
				Expect(listDedicatedHostProfilesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostProfilesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listDedicatedHostProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListDedicatedHostsOptions successfully`, func() {
				// Construct an instance of the ListDedicatedHostsOptions model
				listDedicatedHostsOptionsModel := vpcService.NewListDedicatedHostsOptions()
				listDedicatedHostsOptionsModel.SetDedicatedHostGroupID("testString")
				listDedicatedHostsOptionsModel.SetStart("testString")
				listDedicatedHostsOptionsModel.SetLimit(int64(1))
				listDedicatedHostsOptionsModel.SetResourceGroupID("testString")
				listDedicatedHostsOptionsModel.SetZoneName("testString")
				listDedicatedHostsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listDedicatedHostsOptionsModel).ToNot(BeNil())
				Expect(listDedicatedHostsOptionsModel.DedicatedHostGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listDedicatedHostsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostsOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listDedicatedHostsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListEndpointGatewayIpsOptions successfully`, func() {
				// Construct an instance of the ListEndpointGatewayIpsOptions model
				endpointGatewayID := "testString"
				listEndpointGatewayIpsOptionsModel := vpcService.NewListEndpointGatewayIpsOptions(endpointGatewayID)
				listEndpointGatewayIpsOptionsModel.SetEndpointGatewayID("testString")
				listEndpointGatewayIpsOptionsModel.SetStart("testString")
				listEndpointGatewayIpsOptionsModel.SetLimit(int64(1))
				listEndpointGatewayIpsOptionsModel.SetSort("name")
				listEndpointGatewayIpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listEndpointGatewayIpsOptionsModel).ToNot(BeNil())
				Expect(listEndpointGatewayIpsOptionsModel.EndpointGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listEndpointGatewayIpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listEndpointGatewayIpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listEndpointGatewayIpsOptionsModel.Sort).To(Equal(core.StringPtr("name")))
				Expect(listEndpointGatewayIpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListEndpointGatewaysOptions successfully`, func() {
				// Construct an instance of the ListEndpointGatewaysOptions model
				listEndpointGatewaysOptionsModel := vpcService.NewListEndpointGatewaysOptions()
				listEndpointGatewaysOptionsModel.SetName("testString")
				listEndpointGatewaysOptionsModel.SetStart("testString")
				listEndpointGatewaysOptionsModel.SetLimit(int64(1))
				listEndpointGatewaysOptionsModel.SetResourceGroupID("testString")
				listEndpointGatewaysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listEndpointGatewaysOptionsModel).ToNot(BeNil())
				Expect(listEndpointGatewaysOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listEndpointGatewaysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listEndpointGatewaysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listEndpointGatewaysOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listEndpointGatewaysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListFloatingIpsOptions successfully`, func() {
				// Construct an instance of the ListFloatingIpsOptions model
				listFloatingIpsOptionsModel := vpcService.NewListFloatingIpsOptions()
				listFloatingIpsOptionsModel.SetStart("testString")
				listFloatingIpsOptionsModel.SetLimit(int64(1))
				listFloatingIpsOptionsModel.SetResourceGroupID("testString")
				listFloatingIpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listFloatingIpsOptionsModel).ToNot(BeNil())
				Expect(listFloatingIpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listFloatingIpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listFloatingIpsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listFloatingIpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListFlowLogCollectorsOptions successfully`, func() {
				// Construct an instance of the ListFlowLogCollectorsOptions model
				listFlowLogCollectorsOptionsModel := vpcService.NewListFlowLogCollectorsOptions()
				listFlowLogCollectorsOptionsModel.SetStart("testString")
				listFlowLogCollectorsOptionsModel.SetLimit(int64(1))
				listFlowLogCollectorsOptionsModel.SetResourceGroupID("testString")
				listFlowLogCollectorsOptionsModel.SetName("testString")
				listFlowLogCollectorsOptionsModel.SetVPCID("testString")
				listFlowLogCollectorsOptionsModel.SetVPCCRN("testString")
				listFlowLogCollectorsOptionsModel.SetVPCName("testString")
				listFlowLogCollectorsOptionsModel.SetTargetID("testString")
				listFlowLogCollectorsOptionsModel.SetTargetResourceType("vpc")
				listFlowLogCollectorsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listFlowLogCollectorsOptionsModel).ToNot(BeNil())
				Expect(listFlowLogCollectorsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listFlowLogCollectorsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.VPCCRN).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.VPCName).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.TargetID).To(Equal(core.StringPtr("testString")))
				Expect(listFlowLogCollectorsOptionsModel.TargetResourceType).To(Equal(core.StringPtr("vpc")))
				Expect(listFlowLogCollectorsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIkePoliciesOptions successfully`, func() {
				// Construct an instance of the ListIkePoliciesOptions model
				listIkePoliciesOptionsModel := vpcService.NewListIkePoliciesOptions()
				listIkePoliciesOptionsModel.SetStart("testString")
				listIkePoliciesOptionsModel.SetLimit(int64(1))
				listIkePoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIkePoliciesOptionsModel).ToNot(BeNil())
				Expect(listIkePoliciesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listIkePoliciesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listIkePoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIkePolicyConnectionsOptions successfully`, func() {
				// Construct an instance of the ListIkePolicyConnectionsOptions model
				id := "testString"
				listIkePolicyConnectionsOptionsModel := vpcService.NewListIkePolicyConnectionsOptions(id)
				listIkePolicyConnectionsOptionsModel.SetID("testString")
				listIkePolicyConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIkePolicyConnectionsOptionsModel).ToNot(BeNil())
				Expect(listIkePolicyConnectionsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listIkePolicyConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListImagesOptions successfully`, func() {
				// Construct an instance of the ListImagesOptions model
				listImagesOptionsModel := vpcService.NewListImagesOptions()
				listImagesOptionsModel.SetStart("testString")
				listImagesOptionsModel.SetLimit(int64(1))
				listImagesOptionsModel.SetResourceGroupID("testString")
				listImagesOptionsModel.SetName("testString")
				listImagesOptionsModel.SetVisibility("private")
				listImagesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listImagesOptionsModel).ToNot(BeNil())
				Expect(listImagesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listImagesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listImagesOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listImagesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listImagesOptionsModel.Visibility).To(Equal(core.StringPtr("private")))
				Expect(listImagesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceDisksOptions successfully`, func() {
				// Construct an instance of the ListInstanceDisksOptions model
				instanceID := "testString"
				listInstanceDisksOptionsModel := vpcService.NewListInstanceDisksOptions(instanceID)
				listInstanceDisksOptionsModel.SetInstanceID("testString")
				listInstanceDisksOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceDisksOptionsModel).ToNot(BeNil())
				Expect(listInstanceDisksOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceDisksOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceGroupManagerActionsOptions successfully`, func() {
				// Construct an instance of the ListInstanceGroupManagerActionsOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				listInstanceGroupManagerActionsOptionsModel := vpcService.NewListInstanceGroupManagerActionsOptions(instanceGroupID, instanceGroupManagerID)
				listInstanceGroupManagerActionsOptionsModel.SetInstanceGroupID("testString")
				listInstanceGroupManagerActionsOptionsModel.SetInstanceGroupManagerID("testString")
				listInstanceGroupManagerActionsOptionsModel.SetStart("testString")
				listInstanceGroupManagerActionsOptionsModel.SetLimit(int64(1))
				listInstanceGroupManagerActionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceGroupManagerActionsOptionsModel).ToNot(BeNil())
				Expect(listInstanceGroupManagerActionsOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagerActionsOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagerActionsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagerActionsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInstanceGroupManagerActionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceGroupManagerPoliciesOptions successfully`, func() {
				// Construct an instance of the ListInstanceGroupManagerPoliciesOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				listInstanceGroupManagerPoliciesOptionsModel := vpcService.NewListInstanceGroupManagerPoliciesOptions(instanceGroupID, instanceGroupManagerID)
				listInstanceGroupManagerPoliciesOptionsModel.SetInstanceGroupID("testString")
				listInstanceGroupManagerPoliciesOptionsModel.SetInstanceGroupManagerID("testString")
				listInstanceGroupManagerPoliciesOptionsModel.SetStart("testString")
				listInstanceGroupManagerPoliciesOptionsModel.SetLimit(int64(1))
				listInstanceGroupManagerPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceGroupManagerPoliciesOptionsModel).ToNot(BeNil())
				Expect(listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagerPoliciesOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagerPoliciesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagerPoliciesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInstanceGroupManagerPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceGroupManagersOptions successfully`, func() {
				// Construct an instance of the ListInstanceGroupManagersOptions model
				instanceGroupID := "testString"
				listInstanceGroupManagersOptionsModel := vpcService.NewListInstanceGroupManagersOptions(instanceGroupID)
				listInstanceGroupManagersOptionsModel.SetInstanceGroupID("testString")
				listInstanceGroupManagersOptionsModel.SetStart("testString")
				listInstanceGroupManagersOptionsModel.SetLimit(int64(1))
				listInstanceGroupManagersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceGroupManagersOptionsModel).ToNot(BeNil())
				Expect(listInstanceGroupManagersOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagersOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupManagersOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInstanceGroupManagersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceGroupMembershipsOptions successfully`, func() {
				// Construct an instance of the ListInstanceGroupMembershipsOptions model
				instanceGroupID := "testString"
				listInstanceGroupMembershipsOptionsModel := vpcService.NewListInstanceGroupMembershipsOptions(instanceGroupID)
				listInstanceGroupMembershipsOptionsModel.SetInstanceGroupID("testString")
				listInstanceGroupMembershipsOptionsModel.SetStart("testString")
				listInstanceGroupMembershipsOptionsModel.SetLimit(int64(1))
				listInstanceGroupMembershipsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceGroupMembershipsOptionsModel).ToNot(BeNil())
				Expect(listInstanceGroupMembershipsOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupMembershipsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupMembershipsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInstanceGroupMembershipsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceGroupsOptions successfully`, func() {
				// Construct an instance of the ListInstanceGroupsOptions model
				listInstanceGroupsOptionsModel := vpcService.NewListInstanceGroupsOptions()
				listInstanceGroupsOptionsModel.SetStart("testString")
				listInstanceGroupsOptionsModel.SetLimit(int64(1))
				listInstanceGroupsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceGroupsOptionsModel).ToNot(BeNil())
				Expect(listInstanceGroupsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceGroupsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInstanceGroupsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceNetworkInterfaceFloatingIpsOptions successfully`, func() {
				// Construct an instance of the ListInstanceNetworkInterfaceFloatingIpsOptions model
				instanceID := "testString"
				networkInterfaceID := "testString"
				listInstanceNetworkInterfaceFloatingIpsOptionsModel := vpcService.NewListInstanceNetworkInterfaceFloatingIpsOptions(instanceID, networkInterfaceID)
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.SetInstanceID("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.SetNetworkInterfaceID("testString")
				listInstanceNetworkInterfaceFloatingIpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceNetworkInterfaceFloatingIpsOptionsModel).ToNot(BeNil())
				Expect(listInstanceNetworkInterfaceFloatingIpsOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceNetworkInterfaceFloatingIpsOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceNetworkInterfaceFloatingIpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceNetworkInterfacesOptions successfully`, func() {
				// Construct an instance of the ListInstanceNetworkInterfacesOptions model
				instanceID := "testString"
				listInstanceNetworkInterfacesOptionsModel := vpcService.NewListInstanceNetworkInterfacesOptions(instanceID)
				listInstanceNetworkInterfacesOptionsModel.SetInstanceID("testString")
				listInstanceNetworkInterfacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceNetworkInterfacesOptionsModel).ToNot(BeNil())
				Expect(listInstanceNetworkInterfacesOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceNetworkInterfacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceProfilesOptions successfully`, func() {
				// Construct an instance of the ListInstanceProfilesOptions model
				listInstanceProfilesOptionsModel := vpcService.NewListInstanceProfilesOptions()
				listInstanceProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceProfilesOptionsModel).ToNot(BeNil())
				Expect(listInstanceProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceTemplatesOptions successfully`, func() {
				// Construct an instance of the ListInstanceTemplatesOptions model
				listInstanceTemplatesOptionsModel := vpcService.NewListInstanceTemplatesOptions()
				listInstanceTemplatesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceTemplatesOptionsModel).ToNot(BeNil())
				Expect(listInstanceTemplatesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstanceVolumeAttachmentsOptions successfully`, func() {
				// Construct an instance of the ListInstanceVolumeAttachmentsOptions model
				instanceID := "testString"
				listInstanceVolumeAttachmentsOptionsModel := vpcService.NewListInstanceVolumeAttachmentsOptions(instanceID)
				listInstanceVolumeAttachmentsOptionsModel.SetInstanceID("testString")
				listInstanceVolumeAttachmentsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstanceVolumeAttachmentsOptionsModel).ToNot(BeNil())
				Expect(listInstanceVolumeAttachmentsOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(listInstanceVolumeAttachmentsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListInstancesOptions successfully`, func() {
				// Construct an instance of the ListInstancesOptions model
				listInstancesOptionsModel := vpcService.NewListInstancesOptions()
				listInstancesOptionsModel.SetStart("testString")
				listInstancesOptionsModel.SetLimit(int64(1))
				listInstancesOptionsModel.SetResourceGroupID("testString")
				listInstancesOptionsModel.SetName("testString")
				listInstancesOptionsModel.SetVPCID("testString")
				listInstancesOptionsModel.SetVPCCRN("testString")
				listInstancesOptionsModel.SetVPCName("testString")
				listInstancesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listInstancesOptionsModel).ToNot(BeNil())
				Expect(listInstancesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listInstancesOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.VPCCRN).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.VPCName).To(Equal(core.StringPtr("testString")))
				Expect(listInstancesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIpsecPoliciesOptions successfully`, func() {
				// Construct an instance of the ListIpsecPoliciesOptions model
				listIpsecPoliciesOptionsModel := vpcService.NewListIpsecPoliciesOptions()
				listIpsecPoliciesOptionsModel.SetStart("testString")
				listIpsecPoliciesOptionsModel.SetLimit(int64(1))
				listIpsecPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIpsecPoliciesOptionsModel).ToNot(BeNil())
				Expect(listIpsecPoliciesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listIpsecPoliciesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listIpsecPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListIpsecPolicyConnectionsOptions successfully`, func() {
				// Construct an instance of the ListIpsecPolicyConnectionsOptions model
				id := "testString"
				listIpsecPolicyConnectionsOptionsModel := vpcService.NewListIpsecPolicyConnectionsOptions(id)
				listIpsecPolicyConnectionsOptionsModel.SetID("testString")
				listIpsecPolicyConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listIpsecPolicyConnectionsOptionsModel).ToNot(BeNil())
				Expect(listIpsecPolicyConnectionsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listIpsecPolicyConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListKeysOptions successfully`, func() {
				// Construct an instance of the ListKeysOptions model
				listKeysOptionsModel := vpcService.NewListKeysOptions()
				listKeysOptionsModel.SetResourceGroupID("testString")
				listKeysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listKeysOptionsModel).ToNot(BeNil())
				Expect(listKeysOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listKeysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerListenerPoliciesOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerListenerPoliciesOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				listLoadBalancerListenerPoliciesOptionsModel := vpcService.NewListLoadBalancerListenerPoliciesOptions(loadBalancerID, listenerID)
				listLoadBalancerListenerPoliciesOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerListenerPoliciesOptionsModel.SetListenerID("testString")
				listLoadBalancerListenerPoliciesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerListenerPoliciesOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerListenerPoliciesOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPoliciesOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPoliciesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerListenerPolicyRulesOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerListenerPolicyRulesOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				listLoadBalancerListenerPolicyRulesOptionsModel := vpcService.NewListLoadBalancerListenerPolicyRulesOptions(loadBalancerID, listenerID, policyID)
				listLoadBalancerListenerPolicyRulesOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.SetListenerID("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.SetPolicyID("testString")
				listLoadBalancerListenerPolicyRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenerPolicyRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerListenersOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerListenersOptions model
				loadBalancerID := "testString"
				listLoadBalancerListenersOptionsModel := vpcService.NewListLoadBalancerListenersOptions(loadBalancerID)
				listLoadBalancerListenersOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerListenersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerListenersOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerListenersOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerListenersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerPoolMembersOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerPoolMembersOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				listLoadBalancerPoolMembersOptionsModel := vpcService.NewListLoadBalancerPoolMembersOptions(loadBalancerID, poolID)
				listLoadBalancerPoolMembersOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerPoolMembersOptionsModel.SetPoolID("testString")
				listLoadBalancerPoolMembersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerPoolMembersOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerPoolMembersOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerPoolMembersOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerPoolMembersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerPoolsOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerPoolsOptions model
				loadBalancerID := "testString"
				listLoadBalancerPoolsOptionsModel := vpcService.NewListLoadBalancerPoolsOptions(loadBalancerID)
				listLoadBalancerPoolsOptionsModel.SetLoadBalancerID("testString")
				listLoadBalancerPoolsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerPoolsOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerPoolsOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerPoolsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancerProfilesOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancerProfilesOptions model
				listLoadBalancerProfilesOptionsModel := vpcService.NewListLoadBalancerProfilesOptions()
				listLoadBalancerProfilesOptionsModel.SetStart("testString")
				listLoadBalancerProfilesOptionsModel.SetLimit(int64(1))
				listLoadBalancerProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancerProfilesOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancerProfilesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listLoadBalancerProfilesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listLoadBalancerProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListLoadBalancersOptions successfully`, func() {
				// Construct an instance of the ListLoadBalancersOptions model
				listLoadBalancersOptionsModel := vpcService.NewListLoadBalancersOptions()
				listLoadBalancersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listLoadBalancersOptionsModel).ToNot(BeNil())
				Expect(listLoadBalancersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNetworkACLRulesOptions successfully`, func() {
				// Construct an instance of the ListNetworkACLRulesOptions model
				networkACLID := "testString"
				listNetworkACLRulesOptionsModel := vpcService.NewListNetworkACLRulesOptions(networkACLID)
				listNetworkACLRulesOptionsModel.SetNetworkACLID("testString")
				listNetworkACLRulesOptionsModel.SetStart("testString")
				listNetworkACLRulesOptionsModel.SetLimit(int64(1))
				listNetworkACLRulesOptionsModel.SetDirection("inbound")
				listNetworkACLRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNetworkACLRulesOptionsModel).ToNot(BeNil())
				Expect(listNetworkACLRulesOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkACLRulesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkACLRulesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listNetworkACLRulesOptionsModel.Direction).To(Equal(core.StringPtr("inbound")))
				Expect(listNetworkACLRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListNetworkAclsOptions successfully`, func() {
				// Construct an instance of the ListNetworkAclsOptions model
				listNetworkAclsOptionsModel := vpcService.NewListNetworkAclsOptions()
				listNetworkAclsOptionsModel.SetStart("testString")
				listNetworkAclsOptionsModel.SetLimit(int64(1))
				listNetworkAclsOptionsModel.SetResourceGroupID("testString")
				listNetworkAclsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listNetworkAclsOptionsModel).ToNot(BeNil())
				Expect(listNetworkAclsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkAclsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listNetworkAclsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listNetworkAclsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListOperatingSystemsOptions successfully`, func() {
				// Construct an instance of the ListOperatingSystemsOptions model
				listOperatingSystemsOptionsModel := vpcService.NewListOperatingSystemsOptions()
				listOperatingSystemsOptionsModel.SetStart("testString")
				listOperatingSystemsOptionsModel.SetLimit(int64(1))
				listOperatingSystemsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listOperatingSystemsOptionsModel).ToNot(BeNil())
				Expect(listOperatingSystemsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listOperatingSystemsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listOperatingSystemsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListPublicGatewaysOptions successfully`, func() {
				// Construct an instance of the ListPublicGatewaysOptions model
				listPublicGatewaysOptionsModel := vpcService.NewListPublicGatewaysOptions()
				listPublicGatewaysOptionsModel.SetStart("testString")
				listPublicGatewaysOptionsModel.SetLimit(int64(1))
				listPublicGatewaysOptionsModel.SetResourceGroupID("testString")
				listPublicGatewaysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listPublicGatewaysOptionsModel).ToNot(BeNil())
				Expect(listPublicGatewaysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listPublicGatewaysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listPublicGatewaysOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listPublicGatewaysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListRegionZonesOptions successfully`, func() {
				// Construct an instance of the ListRegionZonesOptions model
				regionName := "testString"
				listRegionZonesOptionsModel := vpcService.NewListRegionZonesOptions(regionName)
				listRegionZonesOptionsModel.SetRegionName("testString")
				listRegionZonesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listRegionZonesOptionsModel).ToNot(BeNil())
				Expect(listRegionZonesOptionsModel.RegionName).To(Equal(core.StringPtr("testString")))
				Expect(listRegionZonesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListRegionsOptions successfully`, func() {
				// Construct an instance of the ListRegionsOptions model
				listRegionsOptionsModel := vpcService.NewListRegionsOptions()
				listRegionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listRegionsOptionsModel).ToNot(BeNil())
				Expect(listRegionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupNetworkInterfacesOptions successfully`, func() {
				// Construct an instance of the ListSecurityGroupNetworkInterfacesOptions model
				securityGroupID := "testString"
				listSecurityGroupNetworkInterfacesOptionsModel := vpcService.NewListSecurityGroupNetworkInterfacesOptions(securityGroupID)
				listSecurityGroupNetworkInterfacesOptionsModel.SetSecurityGroupID("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.SetStart("testString")
				listSecurityGroupNetworkInterfacesOptionsModel.SetLimit(int64(1))
				listSecurityGroupNetworkInterfacesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupNetworkInterfacesOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupNetworkInterfacesOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupNetworkInterfacesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupNetworkInterfacesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listSecurityGroupNetworkInterfacesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupRulesOptions successfully`, func() {
				// Construct an instance of the ListSecurityGroupRulesOptions model
				securityGroupID := "testString"
				listSecurityGroupRulesOptionsModel := vpcService.NewListSecurityGroupRulesOptions(securityGroupID)
				listSecurityGroupRulesOptionsModel.SetSecurityGroupID("testString")
				listSecurityGroupRulesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupRulesOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupRulesOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupRulesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupTargetsOptions successfully`, func() {
				// Construct an instance of the ListSecurityGroupTargetsOptions model
				securityGroupID := "testString"
				listSecurityGroupTargetsOptionsModel := vpcService.NewListSecurityGroupTargetsOptions(securityGroupID)
				listSecurityGroupTargetsOptionsModel.SetSecurityGroupID("testString")
				listSecurityGroupTargetsOptionsModel.SetStart("testString")
				listSecurityGroupTargetsOptionsModel.SetLimit(int64(1))
				listSecurityGroupTargetsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupTargetsOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupTargetsOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupTargetsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupTargetsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listSecurityGroupTargetsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSecurityGroupsOptions successfully`, func() {
				// Construct an instance of the ListSecurityGroupsOptions model
				listSecurityGroupsOptionsModel := vpcService.NewListSecurityGroupsOptions()
				listSecurityGroupsOptionsModel.SetStart("testString")
				listSecurityGroupsOptionsModel.SetLimit(int64(1))
				listSecurityGroupsOptionsModel.SetResourceGroupID("testString")
				listSecurityGroupsOptionsModel.SetVPCID("testString")
				listSecurityGroupsOptionsModel.SetVPCCRN("testString")
				listSecurityGroupsOptionsModel.SetVPCName("testString")
				listSecurityGroupsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSecurityGroupsOptionsModel).ToNot(BeNil())
				Expect(listSecurityGroupsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listSecurityGroupsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.VPCCRN).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.VPCName).To(Equal(core.StringPtr("testString")))
				Expect(listSecurityGroupsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSubnetReservedIpsOptions successfully`, func() {
				// Construct an instance of the ListSubnetReservedIpsOptions model
				subnetID := "testString"
				listSubnetReservedIpsOptionsModel := vpcService.NewListSubnetReservedIpsOptions(subnetID)
				listSubnetReservedIpsOptionsModel.SetSubnetID("testString")
				listSubnetReservedIpsOptionsModel.SetStart("testString")
				listSubnetReservedIpsOptionsModel.SetLimit(int64(1))
				listSubnetReservedIpsOptionsModel.SetSort("name")
				listSubnetReservedIpsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSubnetReservedIpsOptionsModel).ToNot(BeNil())
				Expect(listSubnetReservedIpsOptionsModel.SubnetID).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetReservedIpsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetReservedIpsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listSubnetReservedIpsOptionsModel.Sort).To(Equal(core.StringPtr("name")))
				Expect(listSubnetReservedIpsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListSubnetsOptions successfully`, func() {
				// Construct an instance of the ListSubnetsOptions model
				listSubnetsOptionsModel := vpcService.NewListSubnetsOptions()
				listSubnetsOptionsModel.SetStart("testString")
				listSubnetsOptionsModel.SetLimit(int64(1))
				listSubnetsOptionsModel.SetResourceGroupID("testString")
				listSubnetsOptionsModel.SetRoutingTableID("testString")
				listSubnetsOptionsModel.SetRoutingTableName("testString")
				listSubnetsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listSubnetsOptionsModel).ToNot(BeNil())
				Expect(listSubnetsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listSubnetsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.RoutingTableName).To(Equal(core.StringPtr("testString")))
				Expect(listSubnetsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVolumeProfilesOptions successfully`, func() {
				// Construct an instance of the ListVolumeProfilesOptions model
				listVolumeProfilesOptionsModel := vpcService.NewListVolumeProfilesOptions()
				listVolumeProfilesOptionsModel.SetStart("testString")
				listVolumeProfilesOptionsModel.SetLimit(int64(1))
				listVolumeProfilesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVolumeProfilesOptionsModel).ToNot(BeNil())
				Expect(listVolumeProfilesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVolumeProfilesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVolumeProfilesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVolumesOptions successfully`, func() {
				// Construct an instance of the ListVolumesOptions model
				listVolumesOptionsModel := vpcService.NewListVolumesOptions()
				listVolumesOptionsModel.SetStart("testString")
				listVolumesOptionsModel.SetLimit(int64(1))
				listVolumesOptionsModel.SetName("testString")
				listVolumesOptionsModel.SetZoneName("testString")
				listVolumesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVolumesOptionsModel).ToNot(BeNil())
				Expect(listVolumesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVolumesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVolumesOptionsModel.Name).To(Equal(core.StringPtr("testString")))
				Expect(listVolumesOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listVolumesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPCAddressPrefixesOptions successfully`, func() {
				// Construct an instance of the ListVPCAddressPrefixesOptions model
				vpcID := "testString"
				listVPCAddressPrefixesOptionsModel := vpcService.NewListVPCAddressPrefixesOptions(vpcID)
				listVPCAddressPrefixesOptionsModel.SetVPCID("testString")
				listVPCAddressPrefixesOptionsModel.SetStart("testString")
				listVPCAddressPrefixesOptionsModel.SetLimit(int64(1))
				listVPCAddressPrefixesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPCAddressPrefixesOptionsModel).ToNot(BeNil())
				Expect(listVPCAddressPrefixesOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listVPCAddressPrefixesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVPCAddressPrefixesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVPCAddressPrefixesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPCRoutesOptions successfully`, func() {
				// Construct an instance of the ListVPCRoutesOptions model
				vpcID := "testString"
				listVPCRoutesOptionsModel := vpcService.NewListVPCRoutesOptions(vpcID)
				listVPCRoutesOptionsModel.SetVPCID("testString")
				listVPCRoutesOptionsModel.SetZoneName("testString")
				listVPCRoutesOptionsModel.SetStart("testString")
				listVPCRoutesOptionsModel.SetLimit(int64(1))
				listVPCRoutesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPCRoutesOptionsModel).ToNot(BeNil())
				Expect(listVPCRoutesOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutesOptionsModel.ZoneName).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVPCRoutesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPCRoutingTableRoutesOptions successfully`, func() {
				// Construct an instance of the ListVPCRoutingTableRoutesOptions model
				vpcID := "testString"
				routingTableID := "testString"
				listVPCRoutingTableRoutesOptionsModel := vpcService.NewListVPCRoutingTableRoutesOptions(vpcID, routingTableID)
				listVPCRoutingTableRoutesOptionsModel.SetVPCID("testString")
				listVPCRoutingTableRoutesOptionsModel.SetRoutingTableID("testString")
				listVPCRoutingTableRoutesOptionsModel.SetStart("testString")
				listVPCRoutingTableRoutesOptionsModel.SetLimit(int64(1))
				listVPCRoutingTableRoutesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPCRoutingTableRoutesOptionsModel).ToNot(BeNil())
				Expect(listVPCRoutingTableRoutesOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutingTableRoutesOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutingTableRoutesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutingTableRoutesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVPCRoutingTableRoutesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPCRoutingTablesOptions successfully`, func() {
				// Construct an instance of the ListVPCRoutingTablesOptions model
				vpcID := "testString"
				listVPCRoutingTablesOptionsModel := vpcService.NewListVPCRoutingTablesOptions(vpcID)
				listVPCRoutingTablesOptionsModel.SetVPCID("testString")
				listVPCRoutingTablesOptionsModel.SetStart("testString")
				listVPCRoutingTablesOptionsModel.SetLimit(int64(1))
				listVPCRoutingTablesOptionsModel.SetIsDefault(true)
				listVPCRoutingTablesOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPCRoutingTablesOptionsModel).ToNot(BeNil())
				Expect(listVPCRoutingTablesOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutingTablesOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVPCRoutingTablesOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVPCRoutingTablesOptionsModel.IsDefault).To(Equal(core.BoolPtr(true)))
				Expect(listVPCRoutingTablesOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVpcsOptions successfully`, func() {
				// Construct an instance of the ListVpcsOptions model
				listVpcsOptionsModel := vpcService.NewListVpcsOptions()
				listVpcsOptionsModel.SetStart("testString")
				listVpcsOptionsModel.SetLimit(int64(1))
				listVpcsOptionsModel.SetResourceGroupID("testString")
				listVpcsOptionsModel.SetClassicAccess(true)
				listVpcsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVpcsOptionsModel).ToNot(BeNil())
				Expect(listVpcsOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVpcsOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVpcsOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listVpcsOptionsModel.ClassicAccess).To(Equal(core.BoolPtr(true)))
				Expect(listVpcsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPNGatewayConnectionLocalCIDRsOptions successfully`, func() {
				// Construct an instance of the ListVPNGatewayConnectionLocalCIDRsOptions model
				vpnGatewayID := "testString"
				id := "testString"
				listVPNGatewayConnectionLocalCIDRsOptionsModel := vpcService.NewListVPNGatewayConnectionLocalCIDRsOptions(vpnGatewayID, id)
				listVPNGatewayConnectionLocalCIDRsOptionsModel.SetVPNGatewayID("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.SetID("testString")
				listVPNGatewayConnectionLocalCIDRsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPNGatewayConnectionLocalCIDRsOptionsModel).ToNot(BeNil())
				Expect(listVPNGatewayConnectionLocalCIDRsOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionLocalCIDRsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionLocalCIDRsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPNGatewayConnectionPeerCIDRsOptions successfully`, func() {
				// Construct an instance of the ListVPNGatewayConnectionPeerCIDRsOptions model
				vpnGatewayID := "testString"
				id := "testString"
				listVPNGatewayConnectionPeerCIDRsOptionsModel := vpcService.NewListVPNGatewayConnectionPeerCIDRsOptions(vpnGatewayID, id)
				listVPNGatewayConnectionPeerCIDRsOptionsModel.SetVPNGatewayID("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.SetID("testString")
				listVPNGatewayConnectionPeerCIDRsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPNGatewayConnectionPeerCIDRsOptionsModel).ToNot(BeNil())
				Expect(listVPNGatewayConnectionPeerCIDRsOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionPeerCIDRsOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionPeerCIDRsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPNGatewayConnectionsOptions successfully`, func() {
				// Construct an instance of the ListVPNGatewayConnectionsOptions model
				vpnGatewayID := "testString"
				listVPNGatewayConnectionsOptionsModel := vpcService.NewListVPNGatewayConnectionsOptions(vpnGatewayID)
				listVPNGatewayConnectionsOptionsModel.SetVPNGatewayID("testString")
				listVPNGatewayConnectionsOptionsModel.SetStatus("testString")
				listVPNGatewayConnectionsOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPNGatewayConnectionsOptionsModel).ToNot(BeNil())
				Expect(listVPNGatewayConnectionsOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionsOptionsModel.Status).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewayConnectionsOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewListVPNGatewaysOptions successfully`, func() {
				// Construct an instance of the ListVPNGatewaysOptions model
				listVPNGatewaysOptionsModel := vpcService.NewListVPNGatewaysOptions()
				listVPNGatewaysOptionsModel.SetStart("testString")
				listVPNGatewaysOptionsModel.SetLimit(int64(1))
				listVPNGatewaysOptionsModel.SetResourceGroupID("testString")
				listVPNGatewaysOptionsModel.SetMode("route")
				listVPNGatewaysOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(listVPNGatewaysOptionsModel).ToNot(BeNil())
				Expect(listVPNGatewaysOptionsModel.Start).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewaysOptionsModel.Limit).To(Equal(core.Int64Ptr(int64(1))))
				Expect(listVPNGatewaysOptionsModel.ResourceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(listVPNGatewaysOptionsModel.Mode).To(Equal(core.StringPtr("route")))
				Expect(listVPNGatewaysOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewLoadBalancerListenerPolicyPrototype successfully`, func() {
				action := "forward"
				priority := int64(5)
				model, err := vpcService.NewLoadBalancerListenerPolicyPrototype(action, priority)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyRulePrototype successfully`, func() {
				condition := "contains"
				typeVar := "header"
				value := "testString"
				model, err := vpcService.NewLoadBalancerListenerPolicyRulePrototype(condition, typeVar, value)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPrototypeLoadBalancerContext successfully`, func() {
				port := int64(443)
				protocol := "http"
				model, err := vpcService.NewLoadBalancerListenerPrototypeLoadBalancerContext(port, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerLoggingDatapath successfully`, func() {
				active := true
				model, err := vpcService.NewLoadBalancerLoggingDatapath(active)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolHealthMonitorPatch successfully`, func() {
				delay := int64(5)
				maxRetries := int64(2)
				timeout := int64(2)
				typeVar := "http"
				model, err := vpcService.NewLoadBalancerPoolHealthMonitorPatch(delay, maxRetries, timeout, typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolHealthMonitorPrototype successfully`, func() {
				delay := int64(5)
				maxRetries := int64(2)
				timeout := int64(2)
				typeVar := "http"
				model, err := vpcService.NewLoadBalancerPoolHealthMonitorPrototype(delay, maxRetries, timeout, typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolIdentityByName successfully`, func() {
				name := "my-load-balancer-pool"
				model, err := vpcService.NewLoadBalancerPoolIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberPrototype successfully`, func() {
				port := int64(80)
				var target vpcv1.LoadBalancerPoolMemberTargetPrototypeIntf = nil
				_, err := vpcService.NewLoadBalancerPoolMemberPrototype(port, target)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolPrototype successfully`, func() {
				algorithm := "least_connections"
				var healthMonitor *vpcv1.LoadBalancerPoolHealthMonitorPrototype = nil
				protocol := "http"
				_, err := vpcService.NewLoadBalancerPoolPrototype(algorithm, healthMonitor, protocol)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolSessionPersistencePatch successfully`, func() {
				typeVar := "source_ip"
				model, err := vpcService.NewLoadBalancerPoolSessionPersistencePatch(typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolSessionPersistencePrototype successfully`, func() {
				typeVar := "source_ip"
				model, err := vpcService.NewLoadBalancerPoolSessionPersistencePrototype(typeVar)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkInterfacePrototype successfully`, func() {
				var subnet vpcv1.SubnetIdentityIntf = nil
				_, err := vpcService.NewNetworkInterfacePrototype(subnet)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewRemoveEndpointGatewayIPOptions successfully`, func() {
				// Construct an instance of the RemoveEndpointGatewayIPOptions model
				endpointGatewayID := "testString"
				id := "testString"
				removeEndpointGatewayIPOptionsModel := vpcService.NewRemoveEndpointGatewayIPOptions(endpointGatewayID, id)
				removeEndpointGatewayIPOptionsModel.SetEndpointGatewayID("testString")
				removeEndpointGatewayIPOptionsModel.SetID("testString")
				removeEndpointGatewayIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeEndpointGatewayIPOptionsModel).ToNot(BeNil())
				Expect(removeEndpointGatewayIPOptionsModel.EndpointGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(removeEndpointGatewayIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(removeEndpointGatewayIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveInstanceNetworkInterfaceFloatingIPOptions successfully`, func() {
				// Construct an instance of the RemoveInstanceNetworkInterfaceFloatingIPOptions model
				instanceID := "testString"
				networkInterfaceID := "testString"
				id := "testString"
				removeInstanceNetworkInterfaceFloatingIPOptionsModel := vpcService.NewRemoveInstanceNetworkInterfaceFloatingIPOptions(instanceID, networkInterfaceID, id)
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.SetInstanceID("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.SetNetworkInterfaceID("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.SetID("testString")
				removeInstanceNetworkInterfaceFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel).ToNot(BeNil())
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel.NetworkInterfaceID).To(Equal(core.StringPtr("testString")))
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(removeInstanceNetworkInterfaceFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveSecurityGroupNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the RemoveSecurityGroupNetworkInterfaceOptions model
				securityGroupID := "testString"
				id := "testString"
				removeSecurityGroupNetworkInterfaceOptionsModel := vpcService.NewRemoveSecurityGroupNetworkInterfaceOptions(securityGroupID, id)
				removeSecurityGroupNetworkInterfaceOptionsModel.SetSecurityGroupID("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.SetID("testString")
				removeSecurityGroupNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeSecurityGroupNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(removeSecurityGroupNetworkInterfaceOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(removeSecurityGroupNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(removeSecurityGroupNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveVPNGatewayConnectionLocalCIDROptions successfully`, func() {
				// Construct an instance of the RemoveVPNGatewayConnectionLocalCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				removeVPNGatewayConnectionLocalCIDROptionsModel := vpcService.NewRemoveVPNGatewayConnectionLocalCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetVPNGatewayID("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetID("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetCIDRPrefix("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetPrefixLength("testString")
				removeVPNGatewayConnectionLocalCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel).ToNot(BeNil())
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionLocalCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRemoveVPNGatewayConnectionPeerCIDROptions successfully`, func() {
				// Construct an instance of the RemoveVPNGatewayConnectionPeerCIDROptions model
				vpnGatewayID := "testString"
				id := "testString"
				cidrPrefix := "testString"
				prefixLength := "testString"
				removeVPNGatewayConnectionPeerCIDROptionsModel := vpcService.NewRemoveVPNGatewayConnectionPeerCIDROptions(vpnGatewayID, id, cidrPrefix, prefixLength)
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetVPNGatewayID("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetID("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetCIDRPrefix("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetPrefixLength("testString")
				removeVPNGatewayConnectionPeerCIDROptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel).ToNot(BeNil())
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.CIDRPrefix).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.PrefixLength).To(Equal(core.StringPtr("testString")))
				Expect(removeVPNGatewayConnectionPeerCIDROptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceLoadBalancerPoolMembersOptions successfully`, func() {
				// Construct an instance of the LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID model
				loadBalancerPoolMemberTargetPrototypeModel := new(vpcv1.LoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID)
				Expect(loadBalancerPoolMemberTargetPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberTargetPrototypeModel.ID = core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")
				Expect(loadBalancerPoolMemberTargetPrototypeModel.ID).To(Equal(core.StringPtr("1e09281b-f177-46fb-baf1-bc152b2e391a")))

				// Construct an instance of the LoadBalancerPoolMemberPrototype model
				loadBalancerPoolMemberPrototypeModel := new(vpcv1.LoadBalancerPoolMemberPrototype)
				Expect(loadBalancerPoolMemberPrototypeModel).ToNot(BeNil())
				loadBalancerPoolMemberPrototypeModel.Port = core.Int64Ptr(int64(80))
				loadBalancerPoolMemberPrototypeModel.Target = loadBalancerPoolMemberTargetPrototypeModel
				loadBalancerPoolMemberPrototypeModel.Weight = core.Int64Ptr(int64(50))
				Expect(loadBalancerPoolMemberPrototypeModel.Port).To(Equal(core.Int64Ptr(int64(80))))
				Expect(loadBalancerPoolMemberPrototypeModel.Target).To(Equal(loadBalancerPoolMemberTargetPrototypeModel))
				Expect(loadBalancerPoolMemberPrototypeModel.Weight).To(Equal(core.Int64Ptr(int64(50))))

				// Construct an instance of the ReplaceLoadBalancerPoolMembersOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				replaceLoadBalancerPoolMembersOptionsMembers := []vpcv1.LoadBalancerPoolMemberPrototype{}
				replaceLoadBalancerPoolMembersOptionsModel := vpcService.NewReplaceLoadBalancerPoolMembersOptions(loadBalancerID, poolID, replaceLoadBalancerPoolMembersOptionsMembers)
				replaceLoadBalancerPoolMembersOptionsModel.SetLoadBalancerID("testString")
				replaceLoadBalancerPoolMembersOptionsModel.SetPoolID("testString")
				replaceLoadBalancerPoolMembersOptionsModel.SetMembers([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel})
				replaceLoadBalancerPoolMembersOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceLoadBalancerPoolMembersOptionsModel).ToNot(BeNil())
				Expect(replaceLoadBalancerPoolMembersOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(replaceLoadBalancerPoolMembersOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(replaceLoadBalancerPoolMembersOptionsModel.Members).To(Equal([]vpcv1.LoadBalancerPoolMemberPrototype{*loadBalancerPoolMemberPrototypeModel}))
				Expect(replaceLoadBalancerPoolMembersOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceSubnetNetworkACLOptions successfully`, func() {
				// Construct an instance of the NetworkACLIdentityByID model
				networkACLIdentityModel := new(vpcv1.NetworkACLIdentityByID)
				Expect(networkACLIdentityModel).ToNot(BeNil())
				networkACLIdentityModel.ID = core.StringPtr("8ec3e730-f2b0-4855-a1a5-88be30024658")
				Expect(networkACLIdentityModel.ID).To(Equal(core.StringPtr("8ec3e730-f2b0-4855-a1a5-88be30024658")))

				// Construct an instance of the ReplaceSubnetNetworkACLOptions model
				id := "testString"
				var networkACLIdentity vpcv1.NetworkACLIdentityIntf = nil
				replaceSubnetNetworkACLOptionsModel := vpcService.NewReplaceSubnetNetworkACLOptions(id, networkACLIdentity)
				replaceSubnetNetworkACLOptionsModel.SetID("testString")
				replaceSubnetNetworkACLOptionsModel.SetNetworkACLIdentity(networkACLIdentityModel)
				replaceSubnetNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceSubnetNetworkACLOptionsModel).ToNot(BeNil())
				Expect(replaceSubnetNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(replaceSubnetNetworkACLOptionsModel.NetworkACLIdentity).To(Equal(networkACLIdentityModel))
				Expect(replaceSubnetNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewReplaceSubnetRoutingTableOptions successfully`, func() {
				// Construct an instance of the RoutingTableIdentityByID model
				routingTableIdentityModel := new(vpcv1.RoutingTableIdentityByID)
				Expect(routingTableIdentityModel).ToNot(BeNil())
				routingTableIdentityModel.ID = core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")
				Expect(routingTableIdentityModel.ID).To(Equal(core.StringPtr("6885e83f-03b2-4603-8a86-db2a0f55c840")))

				// Construct an instance of the ReplaceSubnetRoutingTableOptions model
				id := "testString"
				var routingTableIdentity vpcv1.RoutingTableIdentityIntf = nil
				replaceSubnetRoutingTableOptionsModel := vpcService.NewReplaceSubnetRoutingTableOptions(id, routingTableIdentity)
				replaceSubnetRoutingTableOptionsModel.SetID("testString")
				replaceSubnetRoutingTableOptionsModel.SetRoutingTableIdentity(routingTableIdentityModel)
				replaceSubnetRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(replaceSubnetRoutingTableOptionsModel).ToNot(BeNil())
				Expect(replaceSubnetRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(replaceSubnetRoutingTableOptionsModel.RoutingTableIdentity).To(Equal(routingTableIdentityModel))
				Expect(replaceSubnetRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewRoutePrototype successfully`, func() {
				destination := "192.168.3.0/24"
				var zone vpcv1.ZoneIdentityIntf = nil
				_, err := vpcService.NewRoutePrototype(destination, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewSetSubnetPublicGatewayOptions successfully`, func() {
				// Construct an instance of the PublicGatewayIdentityByID model
				publicGatewayIdentityModel := new(vpcv1.PublicGatewayIdentityByID)
				Expect(publicGatewayIdentityModel).ToNot(BeNil())
				publicGatewayIdentityModel.ID = core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")
				Expect(publicGatewayIdentityModel.ID).To(Equal(core.StringPtr("a4e28308-8ee7-46ab-8108-9f881f22bdbf")))

				// Construct an instance of the SetSubnetPublicGatewayOptions model
				id := "testString"
				var publicGatewayIdentity vpcv1.PublicGatewayIdentityIntf = nil
				setSubnetPublicGatewayOptionsModel := vpcService.NewSetSubnetPublicGatewayOptions(id, publicGatewayIdentity)
				setSubnetPublicGatewayOptionsModel.SetID("testString")
				setSubnetPublicGatewayOptionsModel.SetPublicGatewayIdentity(publicGatewayIdentityModel)
				setSubnetPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(setSubnetPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(setSubnetPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(setSubnetPublicGatewayOptionsModel.PublicGatewayIdentity).To(Equal(publicGatewayIdentityModel))
				Expect(setSubnetPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUnsetSubnetPublicGatewayOptions successfully`, func() {
				// Construct an instance of the UnsetSubnetPublicGatewayOptions model
				id := "testString"
				unsetSubnetPublicGatewayOptionsModel := vpcService.NewUnsetSubnetPublicGatewayOptions(id)
				unsetSubnetPublicGatewayOptionsModel.SetID("testString")
				unsetSubnetPublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(unsetSubnetPublicGatewayOptionsModel).ToNot(BeNil())
				Expect(unsetSubnetPublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(unsetSubnetPublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateDedicatedHostDiskOptions successfully`, func() {
				// Construct an instance of the UpdateDedicatedHostDiskOptions model
				dedicatedHostID := "testString"
				id := "testString"
				dedicatedHostDiskPatch := make(map[string]interface{})
				updateDedicatedHostDiskOptionsModel := vpcService.NewUpdateDedicatedHostDiskOptions(dedicatedHostID, id, dedicatedHostDiskPatch)
				updateDedicatedHostDiskOptionsModel.SetDedicatedHostID("testString")
				updateDedicatedHostDiskOptionsModel.SetID("testString")
				updateDedicatedHostDiskOptionsModel.SetDedicatedHostDiskPatch(make(map[string]interface{}))
				updateDedicatedHostDiskOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateDedicatedHostDiskOptionsModel).ToNot(BeNil())
				Expect(updateDedicatedHostDiskOptionsModel.DedicatedHostID).To(Equal(core.StringPtr("testString")))
				Expect(updateDedicatedHostDiskOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateDedicatedHostDiskOptionsModel.DedicatedHostDiskPatch).To(Equal(make(map[string]interface{})))
				Expect(updateDedicatedHostDiskOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateDedicatedHostGroupOptions successfully`, func() {
				// Construct an instance of the UpdateDedicatedHostGroupOptions model
				id := "testString"
				dedicatedHostGroupPatch := make(map[string]interface{})
				updateDedicatedHostGroupOptionsModel := vpcService.NewUpdateDedicatedHostGroupOptions(id, dedicatedHostGroupPatch)
				updateDedicatedHostGroupOptionsModel.SetID("testString")
				updateDedicatedHostGroupOptionsModel.SetDedicatedHostGroupPatch(make(map[string]interface{}))
				updateDedicatedHostGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateDedicatedHostGroupOptionsModel).ToNot(BeNil())
				Expect(updateDedicatedHostGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateDedicatedHostGroupOptionsModel.DedicatedHostGroupPatch).To(Equal(make(map[string]interface{})))
				Expect(updateDedicatedHostGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateDedicatedHostOptions successfully`, func() {
				// Construct an instance of the UpdateDedicatedHostOptions model
				id := "testString"
				dedicatedHostPatch := make(map[string]interface{})
				updateDedicatedHostOptionsModel := vpcService.NewUpdateDedicatedHostOptions(id, dedicatedHostPatch)
				updateDedicatedHostOptionsModel.SetID("testString")
				updateDedicatedHostOptionsModel.SetDedicatedHostPatch(make(map[string]interface{}))
				updateDedicatedHostOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateDedicatedHostOptionsModel).ToNot(BeNil())
				Expect(updateDedicatedHostOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateDedicatedHostOptionsModel.DedicatedHostPatch).To(Equal(make(map[string]interface{})))
				Expect(updateDedicatedHostOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateEndpointGatewayOptions successfully`, func() {
				// Construct an instance of the UpdateEndpointGatewayOptions model
				id := "testString"
				endpointGatewayPatch := make(map[string]interface{})
				updateEndpointGatewayOptionsModel := vpcService.NewUpdateEndpointGatewayOptions(id, endpointGatewayPatch)
				updateEndpointGatewayOptionsModel.SetID("testString")
				updateEndpointGatewayOptionsModel.SetEndpointGatewayPatch(make(map[string]interface{}))
				updateEndpointGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateEndpointGatewayOptionsModel).ToNot(BeNil())
				Expect(updateEndpointGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateEndpointGatewayOptionsModel.EndpointGatewayPatch).To(Equal(make(map[string]interface{})))
				Expect(updateEndpointGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateFloatingIPOptions successfully`, func() {
				// Construct an instance of the UpdateFloatingIPOptions model
				id := "testString"
				floatingIPPatch := make(map[string]interface{})
				updateFloatingIPOptionsModel := vpcService.NewUpdateFloatingIPOptions(id, floatingIPPatch)
				updateFloatingIPOptionsModel.SetID("testString")
				updateFloatingIPOptionsModel.SetFloatingIPPatch(make(map[string]interface{}))
				updateFloatingIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateFloatingIPOptionsModel).ToNot(BeNil())
				Expect(updateFloatingIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateFloatingIPOptionsModel.FloatingIPPatch).To(Equal(make(map[string]interface{})))
				Expect(updateFloatingIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateFlowLogCollectorOptions successfully`, func() {
				// Construct an instance of the UpdateFlowLogCollectorOptions model
				id := "testString"
				flowLogCollectorPatch := make(map[string]interface{})
				updateFlowLogCollectorOptionsModel := vpcService.NewUpdateFlowLogCollectorOptions(id, flowLogCollectorPatch)
				updateFlowLogCollectorOptionsModel.SetID("testString")
				updateFlowLogCollectorOptionsModel.SetFlowLogCollectorPatch(make(map[string]interface{}))
				updateFlowLogCollectorOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateFlowLogCollectorOptionsModel).ToNot(BeNil())
				Expect(updateFlowLogCollectorOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateFlowLogCollectorOptionsModel.FlowLogCollectorPatch).To(Equal(make(map[string]interface{})))
				Expect(updateFlowLogCollectorOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateIkePolicyOptions successfully`, func() {
				// Construct an instance of the UpdateIkePolicyOptions model
				id := "testString"
				ikePolicyPatch := make(map[string]interface{})
				updateIkePolicyOptionsModel := vpcService.NewUpdateIkePolicyOptions(id, ikePolicyPatch)
				updateIkePolicyOptionsModel.SetID("testString")
				updateIkePolicyOptionsModel.SetIkePolicyPatch(make(map[string]interface{}))
				updateIkePolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateIkePolicyOptionsModel).ToNot(BeNil())
				Expect(updateIkePolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateIkePolicyOptionsModel.IkePolicyPatch).To(Equal(make(map[string]interface{})))
				Expect(updateIkePolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateImageOptions successfully`, func() {
				// Construct an instance of the UpdateImageOptions model
				id := "testString"
				imagePatch := make(map[string]interface{})
				updateImageOptionsModel := vpcService.NewUpdateImageOptions(id, imagePatch)
				updateImageOptionsModel.SetID("testString")
				updateImageOptionsModel.SetImagePatch(make(map[string]interface{}))
				updateImageOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateImageOptionsModel).ToNot(BeNil())
				Expect(updateImageOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateImageOptionsModel.ImagePatch).To(Equal(make(map[string]interface{})))
				Expect(updateImageOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceDiskOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceDiskOptions model
				instanceID := "testString"
				id := "testString"
				instanceDiskPatch := make(map[string]interface{})
				updateInstanceDiskOptionsModel := vpcService.NewUpdateInstanceDiskOptions(instanceID, id, instanceDiskPatch)
				updateInstanceDiskOptionsModel.SetInstanceID("testString")
				updateInstanceDiskOptionsModel.SetID("testString")
				updateInstanceDiskOptionsModel.SetInstanceDiskPatch(make(map[string]interface{}))
				updateInstanceDiskOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceDiskOptionsModel).ToNot(BeNil())
				Expect(updateInstanceDiskOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceDiskOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceDiskOptionsModel.InstanceDiskPatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceDiskOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceGroupManagerActionOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceGroupManagerActionOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				id := "testString"
				instanceGroupManagerActionPatch := make(map[string]interface{})
				updateInstanceGroupManagerActionOptionsModel := vpcService.NewUpdateInstanceGroupManagerActionOptions(instanceGroupID, instanceGroupManagerID, id, instanceGroupManagerActionPatch)
				updateInstanceGroupManagerActionOptionsModel.SetInstanceGroupID("testString")
				updateInstanceGroupManagerActionOptionsModel.SetInstanceGroupManagerID("testString")
				updateInstanceGroupManagerActionOptionsModel.SetID("testString")
				updateInstanceGroupManagerActionOptionsModel.SetInstanceGroupManagerActionPatch(make(map[string]interface{}))
				updateInstanceGroupManagerActionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceGroupManagerActionOptionsModel).ToNot(BeNil())
				Expect(updateInstanceGroupManagerActionOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerActionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerActionOptionsModel.InstanceGroupManagerActionPatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceGroupManagerActionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceGroupManagerOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceGroupManagerOptions model
				instanceGroupID := "testString"
				id := "testString"
				instanceGroupManagerPatch := make(map[string]interface{})
				updateInstanceGroupManagerOptionsModel := vpcService.NewUpdateInstanceGroupManagerOptions(instanceGroupID, id, instanceGroupManagerPatch)
				updateInstanceGroupManagerOptionsModel.SetInstanceGroupID("testString")
				updateInstanceGroupManagerOptionsModel.SetID("testString")
				updateInstanceGroupManagerOptionsModel.SetInstanceGroupManagerPatch(make(map[string]interface{}))
				updateInstanceGroupManagerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceGroupManagerOptionsModel).ToNot(BeNil())
				Expect(updateInstanceGroupManagerOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerOptionsModel.InstanceGroupManagerPatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceGroupManagerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceGroupManagerPolicyOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceGroupManagerPolicyOptions model
				instanceGroupID := "testString"
				instanceGroupManagerID := "testString"
				id := "testString"
				instanceGroupManagerPolicyPatch := make(map[string]interface{})
				updateInstanceGroupManagerPolicyOptionsModel := vpcService.NewUpdateInstanceGroupManagerPolicyOptions(instanceGroupID, instanceGroupManagerID, id, instanceGroupManagerPolicyPatch)
				updateInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupID("testString")
				updateInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerID("testString")
				updateInstanceGroupManagerPolicyOptionsModel.SetID("testString")
				updateInstanceGroupManagerPolicyOptionsModel.SetInstanceGroupManagerPolicyPatch(make(map[string]interface{}))
				updateInstanceGroupManagerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceGroupManagerPolicyOptionsModel).ToNot(BeNil())
				Expect(updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupManagerPolicyOptionsModel.InstanceGroupManagerPolicyPatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceGroupManagerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceGroupMembershipOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceGroupMembershipOptions model
				instanceGroupID := "testString"
				id := "testString"
				instanceGroupMembershipPatch := make(map[string]interface{})
				updateInstanceGroupMembershipOptionsModel := vpcService.NewUpdateInstanceGroupMembershipOptions(instanceGroupID, id, instanceGroupMembershipPatch)
				updateInstanceGroupMembershipOptionsModel.SetInstanceGroupID("testString")
				updateInstanceGroupMembershipOptionsModel.SetID("testString")
				updateInstanceGroupMembershipOptionsModel.SetInstanceGroupMembershipPatch(make(map[string]interface{}))
				updateInstanceGroupMembershipOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceGroupMembershipOptionsModel).ToNot(BeNil())
				Expect(updateInstanceGroupMembershipOptionsModel.InstanceGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupMembershipOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupMembershipOptionsModel.InstanceGroupMembershipPatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceGroupMembershipOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceGroupOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceGroupOptions model
				id := "testString"
				instanceGroupPatch := make(map[string]interface{})
				updateInstanceGroupOptionsModel := vpcService.NewUpdateInstanceGroupOptions(id, instanceGroupPatch)
				updateInstanceGroupOptionsModel.SetID("testString")
				updateInstanceGroupOptionsModel.SetInstanceGroupPatch(make(map[string]interface{}))
				updateInstanceGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceGroupOptionsModel).ToNot(BeNil())
				Expect(updateInstanceGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceGroupOptionsModel.InstanceGroupPatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceNetworkInterfaceOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceNetworkInterfaceOptions model
				instanceID := "testString"
				id := "testString"
				networkInterfacePatch := make(map[string]interface{})
				updateInstanceNetworkInterfaceOptionsModel := vpcService.NewUpdateInstanceNetworkInterfaceOptions(instanceID, id, networkInterfacePatch)
				updateInstanceNetworkInterfaceOptionsModel.SetInstanceID("testString")
				updateInstanceNetworkInterfaceOptionsModel.SetID("testString")
				updateInstanceNetworkInterfaceOptionsModel.SetNetworkInterfacePatch(make(map[string]interface{}))
				updateInstanceNetworkInterfaceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceNetworkInterfaceOptionsModel).ToNot(BeNil())
				Expect(updateInstanceNetworkInterfaceOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceNetworkInterfaceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceNetworkInterfaceOptionsModel.NetworkInterfacePatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceNetworkInterfaceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceOptions model
				id := "testString"
				instancePatch := make(map[string]interface{})
				updateInstanceOptionsModel := vpcService.NewUpdateInstanceOptions(id, instancePatch)
				updateInstanceOptionsModel.SetID("testString")
				updateInstanceOptionsModel.SetInstancePatch(make(map[string]interface{}))
				updateInstanceOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceOptionsModel).ToNot(BeNil())
				Expect(updateInstanceOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceOptionsModel.InstancePatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceTemplateOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceTemplateOptions model
				id := "testString"
				instanceTemplatePatch := make(map[string]interface{})
				updateInstanceTemplateOptionsModel := vpcService.NewUpdateInstanceTemplateOptions(id, instanceTemplatePatch)
				updateInstanceTemplateOptionsModel.SetID("testString")
				updateInstanceTemplateOptionsModel.SetInstanceTemplatePatch(make(map[string]interface{}))
				updateInstanceTemplateOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceTemplateOptionsModel).ToNot(BeNil())
				Expect(updateInstanceTemplateOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceTemplateOptionsModel.InstanceTemplatePatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceTemplateOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateInstanceVolumeAttachmentOptions successfully`, func() {
				// Construct an instance of the UpdateInstanceVolumeAttachmentOptions model
				instanceID := "testString"
				id := "testString"
				volumeAttachmentPatch := make(map[string]interface{})
				updateInstanceVolumeAttachmentOptionsModel := vpcService.NewUpdateInstanceVolumeAttachmentOptions(instanceID, id, volumeAttachmentPatch)
				updateInstanceVolumeAttachmentOptionsModel.SetInstanceID("testString")
				updateInstanceVolumeAttachmentOptionsModel.SetID("testString")
				updateInstanceVolumeAttachmentOptionsModel.SetVolumeAttachmentPatch(make(map[string]interface{}))
				updateInstanceVolumeAttachmentOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateInstanceVolumeAttachmentOptionsModel).ToNot(BeNil())
				Expect(updateInstanceVolumeAttachmentOptionsModel.InstanceID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceVolumeAttachmentOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateInstanceVolumeAttachmentOptionsModel.VolumeAttachmentPatch).To(Equal(make(map[string]interface{})))
				Expect(updateInstanceVolumeAttachmentOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateIpsecPolicyOptions successfully`, func() {
				// Construct an instance of the UpdateIpsecPolicyOptions model
				id := "testString"
				iPsecPolicyPatch := make(map[string]interface{})
				updateIpsecPolicyOptionsModel := vpcService.NewUpdateIpsecPolicyOptions(id, iPsecPolicyPatch)
				updateIpsecPolicyOptionsModel.SetID("testString")
				updateIpsecPolicyOptionsModel.SetIPsecPolicyPatch(make(map[string]interface{}))
				updateIpsecPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateIpsecPolicyOptionsModel).ToNot(BeNil())
				Expect(updateIpsecPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateIpsecPolicyOptionsModel.IPsecPolicyPatch).To(Equal(make(map[string]interface{})))
				Expect(updateIpsecPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateKeyOptions successfully`, func() {
				// Construct an instance of the UpdateKeyOptions model
				id := "testString"
				keyPatch := make(map[string]interface{})
				updateKeyOptionsModel := vpcService.NewUpdateKeyOptions(id, keyPatch)
				updateKeyOptionsModel.SetID("testString")
				updateKeyOptionsModel.SetKeyPatch(make(map[string]interface{}))
				updateKeyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateKeyOptionsModel).ToNot(BeNil())
				Expect(updateKeyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateKeyOptionsModel.KeyPatch).To(Equal(make(map[string]interface{})))
				Expect(updateKeyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerListenerOptions successfully`, func() {
				// Construct an instance of the UpdateLoadBalancerListenerOptions model
				loadBalancerID := "testString"
				id := "testString"
				loadBalancerListenerPatch := make(map[string]interface{})
				updateLoadBalancerListenerOptionsModel := vpcService.NewUpdateLoadBalancerListenerOptions(loadBalancerID, id, loadBalancerListenerPatch)
				updateLoadBalancerListenerOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerListenerOptionsModel.SetID("testString")
				updateLoadBalancerListenerOptionsModel.SetLoadBalancerListenerPatch(make(map[string]interface{}))
				updateLoadBalancerListenerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerListenerOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerListenerOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerOptionsModel.LoadBalancerListenerPatch).To(Equal(make(map[string]interface{})))
				Expect(updateLoadBalancerListenerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerListenerPolicyOptions successfully`, func() {
				// Construct an instance of the UpdateLoadBalancerListenerPolicyOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				id := "testString"
				loadBalancerListenerPolicyPatch := make(map[string]interface{})
				updateLoadBalancerListenerPolicyOptionsModel := vpcService.NewUpdateLoadBalancerListenerPolicyOptions(loadBalancerID, listenerID, id, loadBalancerListenerPolicyPatch)
				updateLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerListenerPolicyOptionsModel.SetListenerID("testString")
				updateLoadBalancerListenerPolicyOptionsModel.SetID("testString")
				updateLoadBalancerListenerPolicyOptionsModel.SetLoadBalancerListenerPolicyPatch(make(map[string]interface{}))
				updateLoadBalancerListenerPolicyOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerListenerPolicyOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.LoadBalancerListenerPolicyPatch).To(Equal(make(map[string]interface{})))
				Expect(updateLoadBalancerListenerPolicyOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerListenerPolicyRuleOptions successfully`, func() {
				// Construct an instance of the UpdateLoadBalancerListenerPolicyRuleOptions model
				loadBalancerID := "testString"
				listenerID := "testString"
				policyID := "testString"
				id := "testString"
				loadBalancerListenerPolicyRulePatch := make(map[string]interface{})
				updateLoadBalancerListenerPolicyRuleOptionsModel := vpcService.NewUpdateLoadBalancerListenerPolicyRuleOptions(loadBalancerID, listenerID, policyID, id, loadBalancerListenerPolicyRulePatch)
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetListenerID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetPolicyID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetID("testString")
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetLoadBalancerListenerPolicyRulePatch(make(map[string]interface{}))
				updateLoadBalancerListenerPolicyRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.ListenerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.PolicyID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.LoadBalancerListenerPolicyRulePatch).To(Equal(make(map[string]interface{})))
				Expect(updateLoadBalancerListenerPolicyRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerOptions successfully`, func() {
				// Construct an instance of the UpdateLoadBalancerOptions model
				id := "testString"
				loadBalancerPatch := make(map[string]interface{})
				updateLoadBalancerOptionsModel := vpcService.NewUpdateLoadBalancerOptions(id, loadBalancerPatch)
				updateLoadBalancerOptionsModel.SetID("testString")
				updateLoadBalancerOptionsModel.SetLoadBalancerPatch(make(map[string]interface{}))
				updateLoadBalancerOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerOptionsModel.LoadBalancerPatch).To(Equal(make(map[string]interface{})))
				Expect(updateLoadBalancerOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerPoolMemberOptions successfully`, func() {
				// Construct an instance of the UpdateLoadBalancerPoolMemberOptions model
				loadBalancerID := "testString"
				poolID := "testString"
				id := "testString"
				loadBalancerPoolMemberPatch := make(map[string]interface{})
				updateLoadBalancerPoolMemberOptionsModel := vpcService.NewUpdateLoadBalancerPoolMemberOptions(loadBalancerID, poolID, id, loadBalancerPoolMemberPatch)
				updateLoadBalancerPoolMemberOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerPoolMemberOptionsModel.SetPoolID("testString")
				updateLoadBalancerPoolMemberOptionsModel.SetID("testString")
				updateLoadBalancerPoolMemberOptionsModel.SetLoadBalancerPoolMemberPatch(make(map[string]interface{}))
				updateLoadBalancerPoolMemberOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerPoolMemberOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerPoolMemberOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMemberOptionsModel.PoolID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMemberOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolMemberOptionsModel.LoadBalancerPoolMemberPatch).To(Equal(make(map[string]interface{})))
				Expect(updateLoadBalancerPoolMemberOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateLoadBalancerPoolOptions successfully`, func() {
				// Construct an instance of the UpdateLoadBalancerPoolOptions model
				loadBalancerID := "testString"
				id := "testString"
				loadBalancerPoolPatch := make(map[string]interface{})
				updateLoadBalancerPoolOptionsModel := vpcService.NewUpdateLoadBalancerPoolOptions(loadBalancerID, id, loadBalancerPoolPatch)
				updateLoadBalancerPoolOptionsModel.SetLoadBalancerID("testString")
				updateLoadBalancerPoolOptionsModel.SetID("testString")
				updateLoadBalancerPoolOptionsModel.SetLoadBalancerPoolPatch(make(map[string]interface{}))
				updateLoadBalancerPoolOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateLoadBalancerPoolOptionsModel).ToNot(BeNil())
				Expect(updateLoadBalancerPoolOptionsModel.LoadBalancerID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateLoadBalancerPoolOptionsModel.LoadBalancerPoolPatch).To(Equal(make(map[string]interface{})))
				Expect(updateLoadBalancerPoolOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateNetworkACLOptions successfully`, func() {
				// Construct an instance of the UpdateNetworkACLOptions model
				id := "testString"
				networkACLPatch := make(map[string]interface{})
				updateNetworkACLOptionsModel := vpcService.NewUpdateNetworkACLOptions(id, networkACLPatch)
				updateNetworkACLOptionsModel.SetID("testString")
				updateNetworkACLOptionsModel.SetNetworkACLPatch(make(map[string]interface{}))
				updateNetworkACLOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateNetworkACLOptionsModel).ToNot(BeNil())
				Expect(updateNetworkACLOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkACLOptionsModel.NetworkACLPatch).To(Equal(make(map[string]interface{})))
				Expect(updateNetworkACLOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateNetworkACLRuleOptions successfully`, func() {
				// Construct an instance of the UpdateNetworkACLRuleOptions model
				networkACLID := "testString"
				id := "testString"
				networkACLRulePatch := make(map[string]interface{})
				updateNetworkACLRuleOptionsModel := vpcService.NewUpdateNetworkACLRuleOptions(networkACLID, id, networkACLRulePatch)
				updateNetworkACLRuleOptionsModel.SetNetworkACLID("testString")
				updateNetworkACLRuleOptionsModel.SetID("testString")
				updateNetworkACLRuleOptionsModel.SetNetworkACLRulePatch(make(map[string]interface{}))
				updateNetworkACLRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateNetworkACLRuleOptionsModel).ToNot(BeNil())
				Expect(updateNetworkACLRuleOptionsModel.NetworkACLID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkACLRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateNetworkACLRuleOptionsModel.NetworkACLRulePatch).To(Equal(make(map[string]interface{})))
				Expect(updateNetworkACLRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdatePublicGatewayOptions successfully`, func() {
				// Construct an instance of the UpdatePublicGatewayOptions model
				id := "testString"
				publicGatewayPatch := make(map[string]interface{})
				updatePublicGatewayOptionsModel := vpcService.NewUpdatePublicGatewayOptions(id, publicGatewayPatch)
				updatePublicGatewayOptionsModel.SetID("testString")
				updatePublicGatewayOptionsModel.SetPublicGatewayPatch(make(map[string]interface{}))
				updatePublicGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updatePublicGatewayOptionsModel).ToNot(BeNil())
				Expect(updatePublicGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updatePublicGatewayOptionsModel.PublicGatewayPatch).To(Equal(make(map[string]interface{})))
				Expect(updatePublicGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSecurityGroupOptions successfully`, func() {
				// Construct an instance of the UpdateSecurityGroupOptions model
				id := "testString"
				securityGroupPatch := make(map[string]interface{})
				updateSecurityGroupOptionsModel := vpcService.NewUpdateSecurityGroupOptions(id, securityGroupPatch)
				updateSecurityGroupOptionsModel.SetID("testString")
				updateSecurityGroupOptionsModel.SetSecurityGroupPatch(make(map[string]interface{}))
				updateSecurityGroupOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSecurityGroupOptionsModel).ToNot(BeNil())
				Expect(updateSecurityGroupOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSecurityGroupOptionsModel.SecurityGroupPatch).To(Equal(make(map[string]interface{})))
				Expect(updateSecurityGroupOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSecurityGroupRuleOptions successfully`, func() {
				// Construct an instance of the UpdateSecurityGroupRuleOptions model
				securityGroupID := "testString"
				id := "testString"
				securityGroupRulePatch := make(map[string]interface{})
				updateSecurityGroupRuleOptionsModel := vpcService.NewUpdateSecurityGroupRuleOptions(securityGroupID, id, securityGroupRulePatch)
				updateSecurityGroupRuleOptionsModel.SetSecurityGroupID("testString")
				updateSecurityGroupRuleOptionsModel.SetID("testString")
				updateSecurityGroupRuleOptionsModel.SetSecurityGroupRulePatch(make(map[string]interface{}))
				updateSecurityGroupRuleOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSecurityGroupRuleOptionsModel).ToNot(BeNil())
				Expect(updateSecurityGroupRuleOptionsModel.SecurityGroupID).To(Equal(core.StringPtr("testString")))
				Expect(updateSecurityGroupRuleOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSecurityGroupRuleOptionsModel.SecurityGroupRulePatch).To(Equal(make(map[string]interface{})))
				Expect(updateSecurityGroupRuleOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSubnetOptions successfully`, func() {
				// Construct an instance of the UpdateSubnetOptions model
				id := "testString"
				subnetPatch := make(map[string]interface{})
				updateSubnetOptionsModel := vpcService.NewUpdateSubnetOptions(id, subnetPatch)
				updateSubnetOptionsModel.SetID("testString")
				updateSubnetOptionsModel.SetSubnetPatch(make(map[string]interface{}))
				updateSubnetOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSubnetOptionsModel).ToNot(BeNil())
				Expect(updateSubnetOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSubnetOptionsModel.SubnetPatch).To(Equal(make(map[string]interface{})))
				Expect(updateSubnetOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateSubnetReservedIPOptions successfully`, func() {
				// Construct an instance of the UpdateSubnetReservedIPOptions model
				subnetID := "testString"
				id := "testString"
				reservedIPPatch := make(map[string]interface{})
				updateSubnetReservedIPOptionsModel := vpcService.NewUpdateSubnetReservedIPOptions(subnetID, id, reservedIPPatch)
				updateSubnetReservedIPOptionsModel.SetSubnetID("testString")
				updateSubnetReservedIPOptionsModel.SetID("testString")
				updateSubnetReservedIPOptionsModel.SetReservedIPPatch(make(map[string]interface{}))
				updateSubnetReservedIPOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateSubnetReservedIPOptionsModel).ToNot(BeNil())
				Expect(updateSubnetReservedIPOptionsModel.SubnetID).To(Equal(core.StringPtr("testString")))
				Expect(updateSubnetReservedIPOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateSubnetReservedIPOptionsModel.ReservedIPPatch).To(Equal(make(map[string]interface{})))
				Expect(updateSubnetReservedIPOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVolumeOptions successfully`, func() {
				// Construct an instance of the UpdateVolumeOptions model
				id := "testString"
				volumePatch := make(map[string]interface{})
				updateVolumeOptionsModel := vpcService.NewUpdateVolumeOptions(id, volumePatch)
				updateVolumeOptionsModel.SetID("testString")
				updateVolumeOptionsModel.SetVolumePatch(make(map[string]interface{}))
				updateVolumeOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVolumeOptionsModel).ToNot(BeNil())
				Expect(updateVolumeOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVolumeOptionsModel.VolumePatch).To(Equal(make(map[string]interface{})))
				Expect(updateVolumeOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPCAddressPrefixOptions successfully`, func() {
				// Construct an instance of the UpdateVPCAddressPrefixOptions model
				vpcID := "testString"
				id := "testString"
				addressPrefixPatch := make(map[string]interface{})
				updateVPCAddressPrefixOptionsModel := vpcService.NewUpdateVPCAddressPrefixOptions(vpcID, id, addressPrefixPatch)
				updateVPCAddressPrefixOptionsModel.SetVPCID("testString")
				updateVPCAddressPrefixOptionsModel.SetID("testString")
				updateVPCAddressPrefixOptionsModel.SetAddressPrefixPatch(make(map[string]interface{}))
				updateVPCAddressPrefixOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPCAddressPrefixOptionsModel).ToNot(BeNil())
				Expect(updateVPCAddressPrefixOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCAddressPrefixOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCAddressPrefixOptionsModel.AddressPrefixPatch).To(Equal(make(map[string]interface{})))
				Expect(updateVPCAddressPrefixOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPCOptions successfully`, func() {
				// Construct an instance of the UpdateVPCOptions model
				id := "testString"
				vpcPatch := make(map[string]interface{})
				updateVPCOptionsModel := vpcService.NewUpdateVPCOptions(id, vpcPatch)
				updateVPCOptionsModel.SetID("testString")
				updateVPCOptionsModel.SetVPCPatch(make(map[string]interface{}))
				updateVPCOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPCOptionsModel).ToNot(BeNil())
				Expect(updateVPCOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCOptionsModel.VPCPatch).To(Equal(make(map[string]interface{})))
				Expect(updateVPCOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPCRouteOptions successfully`, func() {
				// Construct an instance of the UpdateVPCRouteOptions model
				vpcID := "testString"
				id := "testString"
				routePatch := make(map[string]interface{})
				updateVPCRouteOptionsModel := vpcService.NewUpdateVPCRouteOptions(vpcID, id, routePatch)
				updateVPCRouteOptionsModel.SetVPCID("testString")
				updateVPCRouteOptionsModel.SetID("testString")
				updateVPCRouteOptionsModel.SetRoutePatch(make(map[string]interface{}))
				updateVPCRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPCRouteOptionsModel).ToNot(BeNil())
				Expect(updateVPCRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCRouteOptionsModel.RoutePatch).To(Equal(make(map[string]interface{})))
				Expect(updateVPCRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPCRoutingTableOptions successfully`, func() {
				// Construct an instance of the UpdateVPCRoutingTableOptions model
				vpcID := "testString"
				id := "testString"
				routingTablePatch := make(map[string]interface{})
				updateVPCRoutingTableOptionsModel := vpcService.NewUpdateVPCRoutingTableOptions(vpcID, id, routingTablePatch)
				updateVPCRoutingTableOptionsModel.SetVPCID("testString")
				updateVPCRoutingTableOptionsModel.SetID("testString")
				updateVPCRoutingTableOptionsModel.SetRoutingTablePatch(make(map[string]interface{}))
				updateVPCRoutingTableOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPCRoutingTableOptionsModel).ToNot(BeNil())
				Expect(updateVPCRoutingTableOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCRoutingTableOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCRoutingTableOptionsModel.RoutingTablePatch).To(Equal(make(map[string]interface{})))
				Expect(updateVPCRoutingTableOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPCRoutingTableRouteOptions successfully`, func() {
				// Construct an instance of the UpdateVPCRoutingTableRouteOptions model
				vpcID := "testString"
				routingTableID := "testString"
				id := "testString"
				routePatch := make(map[string]interface{})
				updateVPCRoutingTableRouteOptionsModel := vpcService.NewUpdateVPCRoutingTableRouteOptions(vpcID, routingTableID, id, routePatch)
				updateVPCRoutingTableRouteOptionsModel.SetVPCID("testString")
				updateVPCRoutingTableRouteOptionsModel.SetRoutingTableID("testString")
				updateVPCRoutingTableRouteOptionsModel.SetID("testString")
				updateVPCRoutingTableRouteOptionsModel.SetRoutePatch(make(map[string]interface{}))
				updateVPCRoutingTableRouteOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPCRoutingTableRouteOptionsModel).ToNot(BeNil())
				Expect(updateVPCRoutingTableRouteOptionsModel.VPCID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCRoutingTableRouteOptionsModel.RoutingTableID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCRoutingTableRouteOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPCRoutingTableRouteOptionsModel.RoutePatch).To(Equal(make(map[string]interface{})))
				Expect(updateVPCRoutingTableRouteOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPNGatewayConnectionOptions successfully`, func() {
				// Construct an instance of the UpdateVPNGatewayConnectionOptions model
				vpnGatewayID := "testString"
				id := "testString"
				vpnGatewayConnectionPatch := make(map[string]interface{})
				updateVPNGatewayConnectionOptionsModel := vpcService.NewUpdateVPNGatewayConnectionOptions(vpnGatewayID, id, vpnGatewayConnectionPatch)
				updateVPNGatewayConnectionOptionsModel.SetVPNGatewayID("testString")
				updateVPNGatewayConnectionOptionsModel.SetID("testString")
				updateVPNGatewayConnectionOptionsModel.SetVPNGatewayConnectionPatch(make(map[string]interface{}))
				updateVPNGatewayConnectionOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPNGatewayConnectionOptionsModel).ToNot(BeNil())
				Expect(updateVPNGatewayConnectionOptionsModel.VPNGatewayID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPNGatewayConnectionOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPNGatewayConnectionOptionsModel.VPNGatewayConnectionPatch).To(Equal(make(map[string]interface{})))
				Expect(updateVPNGatewayConnectionOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewUpdateVPNGatewayOptions successfully`, func() {
				// Construct an instance of the UpdateVPNGatewayOptions model
				id := "testString"
				vpnGatewayPatch := make(map[string]interface{})
				updateVPNGatewayOptionsModel := vpcService.NewUpdateVPNGatewayOptions(id, vpnGatewayPatch)
				updateVPNGatewayOptionsModel.SetID("testString")
				updateVPNGatewayOptionsModel.SetVPNGatewayPatch(make(map[string]interface{}))
				updateVPNGatewayOptionsModel.SetHeaders(map[string]string{"foo": "bar"})
				Expect(updateVPNGatewayOptionsModel).ToNot(BeNil())
				Expect(updateVPNGatewayOptionsModel.ID).To(Equal(core.StringPtr("testString")))
				Expect(updateVPNGatewayOptionsModel.VPNGatewayPatch).To(Equal(make(map[string]interface{})))
				Expect(updateVPNGatewayOptionsModel.Headers).To(Equal(map[string]string{"foo": "bar"}))
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceByImageContext successfully`, func() {
				var volume *vpcv1.VolumePrototypeInstanceByImageContext = nil
				_, err := vpcService.NewVolumeAttachmentPrototypeInstanceByImageContext(volume)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewVolumeAttachmentPrototypeInstanceContext successfully`, func() {
				var volume vpcv1.VolumeAttachmentVolumePrototypeInstanceContextIntf = nil
				_, err := vpcService.NewVolumeAttachmentPrototypeInstanceContext(volume)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewVolumePrototypeInstanceByImageContext successfully`, func() {
				var profile vpcv1.VolumeProfileIdentityIntf = nil
				_, err := vpcService.NewVolumePrototypeInstanceByImageContext(profile)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewCertificateInstanceIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:cloudcerts:us-south:a/123456:b8866ea4-b8df-467e-801a-da1db7e020bf:certificate:78ff9c4c97d013fb2a95b21dddde7758"
				model, err := vpcService.NewCertificateInstanceIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewCloudObjectStorageBucketIdentityByName successfully`, func() {
				name := "bucket-27200-lwx4cfvcue"
				model, err := vpcService.NewCloudObjectStorageBucketIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := vpcService.NewDedicatedHostGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := vpcService.NewDedicatedHostGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostGroupIdentityByID successfully`, func() {
				id := "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := vpcService.NewDedicatedHostGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/profiles/mx2-host-152x1216"
				model, err := vpcService.NewDedicatedHostProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostProfileIdentityByName successfully`, func() {
				name := "mx2-host-152x1216"
				model, err := vpcService.NewDedicatedHostProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewDedicatedHostPrototypeDedicatedHostByGroup successfully`, func() {
				var profile vpcv1.DedicatedHostProfileIdentityIntf = nil
				var group vpcv1.DedicatedHostGroupIdentityIntf = nil
				_, err := vpcService.NewDedicatedHostPrototypeDedicatedHostByGroup(profile, group)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewDedicatedHostPrototypeDedicatedHostByZone successfully`, func() {
				var profile vpcv1.DedicatedHostProfileIdentityIntf = nil
				var zone vpcv1.ZoneIdentityIntf = nil
				_, err := vpcService.NewDedicatedHostPrototypeDedicatedHostByZone(profile, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewEncryptionKeyIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:kms:us-south:a/dffc98a0f1f0f95f6613b3b752286b87:e4a29d1a-2ef0-42a6-8fd2-350deb1c647e:key:5437653b-c4b1-447f-9646-b2a2a4cd6179"
				model, err := vpcService.NewEncryptionKeyIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEndpointGatewayReservedIPReservedIPPrototypeTargetContext successfully`, func() {
				var subnet vpcv1.SubnetIdentityIntf = nil
				_, err := vpcService.NewEndpointGatewayReservedIPReservedIPPrototypeTargetContext(subnet)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewFloatingIPByTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := vpcService.NewFloatingIPByTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPByTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID successfully`, func() {
				id := "10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := vpcService.NewFloatingIPByTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := vpcService.NewFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID successfully`, func() {
				id := "10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := vpcService.NewFloatingIPPatchTargetNetworkInterfaceIdentityNetworkInterfaceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFloatingIPPrototypeFloatingIPByTarget successfully`, func() {
				var target vpcv1.FloatingIPByTargetNetworkInterfaceIdentityIntf = nil
				_, err := vpcService.NewFloatingIPPrototypeFloatingIPByTarget(target)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewFloatingIPPrototypeFloatingIPByZone successfully`, func() {
				var zone vpcv1.ZoneIdentityIntf = nil
				_, err := vpcService.NewFloatingIPPrototypeFloatingIPByZone(zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewIkePolicyIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/ike_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := vpcService.NewIkePolicyIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIkePolicyIdentityByID successfully`, func() {
				id := "ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := vpcService.NewIkePolicyIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIPsecPolicyIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/ipsec_policies/ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := vpcService.NewIPsecPolicyIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewIPsecPolicyIdentityByID successfully`, func() {
				id := "ddf51bec-3424-11e8-b467-0ed5f89f718b"
				model, err := vpcService.NewIPsecPolicyIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImageIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::image:72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"
				model, err := vpcService.NewImageIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImageIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/images/72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"
				model, err := vpcService.NewImageIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImageIdentityByID successfully`, func() {
				id := "72b27b5c-f4b0-48bb-b954-5becc7c1dcb8"
				model, err := vpcService.NewImageIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewImagePrototypeImageByFile successfully`, func() {
				var file *vpcv1.ImageFilePrototype = nil
				var operatingSystem vpcv1.OperatingSystemIdentityIntf = nil
				_, err := vpcService.NewImagePrototypeImageByFile(file, operatingSystem)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype successfully`, func() {
				metricType := "cpu"
				metricValue := int64(38)
				policyType := "target"
				model, err := vpcService.NewInstanceGroupManagerPolicyPrototypeInstanceGroupManagerTargetPolicyPrototype(metricType, metricValue, policyType)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype successfully`, func() {
				managerType := "autoscale"
				maxMembershipCount := int64(10)
				model, err := vpcService.NewInstanceGroupManagerPrototypeInstanceGroupManagerAutoScalePrototype(managerType, maxMembershipCount)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerPrototypeInstanceGroupManagerScheduledPrototype successfully`, func() {
				managerType := "scheduled"
				model, err := vpcService.NewInstanceGroupManagerPrototypeInstanceGroupManagerScheduledPrototype(managerType)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePatchProfileInstanceProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"
				model, err := vpcService.NewInstancePatchProfileInstanceProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePatchProfileInstanceProfileIdentityByName successfully`, func() {
				name := "bc1-4x16"
				model, err := vpcService.NewInstancePatchProfileInstanceProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instance/profiles/bc1-4x16"
				model, err := vpcService.NewInstanceProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceProfileIdentityByName successfully`, func() {
				name := "bc1-4x16"
				model, err := vpcService.NewInstanceProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePrototypeInstanceByImage successfully`, func() {
				var image vpcv1.ImageIdentityIntf = nil
				var primaryNetworkInterface *vpcv1.NetworkInterfacePrototype = nil
				var zone vpcv1.ZoneIdentityIntf = nil
				_, err := vpcService.NewInstancePrototypeInstanceByImage(image, primaryNetworkInterface, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstancePrototypeInstanceBySourceTemplate successfully`, func() {
				var sourceTemplate vpcv1.InstanceTemplateIdentityIntf = nil
				_, err := vpcService.NewInstancePrototypeInstanceBySourceTemplate(sourceTemplate)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceTemplateIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::instance-template:1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewInstanceTemplateIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceTemplateIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instance/templates/1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewInstanceTemplateIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceTemplateIdentityByID successfully`, func() {
				id := "a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := vpcService.NewInstanceTemplateIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceTemplatePrototypeInstanceByImage successfully`, func() {
				var image vpcv1.ImageIdentityIntf = nil
				var primaryNetworkInterface *vpcv1.NetworkInterfacePrototype = nil
				var zone vpcv1.ZoneIdentityIntf = nil
				_, err := vpcService.NewInstanceTemplatePrototypeInstanceByImage(image, primaryNetworkInterface, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceTemplatePrototypeInstanceBySourceTemplate successfully`, func() {
				var sourceTemplate vpcv1.InstanceTemplateIdentityIntf = nil
				_, err := vpcService.NewInstanceTemplatePrototypeInstanceBySourceTemplate(sourceTemplate)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewKeyIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::key:a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := vpcService.NewKeyIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/keys/a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := vpcService.NewKeyIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyIdentityByID successfully`, func() {
				id := "a6b1a881-2ce8-41a3-80fc-36316a73f803"
				model, err := vpcService.NewKeyIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewKeyIdentityKeyIdentityByFingerprint successfully`, func() {
				fingerprint := "SHA256:yxavE4CIOL2NlsqcurRO3xGjkP6m/0mp8ugojH5yxlY"
				model, err := vpcService.NewKeyIdentityKeyIdentityByFingerprint(fingerprint)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::load-balancer:dd754295-e9e0-4c9d-bf6c-58fbc59e5727"
				model, err := vpcService.NewLoadBalancerIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727"
				model, err := vpcService.NewLoadBalancerIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerIdentityByID successfully`, func() {
				id := "dd754295-e9e0-4c9d-bf6c-58fbc59e5727"
				model, err := vpcService.NewLoadBalancerIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyTargetPrototypeLoadBalancerListenerPolicyRedirectURLPrototype successfully`, func() {
				httpStatusCode := int64(301)
				url := "https://www.redirect.com"
				model, err := vpcService.NewLoadBalancerListenerPolicyTargetPrototypeLoadBalancerListenerPolicyRedirectURLPrototype(httpStatusCode, url)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := vpcService.NewLoadBalancerPoolIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolIdentityByID successfully`, func() {
				id := "70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := vpcService.NewLoadBalancerPoolIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberTargetPrototypeIP successfully`, func() {
				address := "192.168.3.4"
				model, err := vpcService.NewLoadBalancerPoolMemberTargetPrototypeIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancer/profiles/network-fixed"
				model, err := vpcService.NewLoadBalancerProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerProfileIdentityByName successfully`, func() {
				name := "network-fixed"
				model, err := vpcService.NewLoadBalancerProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::network-acl:a4e28308-8ee7-46ab-8108-9f881f22bdbf"
				model, err := vpcService.NewNetworkACLIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf"
				model, err := vpcService.NewNetworkACLIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLIdentityByID successfully`, func() {
				id := "a4e28308-8ee7-46ab-8108-9f881f22bdbf"
				model, err := vpcService.NewNetworkACLIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLPrototypeNetworkACLBySourceNetworkACL successfully`, func() {
				var vpc vpcv1.VPCIdentityIntf = nil
				var sourceNetworkACL vpcv1.NetworkACLIdentityIntf = nil
				_, err := vpcService.NewNetworkACLPrototypeNetworkACLBySourceNetworkACL(vpc, sourceNetworkACL)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewNetworkACLRuleBeforePatchNetworkACLRuleIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := vpcService.NewNetworkACLRuleBeforePatchNetworkACLRuleIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRuleBeforePatchNetworkACLRuleIdentityByID successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := vpcService.NewNetworkACLRuleBeforePatchNetworkACLRuleIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/network_acls/a4e28308-8ee7-46ab-8108-9f881f22bdbf/rules/8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := vpcService.NewNetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID successfully`, func() {
				id := "8daca77a-4980-4d33-8f3e-7038797be8f9"
				model, err := vpcService.NewNetworkACLRuleBeforePrototypeNetworkACLRuleIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				source := "192.168.3.2/32"
				protocol := "all"
				model, err := vpcService.NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolAll(action, destination, direction, source, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				source := "192.168.3.2/32"
				protocol := "icmp"
				model, err := vpcService.NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolIcmp(action, destination, direction, source, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTcpudp successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				source := "192.168.3.2/32"
				protocol := "udp"
				model, err := vpcService.NewNetworkACLRulePrototypeNetworkACLContextNetworkACLRuleProtocolTcpudp(action, destination, direction, source, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLRuleProtocolAll successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				source := "192.168.3.2/32"
				protocol := "all"
				model, err := vpcService.NewNetworkACLRulePrototypeNetworkACLRuleProtocolAll(action, destination, direction, source, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLRuleProtocolIcmp successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				source := "192.168.3.2/32"
				protocol := "icmp"
				model, err := vpcService.NewNetworkACLRulePrototypeNetworkACLRuleProtocolIcmp(action, destination, direction, source, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewNetworkACLRulePrototypeNetworkACLRuleProtocolTcpudp successfully`, func() {
				action := "allow"
				destination := "192.168.3.2/32"
				direction := "inbound"
				source := "192.168.3.2/32"
				protocol := "udp"
				model, err := vpcService.NewNetworkACLRulePrototypeNetworkACLRuleProtocolTcpudp(action, destination, direction, source, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewOperatingSystemIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/operating_systems/ubuntu-16-amd64"
				model, err := vpcService.NewOperatingSystemIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewOperatingSystemIdentityByName successfully`, func() {
				name := "ubuntu-16-amd64"
				model, err := vpcService.NewOperatingSystemIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::public-gateway:dc5431ef-1fc6-4861-adc9-a59d077d1241"
				model, err := vpcService.NewPublicGatewayIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/public_gateways/dc5431ef-1fc6-4861-adc9-a59d077d1241"
				model, err := vpcService.NewPublicGatewayIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayIdentityByID successfully`, func() {
				id := "dc5431ef-1fc6-4861-adc9-a59d077d1241"
				model, err := vpcService.NewPublicGatewayIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewResourceGroupIdentityByID successfully`, func() {
				id := "fee82deba12e4c0fb69c3b09d1f12345"
				model, err := vpcService.NewResourceGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRouteNextHopPrototypeRouteNextHopIP successfully`, func() {
				address := "192.168.3.4"
				model, err := vpcService.NewRouteNextHopPrototypeRouteNextHopIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRoutingTableIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/vpcs/982d72b7-db1b-4606-afb2-ed6bd4b0bed1/routing_tables/6885e83f-03b2-4603-8a86-db2a0f55c840"
				model, err := vpcService.NewRoutingTableIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRoutingTableIdentityByID successfully`, func() {
				id := "1a15dca5-7e33-45e1-b7c5-bc690e569531"
				model, err := vpcService.NewRoutingTableIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := vpcService.NewSecurityGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := vpcService.NewSecurityGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupIdentityByID successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := vpcService.NewSecurityGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAll successfully`, func() {
				direction := "inbound"
				protocol := "all"
				model, err := vpcService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolAll(direction, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp successfully`, func() {
				direction := "inbound"
				protocol := "icmp"
				model, err := vpcService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolIcmp(direction, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp successfully`, func() {
				direction := "inbound"
				protocol := "udp"
				model, err := vpcService.NewSecurityGroupRulePrototypeSecurityGroupRuleProtocolTcpudp(direction, protocol)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePatchCIDR successfully`, func() {
				cidrBlock := "192.168.3.0/24"
				model, err := vpcService.NewSecurityGroupRuleRemotePatchCIDR(cidrBlock)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePatchIP successfully`, func() {
				address := "192.168.3.4"
				model, err := vpcService.NewSecurityGroupRuleRemotePatchIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePrototypeCIDR successfully`, func() {
				cidrBlock := "192.168.3.0/24"
				model, err := vpcService.NewSecurityGroupRuleRemotePrototypeCIDR(cidrBlock)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePrototypeIP successfully`, func() {
				address := "192.168.3.4"
				model, err := vpcService.NewSecurityGroupRuleRemotePrototypeIP(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := vpcService.NewSubnetIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := vpcService.NewSubnetIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetIdentityByID successfully`, func() {
				id := "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := vpcService.NewSubnetIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSubnetPrototypeSubnetByCIDR successfully`, func() {
				var vpc vpcv1.VPCIdentityIntf = nil
				ipv4CIDRBlock := "10.0.0.0/24"
				_, err := vpcService.NewSubnetPrototypeSubnetByCIDR(vpc, ipv4CIDRBlock)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewSubnetPrototypeSubnetByTotalCount successfully`, func() {
				var vpc vpcv1.VPCIdentityIntf = nil
				totalIpv4AddressCount := int64(256)
				var zone vpcv1.ZoneIdentityIntf = nil
				_, err := vpcService.NewSubnetPrototypeSubnetByTotalCount(vpc, totalIpv4AddressCount, zone)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewVPCIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := vpcService.NewVPCIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVPCIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := vpcService.NewVPCIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVPCIdentityByID successfully`, func() {
				id := "4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := vpcService.NewVPCIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVPNGatewayConnectionPrototypeVPNGatewayConnectionPolicyModePrototype successfully`, func() {
				peerAddress := "169.21.50.5"
				psk := "lkj14b1oi0alcniejkso"
				localCIDRs := []string{"192.168.1.0/24"}
				peerCIDRs := []string{"10.45.1.0/24"}
				model, err := vpcService.NewVPNGatewayConnectionPrototypeVPNGatewayConnectionPolicyModePrototype(peerAddress, psk, localCIDRs, peerCIDRs)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := vpcService.NewVolumeIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := vpcService.NewVolumeIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeIdentityByID successfully`, func() {
				id := "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := vpcService.NewVolumeIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeProfileIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/volume/profiles/general-purpose"
				model, err := vpcService.NewVolumeProfileIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeProfileIdentityByName successfully`, func() {
				name := "general-purpose"
				model, err := vpcService.NewVolumeProfileIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumePrototypeVolumeByCapacity successfully`, func() {
				var profile vpcv1.VolumeProfileIdentityIntf = nil
				var zone vpcv1.ZoneIdentityIntf = nil
				capacity := int64(100)
				_, err := vpcService.NewVolumePrototypeVolumeByCapacity(profile, zone, capacity)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewZoneIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/regions/us-south/zones/us-south-1"
				model, err := vpcService.NewZoneIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewZoneIdentityByName successfully`, func() {
				name := "us-south-1"
				model, err := vpcService.NewZoneIdentityByName(name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e/reserved_ips/6d353a0f-aeb1-4ae1-832e-1110d10981bb"
				model, err := vpcService.NewEndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID successfully`, func() {
				id := "6d353a0f-aeb1-4ae1-832e-1110d10981bb"
				model, err := vpcService.NewEndpointGatewayReservedIPReservedIPIdentityReservedIPIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN successfully`, func() {
				resourceType := "provider_cloud_service"
				crn := "crn:v1:bluemix:public:cloudant:us-south:a/123456:3527280b-9327-4411-8020-591092e60353::"
				model, err := vpcService.NewEndpointGatewayTargetPrototypeProviderCloudServiceIdentityProviderCloudServiceIdentityByCRN(resourceType, crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewEndpointGatewayTargetPrototypeProviderInfrastructureServiceIdentityProviderInfrastructureServiceIdentityByName successfully`, func() {
				resourceType := "provider_cloud_service"
				name := "ibm-ntp-server"
				model, err := vpcService.NewEndpointGatewayTargetPrototypeProviderInfrastructureServiceIdentityProviderInfrastructureServiceIdentityByName(resourceType, name)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByID successfully`, func() {
				id := "1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeInstanceIdentityInstanceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a/network_interfaces/10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID successfully`, func() {
				id := "10c02d81-0ecb-4dc5-897d-28392913b81e"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeNetworkInterfaceIdentityNetworkInterfaceIdentityNetworkInterfaceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::subnet:7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/subnets/7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByID successfully`, func() {
				id := "7ec86020-1c6e-4889-b3f0-a15f2e50f87e"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeSubnetIdentitySubnetIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::vpc:4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/vpcs/4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewFlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByID successfully`, func() {
				id := "4727d842-f94f-4a2d-824a-9bc9b02c523b"
				model, err := vpcService.NewFlowLogCollectorTargetPrototypeVPCIdentityVPCIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerScheduledActionByManagerManagerAutoScalePrototypeInstanceGroupManagerScheduledActionManagerAutoScalePrototypeInstanceGroupManagerIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instance_groups/1e09281b-f177-46fb-baf1-bc152b2e391a/managers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727"
				model, err := vpcService.NewInstanceGroupManagerScheduledActionByManagerManagerAutoScalePrototypeInstanceGroupManagerScheduledActionManagerAutoScalePrototypeInstanceGroupManagerIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerScheduledActionByManagerManagerAutoScalePrototypeInstanceGroupManagerScheduledActionManagerAutoScalePrototypeInstanceGroupManagerIdentityByID successfully`, func() {
				id := "1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewInstanceGroupManagerScheduledActionByManagerManagerAutoScalePrototypeInstanceGroupManagerScheduledActionManagerAutoScalePrototypeInstanceGroupManagerIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host-group:bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := vpcService.NewInstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/dedicated_host/groups/bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := vpcService.NewInstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByID successfully`, func() {
				id := "bcc5b834-1258-4b9c-c3b4-43bc9cf5cde0"
				model, err := vpcService.NewInstancePlacementTargetPrototypeDedicatedHostGroupIdentityDedicatedHostGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::dedicated-host:1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewInstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/dedicated_hosts/1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewInstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewInstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID successfully`, func() {
				id := "1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewInstancePlacementTargetPrototypeDedicatedHostIdentityDedicatedHostIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := vpcService.NewLoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID successfully`, func() {
				id := "70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := vpcService.NewLoadBalancerListenerPolicyTargetPatchLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/load_balancers/dd754295-e9e0-4c9d-bf6c-58fbc59e5727/pools/70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := vpcService.NewLoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID successfully`, func() {
				id := "70294e14-4e61-11e8-bcf4-0242ac110004"
				model, err := vpcService.NewLoadBalancerListenerPolicyTargetPrototypeLoadBalancerPoolIdentityLoadBalancerPoolIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::instance:1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewLoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/instances/1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewLoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewLoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID successfully`, func() {
				id := "1e09281b-f177-46fb-baf1-bc152b2e391a"
				model, err := vpcService.NewLoadBalancerPoolMemberTargetPrototypeInstanceIdentityInstanceIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByAddress successfully`, func() {
				address := "203.0.113.1"
				model, err := vpcService.NewPublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByAddress(address)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::floating-ip:39300233-9995-4806-89a5-3c1b6eb88689"
				model, err := vpcService.NewPublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/floating_ips/39300233-9995-4806-89a5-3c1b6eb88689"
				model, err := vpcService.NewPublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewPublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID successfully`, func() {
				id := "39300233-9995-4806-89a5-3c1b6eb88689"
				model, err := vpcService.NewPublicGatewayFloatingIPPrototypeFloatingIPIdentityFloatingIPIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::endpoint-gateway:d7cc5196-9864-48c4-82d8-3f30da41fcc5"
				model, err := vpcService.NewReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/endpoint_gateways/d7cc5196-9864-48c4-82d8-3f30da41fcc5"
				model, err := vpcService.NewReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID successfully`, func() {
				id := "d7cc5196-9864-48c4-82d8-3f30da41fcc5"
				model, err := vpcService.NewReservedIPTargetPrototypeEndpointGatewayIdentityEndpointGatewayIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRouteNextHopPrototypeVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/vpn_gateways/ddf51bec-3424-11e8-b467-0ed5f89f718b/connections/93487806-7743-4c46-81d6-72869883ea0b"
				model, err := vpcService.NewRouteNextHopPrototypeVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewRouteNextHopPrototypeVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityByID successfully`, func() {
				id := "a10a5771-dc23-442c-8460-c3601d8542f7"
				model, err := vpcService.NewRouteNextHopPrototypeVPNGatewayConnectionIdentityVPNGatewayConnectionIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := vpcService.NewSecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := vpcService.NewSecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByID successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := vpcService.NewSecurityGroupRuleRemotePatchSecurityGroupIdentitySecurityGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south:a/123456::security-group:be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := vpcService.NewSecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/security_groups/be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := vpcService.NewSecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewSecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByID successfully`, func() {
				id := "be5df5ca-12a0-494b-907e-aa6ec2bfa271"
				model, err := vpcService.NewSecurityGroupRuleRemotePrototypeSecurityGroupIdentitySecurityGroupIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByCRN successfully`, func() {
				crn := "crn:v1:bluemix:public:is:us-south-1:a/123456::volume:1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := vpcService.NewVolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByCRN(crn)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByHref successfully`, func() {
				href := "https://us-south.iaas.cloud.ibm.com/v1/volumes/1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := vpcService.NewVolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByHref(href)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID successfully`, func() {
				id := "1a6b7274-678d-4dfb-8981-c71dd9d4daa5"
				model, err := vpcService.NewVolumeAttachmentVolumePrototypeInstanceContextVolumeIdentityVolumeIdentityByID(id)
				Expect(model).ToNot(BeNil())
				Expect(err).To(BeNil())
			})
			It(`Invoke NewVolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity successfully`, func() {
				var profile vpcv1.VolumeProfileIdentityIntf = nil
				capacity := int64(100)
				_, err := vpcService.NewVolumeAttachmentVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumePrototypeInstanceContextVolumeByCapacity(profile, capacity)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpecByGroup successfully`, func() {
				var group *vpcv1.InstanceGroupManagerScheduledActionGroupPrototype = nil
				_, err := vpcService.NewInstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpecByGroup(group)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpecByManager successfully`, func() {
				var manager vpcv1.InstanceGroupManagerScheduledActionByManagerManagerIntf = nil
				_, err := vpcService.NewInstanceGroupManagerActionPrototypeScheduledActionPrototypeByCronSpecByManager(manager)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup successfully`, func() {
				var group *vpcv1.InstanceGroupManagerScheduledActionGroupPrototype = nil
				_, err := vpcService.NewInstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByGroup(group)
				Expect(err).ToNot(BeNil())
			})
			It(`Invoke NewInstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByManager successfully`, func() {
				var manager vpcv1.InstanceGroupManagerScheduledActionByManagerManagerIntf = nil
				_, err := vpcService.NewInstanceGroupManagerActionPrototypeScheduledActionPrototypeByRunAtByManager(manager)
				Expect(err).ToNot(BeNil())
			})
		})
	})
	Describe(`Utility function tests`, func() {
		It(`Invoke CreateMockByteArray() successfully`, func() {
			mockByteArray := CreateMockByteArray("This is a test")
			Expect(mockByteArray).ToNot(BeNil())
		})
		It(`Invoke CreateMockUUID() successfully`, func() {
			mockUUID := CreateMockUUID("9fab83da-98cb-4f18-a7ba-b6f0435c9673")
			Expect(mockUUID).ToNot(BeNil())
		})
		It(`Invoke CreateMockReader() successfully`, func() {
			mockReader := CreateMockReader("This is a test.")
			Expect(mockReader).ToNot(BeNil())
		})
		It(`Invoke CreateMockDate() successfully`, func() {
			mockDate := CreateMockDate("2019-01-01")
			Expect(mockDate).ToNot(BeNil())
		})
		It(`Invoke CreateMockDateTime() successfully`, func() {
			mockDateTime := CreateMockDateTime("2019-01-01T12:00:00.000Z")
			Expect(mockDateTime).ToNot(BeNil())
		})
	})
})

//
// Utility functions used by the generated test code
//

func CreateMockByteArray(mockData string) *[]byte {
	ba := make([]byte, 0)
	ba = append(ba, mockData...)
	return &ba
}

func CreateMockUUID(mockData string) *strfmt.UUID {
	uuid := strfmt.UUID(mockData)
	return &uuid
}

func CreateMockReader(mockData string) io.ReadCloser {
	return ioutil.NopCloser(bytes.NewReader([]byte(mockData)))
}

func CreateMockDate(mockData string) *strfmt.Date {
	d, err := core.ParseDate(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func CreateMockDateTime(mockData string) *strfmt.DateTime {
	d, err := core.ParseDateTime(mockData)
	if err != nil {
		return nil
	}
	return &d
}

func SetTestEnvironment(testEnvironment map[string]string) {
	for key, value := range testEnvironment {
		os.Setenv(key, value)
	}
}

func ClearTestEnvironment(testEnvironment map[string]string) {
	for key := range testEnvironment {
		os.Unsetenv(key)
	}
}
